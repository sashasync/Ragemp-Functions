[
  "mp.game.app.appGetFloat(property);",
  "RAGE.Game.App.AppGetFloat(property);",
  "mp.game.app.appGetString(property);",
  "RAGE.Game.App.AppGetString(property);",
  "mp.game.app.appSetBlock(blockName);",
  "RAGE.Game.App.AppSetBlock(blockName);",
  "mp.game.app.appSetApp(appName);",
  "RAGE.Game.App.AppSetApp(appName);",
  "mp.game.audio.clearAmbientZoneListState(p0, p1);",
  "mp.game.app.appSetInt(property, value);",
  "RAGE.Game.App.AppSetInt(property, value);",
  "mp.game.audio.cancelMusicEvent(eventName);",
  "mp.game.audio.freezeRadioStation(radioStation);",
  "mp.game.app.appGetInt(property);",
  "RAGE.Game.App.AppGetInt(property);",
  "mp.game.audio.clearAmbientZoneState(p0, p1);",
  "mp.game.app.appSetString(property, value);",
  "RAGE.Game.App.AppSetString(property, value);",
  "mp.game.audio.getNetworkIdFromSoundId(soundId);",
  "mp.game.app.appSetFloat(property, value);",
  "RAGE.Game.App.AppSetFloat(property, value);",
  "mp.game.app.appHasSyncedAppData(appName);",
  "RAGE.Game.App.AppHasSyncedData(appName);",
  "mp.game.audio.addPedToConversation(p0, p1, p2);",
  "mp.game.audio.findRadioStationIndex(station);",
  "mp.game.audio.addLineToConversation(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);",
  "mp.game.audio.createNewScriptedConversation()",
  "mp.game.audio.getIsPreloadedConversationReady()",
  "mp.game.audio.getCurrentScriptedConversationLine()",
  "mp.game.audio.activateSlowmoMode(p0)",
  "mp.game.audio.deactivateSlowmoMode(p0)",
  "mp.game.audio.getAmbientVoiceNameHash(ped)",
  "mp.game.audio.canPedSpeak(ped, speechName, unk)",
  "mp.game.audio.getAudibleMusicTrackTextId()",
  "mp.game.audio.doesPlayerVehHaveRadio()",
  "mp.game.audio.clearCustomRadioTrackList(radioStation)",
  "mp.game.audio.getNumUnlockedRadioStations()",
  "mp.game.audio.forceRadioTrackListPosition(radioStation, trackListName, timeOffsetMilliseconds)",
  "mp.game.audio.getCurrentRadioStationHash(radioStationName)",
  "mp.game.audio.cancelCurrentPoliceReport()",
  "mp.game.audio.blipSiren(vehicle)",
  "mp.game.audio.disablePedPain(ped, toggle)",
  "mp.game.audio.forceVehicleEngine(vehicle, audioName)",
  "mp.game.audio.enableVehicleFanbeltDamage(vehicle, enableFanbeltDamage)",
  "mp.game.audio.enableVehicleExhaustPops(vehicle, toggle)",
  "mp.game.audio.enableStallWarningSounds(vehicle, toggle)",
  "mp.game.audio.blockDeathJingle(toggle)",
  "mp.game.audio.addEntityToMixGroup(entity, groupName, p2)",
  "mp.game.audio.getMusicPlaytime()",
  "mp.game.audio.clearAllBrokenGlass()",
  "mp.game.audio.forcePedPanicWalla()",
  "mp.game.audio.freezeMicrophone()",
  "mp.game.audio.distantCopCarSirens(value)",
  "mp.game.audio.getMusicVolSlider()",
  "mp.game.audio.getCategoryVariable(categoryHash, fieldNameHash)",
  "mp.game.audio.copyCategoryVariables(cattegoryTo, categoryFrom)",
  "mp.game.audio.getVehicleDefaultHorn(veh);",
  "mp.game.audio.getNumberOfPassengerVoiceVariations(p0);",
  "mp.game.audio.isAmbientZoneEnabled(ambientZone);",
  "mp.game.audio.isAlarmPlaying(alarmName);",
  "mp.game.audio.getSoundIdFromNetworkId(netId);",
  "mp.game.audio.hintAmbientAudioBank(p0, p1);",
  "mp.game.audio.isAmbientSpeechPlaying(p0);",
  "mp.game.audio.interruptConversation(p0, p1, p2);",
  "mp.game.audio.getRadioStationName(radioStation);",
  "mp.game.audio.isAudioSceneActive(scene);",
  "mp.game.audio.getPlayerHeadsetSoundAlternate(p0, p1);",
  "mp.game.audio.isScriptedSpeechPlaying(p0);",
  "mp.game.audio.hintScriptAudioBank(bankName, bOverNetwork);",
  "mp.game.audio.hasSoundFinished(soundId);",
  "mp.game.audio.isScriptedConversationOngoing()",
  "mp.game.audio.isScriptedConversationLoaded()",
  "mp.game.audio.interruptConversationAndPause(ped, p1, p2)",
  "mp.game.audio.hintAmbientBank(p0, p1, p2)",
  "mp.game.audio.hintScriptBank(p0, p1, p2)",
  "mp.game.audio.getSoundId()",
  "mp.game.audio.isAnySpeechPlaying(ped)",
  "mp.game.audio.isPedInCurrentConversation(ped)",
  "mp.game.audio.isAnimalVocalizationPlaying(pedHandle)",
  "mp.game.audio.isMobilePhoneRadioActive()",
  "mp.game.audio.getPlayerRadioStationIndex()",
  "mp.game.audio.getPlayerRadioStationName()",
  "mp.game.audio.getPlayerRadioStationGenre()",
  "mp.game.audio.isRadioRetuning()",
  "mp.game.audio.isRadioFadedOut()",
  "mp.game.audio.isVehicleRadioEnabled(vehicle)",
  "mp.game.audio.isMissionNewsStoryUnlocked(newsStory)",
  "mp.game.audio.isPlayerVehRadioEnable()",
  "mp.game.audio.isHornActive(vehicle)",
  "mp.game.audio.isStreamPlaying()",
  "mp.game.audio.getStreamPlayTime()",
  "mp.game.audio.isAmbientSpeechDisabled(ped)",
  "mp.game.audio.isVehicleAudiblyDamaged(vehicle)",
  "mp.game.audio.isGameInControlOfMusic()",
  "mp.game.audio.isSceneActive(scene)",
  "mp.game.audio.isScriptedMusicPlaying()",
  "mp.game.audio.isScriptedMusicPlaying2()",
  "mp.game.audio.isMusicOneshotPlaying()",
  "mp.game.audio.getVehicleDefaultHornIgnoreMods(vehicle)",
  "mp.game.audio.hasMultiplayerDataLoaded()",
  "mp.game.audio.hasMultiplayerDataUnloaded()",
  "mp.game.audio.getVehicleDefaultHornVariation(vehicle)",
  "mp.game.audio.loadStream(streamName, soundSet);",
  "mp.game.audio.prepareMusicEvent(eventName);",
  "mp.game.audio.playAmbientSpeechWithVoice(p0, speechName, voiceName, speechParam, p4);",
  "mp.game.audio.overrideTrevorRage(p0);",
  "mp.game.audio.preloadScriptPhoneConversation(p0, p1);",
  "mp.game.audio.prepareSynchronizedAudioEventForScene(p0, p1);",
  "mp.game.audio.pauseScriptedConversation(p0);",
  "mp.game.audio.playSoundFromCoord(soundId, audioName, x, y, z, audioRef, p6, p7, p8);",
  "mp.game.audio.prepareAlarm(alarmName);",
  "mp.game.audio.playSoundFrontend(ID, SoundName, SoundSetName, instant);",
  "mp.game.audio.playSoundFrontend(-1, \"Beep_Green\", \"DLC_HEIST_HACKING_SNAKE_SOUNDS\", true);",
  "mp.game.audio.playSynchronizedAudioEvent(p0);",
  "mp.game.audio.preloadScriptConversation(p0, p1, p2, p3);",
  "mp.game.audio.playSound(soundId, audioName, audioRef, p3, p4, p5);",
  "mp.game.audio.playSound(-1, \"NAV_UP_DOWN\", \"HUD_FRONTEND_DEFAULT_SOUNDSET\", true, 0, true);",
  "mp.game.audio.prepareSynchronizedAudioEvent(p0, p1);",
  "mp.game.audio.playSoundFromEntity(soundId, audioName, entity, audioRef, p4, p5);",
  "mp.game.audio.playStreamFromObject(object);",
  "mp.game.audio.playPoliceReport(name, p1);",
  "mp.game.audio.loadStreamWithStartOffset(streamName, startOffset, soundSet);",
  "mp.game.audio.playPain(painID, p1, p2);",
  "mp.game.audio.overrideUnderwaterStream(p0, p1);",
  "mp.game.audio.playAmbientSpeechAtCoords(speechName, voiceName, x, y, z, speechParam);",
  "mp.game.audio.playEndCreditsMusic(play);",
  "mp.game.audio.playDeferredSoundFrontend(soundName, soundsetName)",
  "mp.game.audio.playPedAmbientSpeechNative(ped, speechName, speechParam, p3)",
  "mp.game.audio.playPedAmbientSpeechAndCloneNative(ped, speechName, speechParam, p3)",
  "mp.game.audio.playPedAmbientSpeechWithVoiceNative(ped, speechName, voiceName, speechParam, p4)",
  "mp.game.audio.playAmbientSpeechFromPositionNative(speechName, voiceName, x, y, z, speechParam)",
  "mp.game.audio.playAnimalVocalization(pedHandle, p1, speechName)",
  "mp.game.audio.linkStaticEmitterToEntity(emitterName, entity)",
  "mp.game.audio.isVehicleRadioLoud(vehicle)",
  "mp.game.audio.unlockRadioStationTrackList(radioStation, trackListName)",
  "mp.game.audio.lockRadioStation(radioStationName, toggle)",
  "mp.game.audio.overrideVehHorn(vehicle, override, hornHash)",
  "mp.game.audio.playStreamFromPed(ped)",
  "mp.game.audio.playStreamFromVehicle(vehicle)",
  "mp.game.audio.playStreamFrontend()",
  "mp.game.audio.playStreamFromPosition(x, y, z)",
  "mp.game.audio.preloadVehicle(vehicleModel)",
  "mp.game.audio.playVehicleDoorOpenSound(vehicle, doorIndex)",
  "mp.game.audio.playVehicleDoorCloseSound(vehicle, doorIndex)",
  "mp.game.audio.overridePlayerGroundMaterial(hash, toggle)",
  "mp.game.audio.overrideMicrophoneSettings(hash, toggle)",
  "mp.game.audio.prepareSynchronizedEvent(p0, p1)",
  "mp.game.audio.prepareSynchronizedEventForScene(p0)",
  "mp.game.audio.playSynchronizedEvent(p0)",
  "mp.game.audio.playSoundHash(soundId, audioNameHash, audioRef, p3, p4, p5)",
  "mp.game.audio.setMobileRadioEnabledDuringGameplay(Toggle);",
  "mp.game.audio.requestScriptAudioBank(p0, p1);",
  "mp.game.audio.setGpsActive(active);",
  "mp.game.audio.releaseNamedScriptAudioBank(audioBank);",
  "mp.game.audio.setInitialPlayerStation(radioStation);",
  "mp.game.audio.setAggressiveHorns(toggle);",
  "mp.game.audio.setAmbientZoneStatePersistent(ambientZone, p1, p2);",
  "mp.game.audio.releaseSoundId(soundId);",
  "mp.game.audio.setMicrophonePosition(p0, x1, y1, z1, x2, y2, z2, x3, y3, z3)",
  "mp.game.audio.setAudioFlag(flagName, toggle);",
  "mp.game.audio.setMobilePhoneRadioState(state);",
  "mp.game.audio.requestAmbientAudioBank(p0, p1);",
  "mp.game.audio.setAudioSceneVariable(p0, p1, p2);",
  "mp.game.audio.setAmbientZoneListState(p0, p1, p2);",
  "mp.game.audio.setFrontendRadioActive(active);",
  "mp.game.audio.requestMissionAudioBank(p0, p1);",
  "mp.game.audio.registerScriptWithAudio(p0);",
  "mp.game.audio.setAnimalMood(p0, p1);",
  "mp.game.audio.setEmitterRadioStation(emitterName, radioStation);",
  "mp.game.audio.setCutsceneAudioOverride(p0);",
  "mp.game.audio.resetPedAudioFlags(p0);",
  "mp.game.audio.setAmbientZoneState(p0, p1, p2);",
  "mp.game.audio.setAmbientZoneListStatePersistent(ambientZone, p1, p2);",
  "mp.game.audio.restartScriptedConversation()",
  "mp.game.audio.registerScriptWith(p0)",
  "mp.game.audio.requestMissionBank(p0, p1, p2)",
  "mp.game.audio.requestAmbientBank(p0, p1, p2)",
  "mp.game.audio.requestScriptBank(p0, p1, p2)",
  "mp.game.audio.releaseMissionBank()",
  "mp.game.audio.releaseAmbientBank()",
  "mp.game.audio.releaseNamedScriptBank(audioBank)",
  "mp.game.audio.releaseScriptBank()",
  "mp.game.audio.resetTrevorRage()",
  "mp.game.audio.releaseWeapon()",
  "mp.game.audio.setAmbientVoiceName(ped, name)",
  "mp.game.audio.setAmbientVoiceNameHash(ped, hash)",
  "mp.game.audio.setCustomRadioTrackList(radioStation, trackListName, p2)",
  "mp.game.audio.setCutsceneOverride(name)",
  "mp.game.audio.setHornPermanentlyOn(vehicle)",
  "mp.game.audio.setHornEnabled(vehicle, toggle)",
  "mp.game.audio.setHornPermanentlyOnTime(vehicle, time)",
  "mp.game.audio.resetVehicleStartupRevSound(vehicle)",
  "mp.game.audio.removeEntityFromMixGroup(entity, p1)",
  "mp.game.audio.recordBrokenGlass(x, y, z, radius)",
  "mp.game.audio.resetPedFlags(ped)",
  "mp.game.audio.setFlag(flagName, toggle)",
  "mp.game.audio.removePortalSettingsOverride(p0)",
  "mp.game.audio.requestTennisBanks(ped)",
  "mp.game.audio.restoreCategoryVariables(categoryHash)",
  "mp.game.audio.setCategoryVariable(categoryHash, fieldNameHash, value)",
  "mp.game.audio.startAlarm(alarmName, p2);",
  "mp.game.audio.startScriptConversation(p0, p1, p2, p3);",
  "mp.game.audio.setVariableOnStream(p0, p1);",
  "mp.game.audio.startAudioScene(sceneName);",
  "mp.game.audio.startScriptPhoneConversation(p0, p1);",
  "mp.game.audio.setSynchronizedAudioEventPositionThisFrame(p0, p1);",
  "mp.game.audio.stopAlarm(alarmName, toggle);",
  "mp.game.audio.setVariableOnSound(soundId, p1, p2);",
  "mp.game.audio.setUserRadioControlEnabled(p0);",
  "mp.game.audio.setStaticEmitterEnabled(emitterName, toggle);",
  "mp.game.audio.setRadioToStationIndex(radioStation);",
  "mp.game.audio.setRadioAutoUnfreeze(p0);",
  "mp.game.audio.setRadioTrack(radioStation, radioTrack);",
  "mp.game.audio.setPlayerAngry(playerPed, disabled);",
  "mp.game.audio.specialFrontendEqual(x, y, z);",
  "mp.game.audio.startPreloadedConversation()",
  "mp.game.audio.skipToNextScriptedConversationLine()",
  "mp.game.audio.setVariableOnUnderWaterStream(variableName, value)",
  "mp.game.audio.setPedScream(ped)",
  "mp.game.audio.setPedVoiceGroup(ped, voiceGroupHash)",
  "mp.game.audio.setPedGender(ped, p1)",
  "mp.game.audio.setPedIsDrunk(ped, toggle)",
  "mp.game.audio.setVehRadioStation(vehicle, radioStation)",
  "mp.game.audio.setVehHasRadioOverride(vehicle)",
  "mp.game.audio.skipRadioForward()",
  "mp.game.audio.setRadioTrackMix(radioStationName, mixName, p2)",
  "mp.game.audio.setVehicleRadioLoud(vehicle, toggle)",
  "mp.game.audio.setVehicleRadioEnabled(vehicle, toggle)",
  "mp.game.audio.setRadioStationMusicOnly(radioStation, toggle)",
  "mp.game.audio.setRadioFrontendFadeTime(fadeTime)",
  "mp.game.audio.setRadioStationIsVisible(radioStation, toggle)",
  "mp.game.audio.setVariableOnCutscene(variableName, value)",
  "mp.game.audio.setSirenWithNoDriver(vehicle, toggle)",
  "mp.game.audio.setSirenKeepOn(vehicle, toggle)",
  "mp.game.audio.setVehiclePriority(vehicle, p1)",
  "mp.game.audio.setVehicleStartupRevSound(vehicle, soundName, setName)",
  "mp.game.audio.setVehicleEngineDamageFactor(vehicle, damageFactor)",
  "mp.game.audio.setVehicleBodyDamageFactor(vehicle, p1)",
  "mp.game.audio.setVehicleBoostActive(vehicle, toggle)",
  "mp.game.audio.setScriptUpdateDoor(doorHash, toggle)",
  "mp.game.audio.startScene(scene)",
  "mp.game.audio.setSceneVariable(scene, variable, value)",
  "mp.game.audio.setScriptCleanupTime(time)",
  "mp.game.audio.setPedFootstepLoud(ped, toggle)",
  "mp.game.audio.setPedFootstepQuiet(ped, toggle)",
  "mp.game.audio.setSynchronizedEventPositionThisFrame(p0, p1)",
  "mp.game.audio.setSpecialEffectMode(mode)",
  "mp.game.audio.setPortalSettingsOverride(p0, p1)",
  "mp.game.audio.setVehicleHornVariation(vehicle, value)",
  "mp.game.audio.triggerMusicEvent(eventName);",
  "mp.game.audio.unlockMissionNewsStory(newsStory);",
  "mp.game.audio.stopAllAlarms(stop);",
  "mp.game.audio.stopSound(soundId);",
  "mp.game.audio.stopCurrentPlayingAmbientSpeech(p0);",
  "mp.game.audio.stopAudioScene(scene);",
  "mp.game.audio.stopScriptedConversation(p0);",
  "mp.game.audio.stopSynchronizedAudioEvent(p0);",
  "mp.game.audio.unfreezeRadioStation(radioStation);",
  "blip.getNextInfoId();",
  "blip.getSprite();",
  "blip.isMissionCreator();",
  "blip.getInfoIdEntityIndex();",
  "blip.hideNumberOn();",
  "blip.getHudColour();",
  "blip.getInfoIdPickupIndex();",
  "blip.isFlashing();",
  "blip.getInfoIdType();",
  "RAGE.Game.Audio.SetStaticEmitterEnabled(emitterName, toggle);",
  "blip.destroy()",
  "mp.game.audio.unregisterScriptWith()",
  "mp.game.audio.stopCurrentPlayingSpeech(ped)",
  "mp.game.audio.updateLsur(enableMixes)",
  "mp.game.audio.stopStream()",
  "mp.game.audio.stopPedSpeaking(ped, shaking)",
  "mp.game.audio.triggerSiren(vehicle)",
  "mp.game.audio.useSirenAsHorn(vehicle, toggle)",
  "mp.game.audio.stopScene(scene)",
  "mp.game.audio.stopScenes()",
  "mp.game.audio.stopSynchronizedEvent(p0)",
  "mp.game.audio.unrequestTennisBanks()",
  "mp.game.audio.stopCutscene()",
  "mp.game.brain.isObjectWithinBrainActivationRange(object);",
  "mp.game.brain.enableScriptBrainSet(brainSet);",
  "mp.game.brain.registerObjectScriptBrain(scriptName, p1, p2, p3, p4, p5);",
  "mp.game.brain.disableScriptBrainSet(brainSet);",
  "mp.game.brain.registerWorldPointScriptBrain(p0, p1, p2);",
  "mp.game.brain.addScriptToRandomPed(name, model, p2, p3);",
  "blip.setColour(color);",
  "blip.setNameToPlayerName(player);",
  "blip.setShowCone(toggle);",
  "blip.setSecondaryColour(r, g, b);",
  "blip.setCategory(index);",
  "blip.setAsMissionCreator(toggle);",
  "blip.setFade(opacity, duration);",
  "blip.setFlashesAlternate(toggle);",
  "blip.setAlpha(alpha);",
  "blip.setRoute(enabled);",
  "blip.setShowHeadingIndicator(toggle);",
  "blip.setAsFriendly(toggle);",
  "blip.pulse();",
  "blip.setRouteColour(colour);",
  "blip.setDisplay(displayID);",
  "blip.showNumberOn(number);",
  "blip.setFlashInterval(p1);",
  "blip.setCoords(pos);",
  "blip.setPriority(priority);",
  "blip.setFlashes(toggle);",
  "blip.setBright(toggle);",
  "blip.setAsShortRange(toggle);",
  "blip.setScale(scale);",
  "blip.setFlashTimer(duration);",
  "blip.isShortRange();",
  "blip.setSprite(spriteId);",
  "blip.setHighDetail(toggle);",
  "blip.isOnMinimap();",
  "blip.setNameFromTextFile(gxtEntry);",
  "blip.setRotation(rotation);",
  "mp.game.cam.clampGameplayCamYaw(minimum, maximum);",
  "mp.game.cam.createCamWithParams(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);",
  "mp.game.cam.createCinematicShot(p0, p1, p2, entity);",
  "mp.game.cam.createCamera(camHash, p1);",
  "mp.game.cam.animateGameplayCamZoom(p0, distance);",
  "mp.game.cam.clampGameplayCamPitch(minimum, maximum);",
  "mp.game.cam.createCam(camName, p1);",
  "mp.game.cam.addCamSplineNode(camera, x, y, z, xRot, yRot, zRot, length, p8, p9);",
  "mp.game.cam.destroyAllCams(destroy);",
  "mp.game.cam.destroyAllCams(false);",
  "mp.game.cam.createCameraWithParams(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);",
  "browser.destroy();",
  "browser.reload(ignoreCache);",
  "mp.events.add('browserCreated', (browser) => {});",

  "mp.events.add('browserDomReady', (browser) => {});",
  "mp.events.add('browserLoadingFailed', (browser) => {});",
  "browser.markAsChat();",
  "mp.browsers.newHeadless(url, width, height, forceFlip);",
  "headlessBrowser.headlessTextureDict();",
  "headlessBrowser.headlessTextureName();",
  "headlessBrowser.headlessTextureHeightScale();",
  "browser.inputEnabled();",
  "browser.call(eventName, ...args);",
  "mp.game.cam.create(camName, p1)",
  "mp.game.cam.createWithParams(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9)",
  "mp.game.cam.createEra(camHash, p1)",
  "mp.game.cam.createEraWithParams(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9)",
  "mp.game.cam.destroy(cam, bScriptHostCam)",
  "mp.game.cam.attachToEntity(cam, entity, xOffset, yOffset, zOffset, isRelative)",
  "mp.game.cam.attachToPedBone(cam, ped, boneIndex, x, y, z, heading)",
  "mp.game.cam.attachToPedBone2(cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9)",
  "mp.game.cam.attachToVehicleBone(cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection)",
  "mp.game.cam.addSplineNode(camera, x, y, z, xRot, yRot, zRot, length, p8, p9)",
  "mp.game.cam.addSplineNodeUsingCameraFrame(cam, cam2, p2, p3)",
  "mp.game.cam.addSplineNodeUsingCamera(cam, cam2, p2, p3)",
  "mp.game.cam.addSplineNodeUsingGameplayFrame(cam, p1, p2)",
  "mp.game.cam.animatedShake(cam, p1, p2, p3, amplitude)",
  "mp.game.cam.animatedShakeScriptGlobal(p0, p1, p2, p3)",
  "mp.game.cam.clampGameplayYaw(minimum, maximum)",
  "mp.game.cam.clampGameplayPitch(minimum, maximum)",
  "mp.game.cam.animateGameplayZoom(p0, distance)",
  "mp.game.cam.getGameplayCamRot(p0);",
  "mp.game.cam.getCamSplineNodeIndex(cam);",
  "mp.game.cam.doScreenFadeOut(duration);",
  "mp.game.cam.getCamSplineNodePhase(p0);",
  "mp.game.cam.getIsMultiplayerBrief(p0);",
  "mp.game.cam.doScreenFadeIn(duration);",
  "var heading = mp.game.getGameplayCamRelativeHeading();",
  "mp.game.cam.destroyAllS(bScriptHostCam)",
  "mp.game.cam.doesExist(cam)",
  "mp.game.cam.getRendering()",
  "mp.game.cam.getCoord(cam)",
  "mp.game.cam.getRot(cam, rotationOrder)",
  "mp.game.cam.getFov(cam)",
  "mp.game.cam.getNearClip(cam)",
  "mp.game.cam.getFarClip(cam)",
  "mp.game.cam.getFarDof(cam)",
  "mp.game.cam.detach(cam)",
  "mp.game.cam.getSplinePhase(cam)",
  "mp.game.cam.getSplineNodePhase(cam)",
  "mp.game.cam.getSplineNodeIndex(cam)",
  "mp.game.cam.getAnimCurrentPhase(cam)",
  "mp.game.cam.getGameplayCoord()",
  "mp.game.cam.getGameplayRot(rotationOrder)",
  "mp.game.cam.getGameplayFov()",
  "mp.game.cam.getGameplayRelativeHeading()",
  "mp.game.cam.getGameplayRelativePitch()",
  "mp.game.cam.enableCrosshairThisFrame()",
  "mp.game.cam.disableCollisionForEntity(entity)",
  "mp.game.cam.disableCollisionForObject(entity)",
  "mp.game.cam.disableFirstPersonThisFrame()",
  "mp.game.cam.getFollowPedZoomLevel()",
  "mp.game.cam.getFollowPedViewMode()",
  "mp.game.cam.getFollowVehicleZoomLevel()",
  "mp.game.cam.getFollowVehicleViewMode()",
  "mp.game.cam.disableAimThisUpdate()",
  "mp.game.cam.getFirstPersonAimZoomFactor()",
  "mp.game.cam.getFinalRenderedCoord()",
  "mp.game.cam.getFinalRenderedRot(rotationOrder)",
  "mp.game.cam.getFinalRenderedInWhenFriendlyRot(player, rotationOrder)",
  "mp.game.cam.getFinalRenderedFov()",
  "mp.game.cam.getFinalRenderedInWhenFriendlyFov(player)",
  "mp.game.cam.getFinalRenderedNearClip()",
  "mp.game.cam.getFinalRenderedFarClip()",
  "mp.game.cam.getFinalRenderedNearDof()",
  "mp.game.cam.getFinalRenderedFarDof()",
  "mp.game.cam.getFinalRenderedMotionBlurStrength()",
  "mp.game.cam.disableVehicleFirstPersonThisFrame()",
  "mp.game.cam.invalidateIdle()",
  "mp.game.cam.forceCinematicRenderingThisUpdate(p0)",
  "mp.game.cam.getFocusPedOnScreen(p0, p1, p2, p3, p4, p5, p6, p7, p8)",
  "mp.game.cam.setCamSplineDuration(cam, timeDuration);",
  "mp.game.cam.renderScriptCams(render, ease, easeTime, p3, p4);",
  "mp.game.cam.setCamSplinePhase(cam, p1);",
  "mp.game.cam.playSynchronizedCamAnim(p0, p1, animName, animDictionary);",
  "mp.game.cam.isCamSplinePaused(p0);",
  "mp.game.cam.setCamEffect(p0);",
  "mp.game.cam.isCinematicShotActive(p0);",
  "mp.game.cam.overrideCamSplineVelocity(cam, p1, p2, p3);",
  "mp.game.cam.overrideCamSplineMotionBlur(p0, p1, p2, p3);",
  "mp.game.cam.isSphereVisible(x, y, z, radius);",
  "mp.game.cam.renderScriptS(render, ease, easeTime, p3, p4, p5)",
  "mp.game.cam.setActive(cam, active)",
  "mp.game.cam.isActive(cam)",
  "mp.game.cam.isRendering(cam)",
  "mp.game.cam.pointAtCoord(cam, x, y, z)",
  "mp.game.cam.pointAtEntity(cam, entity, p2, p3, p4, p5)",
  "mp.game.cam.pointAtPedBone(cam, ped, boneIndex, x, y, z, p6)",
  "mp.game.cam.setAffectsAiming(cam, toggle)",
  "mp.game.cam.overrideSplineVelocity(cam, p1, p2, p3)",
  "mp.game.cam.overrideSplineMotionBlur(cam, p1, p2, p3)",
  "mp.game.cam.isSplinePaused(p0)",
  "mp.game.cam.setActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation)",
  "mp.game.cam.isInterpolating(cam)",
  "mp.game.cam.isShaking(cam)",
  "mp.game.cam.isScriptGlobalShaking()",
  "mp.game.cam.playAnim(cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10)",
  "mp.game.cam.isPlayingAnim(cam, animName, animDictionary)",
  "mp.game.cam.setAnimCurrentPhase(cam, phase)",
  "mp.game.cam.playSynchronizedAnim(p0, p1, animName, animDictionary)",
  "mp.game.cam.isScreenFadedOut()",
  "mp.game.cam.isScreenFadedIn()",
  "mp.game.cam.isScreenFadingOut()",
  "mp.game.cam.isScreenFadingIn()",
  "mp.game.cam.isGameplayShaking()",
  "mp.game.cam.isGameplayRendering()",
  "mp.game.cam.isGameplayLookingBehind()",
  "mp.game.cam.isFollowPedActive()",
  "mp.game.cam.isFollowVehicleActive()",
  "mp.game.cam.isAimActive()",
  "mp.game.cam.isAimThirdPersonActive()",
  "mp.game.cam.isFirstPersonAimActive()",
  "mp.game.cam.isGameplayHintActive()",
  "mp.game.cam.isCinematicRendering()",
  "mp.game.cam.isCinematicShaking()",
  "mp.game.cam.invalidateVehicleIdle()",
  "mp.game.cam.isCinematicIdleRendering()",
  "mp.game.cam.isInVehicleDisabled()",
  "mp.game.cam.isCinematicActive()",
  "mp.game.cam.replayFreeGetMaxRange()",
  "mp.game.cam.setGameplayHintFov(FOV);",
  "mp.game.cam.setFollowPedCamCutsceneChat(p0, p1);",
  "mp.game.cam.setGameplayCamRelativeHeading(heading);",
  "mp.game.cam.setGameplayCamRawPitch(pitch);",
  "mp.game.cam.setCinematicButtonActive(p0);",
  "mp.game.cam.setGameplayCoordHint(x, y, z, duration, blendOutDuration, blendInDuration, unk);",
  "mp.game.cam.setGameplayCoordHint(0.0, 0.0, 0.0, 3, 0, 0, 0);",
  "mp.game.cam.setGameplayCamRawYaw(yaw);",
  "mp.game.cam.setGameplayEntityHint(p0, p1, p2, p3, p4, p5, p6, p7, p8);",
  "mp.game.cam.setGameplayCamRelativePitch(x, Value2);",
  "mp.game.cam.setGameplayPedHint(p0, x1, y1, z1, p4, p5, p6, p7);",
  "mp.game.cam.setFollowPedCamViewMode(viewMode);",
  "mp.game.cam.setGameplayCamShakeAmplitude(amplitude);",
  "mp.game.cam.setCinematicModeActive(p0);",
  "mp.game.cam.setFollowVehicleCamZoomLevel(zoomLevel);",
  "mp.game.cam.setGameplayObjectHint(p0, p1, p2, p3, p4, p5, p6, p7);",
  "mp.game.cam.setCinematicCamShakeAmplitude(p0);",
  "mp.game.cam.setFollowVehicleCamViewMode(viewMode);",
  "mp.game.cam.setCoord(cam, posX, posY, posZ)",
  "mp.game.cam.setFov(cam, fieldOfView)",
  "mp.game.cam.setFarClip(cam, farClip)",
  "mp.game.cam.setFarDof(cam, farDOF)",
  "mp.game.cam.setDofStrength(cam, dofStrength)",
  "mp.game.cam.setDofPlanes(cam, p1, p2, p3, p4)",
  "mp.game.cam.setDofFnumberOfLens(camera, p1)",
  "mp.game.cam.setDofFocalLengthMultiplier(camera, multiplier)",
  "mp.game.cam.setDofFocusDistanceBias(camera, p1)",
  "mp.game.cam.setDofMaxNearInFocusDistance(camera, p1)",
  "mp.game.cam.setDofMaxNearInFocusDistanceBlendLevel(camera, p1)",
  "mp.game.cam.setDebugName(camera, name)",
  "mp.game.cam.setFlyHorizontalResponse(cam, p1, p2, p3)",
  "mp.game.cam.setFlyVerticalSpeedMultiplier(cam, p1, p2, p3)",
  "mp.game.cam.setFlyMaxHeight(cam, height)",
  "mp.game.cam.setFlyCoordAndConstrain(cam, x, y, z)",
  "mp.game.cam.setGameplayFollowPedThisUpdate(ped)",
  "mp.game.cam.setFollowPedThisUpdate(camName, p1)",
  "mp.game.cam.setFollowPedViewMode(viewMode)",
  "mp.game.cam.setFollowVehicleZoomLevel(zoomLevel)",
  "mp.game.cam.setFollowVehicleViewMode(viewMode)",
  "mp.game.cam.setGameplayHash(camName)",
  "mp.game.cam.setFollowTurretSeat(seatIndex)",
  "mp.game.cam.setFirstPersonAimZoomFactor(zoomFactor)",
  "mp.game.cam.setFirstPersonPitchRange(p0, p1)",
  "mp.game.cam.setFirstPersonAimNearClipThisUpdate(p0)",
  "mp.game.cam.setGameplayHintFollowDistanceScalar(value)",
  "mp.game.cam.setGameplayHintBaseOrbitPitchOffset(value)",
  "mp.game.cam.setGameplayHintAnimOffsetx(xOffset)",
  "mp.game.cam.setGameplayHintAnimOffsety(yOffset)",
  "mp.game.cam.setGameplayHintAnimCloseup(toggle)",
  "mp.game.cam.setCinematicShakeAmplitude(p0)",
  "mp.game.cam.setEffect(p0)",
  "mp.game.cam.stopCinematicCamShaking(p0);",
  "mp.game.cam.stopCinematicShot(p0);",
  "mp.game.cam.shakeCinematicCam(p0, p1);",
  "mp.game.cam.setTimeIdleDrop(p0, p1);",
  "mp.game.cam.stopGameplayCamShaking(p0);",
  "mp.game.cam.shakeGameplayCam(shakeName, intensity);",
  "mp.game.cam.setWidescreenBorders(p0, p1);",
  "mp.game.cam.setGameplayVehicleHint(p0, p1, p2, p3, p4, p5, p6, p7);",
  "mp.game.cam.stopGameplayHint(force);",
  "mp.game.cam.stopRenderingScriptCamsUsingCatchUp(render, p1, p2, p3)",
  "mp.game.cam.setParams(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11)",
  "mp.game.cam.setRot(cam, rotX, rotY, rotZ, rotationOrder)",
  "mp.game.cam.setNearClip(cam, nearClip)",
  "mp.game.cam.setMotionBlurStrength(cam, strength)",
  "mp.game.cam.setNearDof(cam, nearDOF)",
  "mp.game.cam.setUseShallowDofMode(cam, toggle)",
  "mp.game.cam.setUseHiDof()",
  "mp.game.cam.setInheritRollVehicle(cam, p1)",
  "mp.game.cam.stopPointing(cam)",
  "mp.game.cam.setSplinePhase(cam, p1)",
  "mp.game.cam.setSplineDuration(cam, timeDuration)",
  "mp.game.cam.setSplineSmoothingStyle(cam, smoothingStyle)",
  "mp.game.cam.setSplineNodeEase(cam, p1, p2, p3)",
  "mp.game.cam.setSplineNodeVelocityScale(cam, p1, scale)",
  "mp.game.cam.setSplineNodeExtraFlags(cam, p1, flags)",
  "mp.game.cam.shake(cam, type, amplitude)",
  "mp.game.cam.setShakeAmplitude(cam, amplitude)",
  "mp.game.cam.stopShaking(cam, p1)",
  "mp.game.cam.shakeScriptGlobal(p0, p1)",
  "mp.game.cam.stopScriptGlobalShaking(p0)",
  "mp.game.cam.setGameplayRelativeHeading(heading)",
  "mp.game.cam.setGameplayRelativePitch(angle, scalingFactor)",
  "mp.game.cam.setGameplayRelativeRotation(roll, pitch, yaw)",
  "mp.game.cam.setGameplayRawYaw(yaw)",
  "mp.game.cam.setGameplayRawPitch(pitch)",
  "mp.game.cam.shakeGameplay(shakeName, intensity)",
  "mp.game.cam.setGameplayShakeAmplitude(amplitude)",
  "mp.game.cam.stopGameplayShaking(p0)",
  "mp.game.cam.setInVehicleStateThisUpdate(p0, p1)",
  "mp.game.cam.useStuntEraThisFrame()",
  "mp.game.cam.setThirdPersonAimNearClipThisUpdate(p0)",
  "mp.game.cam.shakeCinematic(p0, p1)",
  "mp.game.cam.stopCinematicShaking(p0)",
  "mp.game.cam.stopCutsceneShaking()",
  "mp.game.cam.setGameplayVehicleCamera(vehicleName)",
  "mp.game.cam.setGameplayVehicleCameraName(vehicleModel)",
  "camera.isRendering();",
  "camera.isInterpolating();",
  "camera.setUseShallowDofMode(toggle);",
  "camera.setDebugName(name);",
  "camera.getFarDof();",
  "camera.setDofMaxNearInFocusDistanceBlendLevel(p1);",
  "camera.setDofPlanes(p1, p2, p3, p4);",
  "camera.setNearDof(nearDOF);",
  "camera.setAnimCurrentPhase(phase);",
  "camera.setInheritRollVehicle(p1);",
  "camera.setCoord(posX, posY, posZ);",
  "camera.pointAt(entity, x, y, z, p5);",
  "camera.setDofStrength(dofStrength);",
  "camera.shake(type, amplitude);",
  "camera.isShaking();",
  "camera.setMotionBlurStrength(strength);",
  "camera.getRot(rotationOrder);",
  "camera.setDofFnumberOfLens(p1);",
  "camera.setRot(rotX, rotY, rotZ, p4);",
  "camera.setAffectsAiming(toggle);",
  "camera.playAnim(animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10);",
  "camera.setActiveWithInterp(camFrom, duration, easeLocation, easeRotation);",
  "camera.getAnimCurrentPhase();",
  "camera.detach();",
  "camera.doesExist();",
  "camera.setFarClip(farClip);",
  "camera.setFov(fieldOfView);",
  "camera.getSplinePhase();",
  "camera.getFarClip();",
  "camera.getCoord();",
  "camera.stopShaking(stopImmediately);",
  "camera.getFov();",
  "camera.setDofMaxNearInFocusDistance(p1);",
  "camera.getNearClip();",
  "camera.setDofFocusDistanceBias(p1);",
  "camera.setNearClip(nearClip);",
  "camera.isPlayingAnim(animName, animDictionary);",
  "camera.setShakeAmplitude(amplitude);",
  "camera.isActive();",
  "camera.setFarDof(farDOF);",
  "camera.stopPointing();",
  "camera.pointAtCoord(x, y, z);",
  "camera.getDirection();",
  "mp.colshapes.newSphere(x, y, z, range, dimension)",
  "mp.colshapes.newRectangle(x, y, width, height, dimension)",
  "mp.colshapes.newCuboid(x, y, z, width, depth, height, dimension)",
  "mp.colshapes.newTube(x, y, z, height, range)",
  "checkpoint.setColour(r, g, b, a);",
  "mp.voiceChat.cleanupAndReload(true, true, true);",
  "mp.console.clear()",
  "mp.game.controls.getControlActionName(inputGroup, control, p2);",
  "mp.game.controls.isDisabledControlJustReleased(inputGroup, control);",
  "mp.game.controls.isControlEnabled(inputGroup, control);",
  "mp.game.controls.stopPadShake(p0);",
  "mp.game.controls.getControlNormal(inputGroup, control);",
  "mp.game.controls.getDisabledControlNormal(inputGroup, control);",
  "mp.game.controls.isDisabledControlJustPressed(inputGroup, control);",
  "mp.game.controls.setPadShake(p0, duration, frequency);",
  "mp.game.controls.setInputExclusive(inputGroup, control);",
  "mp.game.cutscene.canSetEnterStateForRegisteredEntity(cutsceneEntName, modelHash);",
  "mp.game.controls.isControlReleased(inputGroup, control);",
  "mp.game.controls.isInputJustDisabled(inputGroup);",
  "mp.game.controls.isInputDisabled(inputGroup);",
  "mp.game.controls.getControlValue(inputGroup, control);",
  "mp.game.controls.isDisabledControlPressed(inputGroup, control);",
  "mp.game.controls.isControlJustReleased(inputGroup, control);",
  "mp.game.controls.isControlJustPressed(inputGroup, control);",
  "mp.game.controls.isControlPressed(inputGroup, control);",
  "mp.game.controls.setControlNormal(inputGroup, control, amount);",
  "mp.game.controls.setPlayerpadShakesWhenControllerDisabled(toggle);",
  "mp.game.datafile.arrayValueGetSize(arrayData);",
  "mp.game.datafile.objectValueAddVector3(objectData, key, valueX, valueY, valueZ);",
  "mp.game.datafile.arrayValueGetString(arrayData, arrayIndex);",
  "mp.game.datafile.arrayValueAddVector3(arrayData, valueX, valueY, valueZ);",
  "mp.game.datafile.objectValueAddArray(objectData, key);",
  "mp.game.datafile.arrayValueGetVector3(arrayData, arrayIndex);",
  "mp.game.cutscene.setCutscenePedPropVariation(cutsceneEntName, p1, p2, p3, modelHash);",
  "mp.game.cutscene.getEntityIndexOfCutsceneEntity(cutsceneEntName, modelHash);",
  "mp.game.cutscene.setCutsceneFadeValues(p0, p1, p2, p3);",
  "mp.game.datafile.objectValueGetFloat(objectData, key);",
  "mp.game.datafile.arrayValueAddString(arrayData, value);",
  "mp.game.cutscene.canSetExitStateForCamera(p0);",
  "mp.game.datafile.arrayValueGetFloat(arrayData, arrayIndex);",
  "mp.game.decisionevent.addShockingEventForEntity(type, entity, duration);",
  "mp.game.datafile.arrayValueGetObject(arrayData, arrayIndex);",
  "mp.game.cutscene.requestCutscene(cutsceneName, p1);",
  "mp.game.datafile.arrayValueGetType(arrayData, arrayIndex);",
  "mp.game.decisionevent.blockDecisionMakerEvent(name, type);",
  "mp.game.datafile.arrayValueAddFloat(arrayData, value);",
  "mp.game.datafile.arrayValueAddBoolean(arrayData, value);",
  "mp.game.cutscene.canSetExitStateForRegisteredEntity(cutsceneEntName, modelHash);",
  "mp.game.cutscene.startCutsceneAtCoords(x, y, z, p3);",
  "mp.game.datafile.objectValueGetInteger(objectData, key);",
  "mp.game.cutscene.setCutsceneOrigin(p0, p1, p2, p3, p4);",
  "mp.game.datafile.objectValueGetArray(objectData, key);",
  "mp.game.datafile.objectValueAddString(objectData, key, value);",
  "mp.game.cutscene.doesCutsceneEntityExist(cutsceneEntName, modelHash);",
  "mp.game.cutscene.setCutscenePedComponentVariation(cutsceneEntName, p1, p2, p3, modelHash);",
  "mp.game.datafile.arrayValueAddInteger(arrayData, value);",
  "mp.game.datafile.arrayValueGetInteger(arrayData, arrayIndex);",
  "mp.game.cutscene.hasThisCutsceneLoaded(cutsceneName);",
  "mp.game.cutscene.getEntityIndexOfRegisteredEntity(cutsceneEntName, modelHash);",
  "mp.game.datafile.objectValueGetVector3(objectData, key);",
  "mp.game.datafile.arrayValueAddObject(arrayData);",
  "mp.game.datafile.objectValueAddInteger(objectData, key, value);",
  "mp.game.cutscene.startCutscene(p0);",
  "mp.game.cutscene.setCutsceneTriggerArea(p0, p1, p2, p3, p4, p5);",
  "mp.game.cutscene.requestCutscene2(cutsceneName, p1, p2);",
  "mp.game.cutscene.stopCutscene(p0);",
  "mp.game.cutscene.registerEntityForCutscene(cutscenePed, cutsceneEntName, p2, modelHash, p4);",
  "mp.game.datafile.objectValueGetType(objectData, key);",
  "mp.game.datafile.objectValueGetBoolean(objectData, key);",
  "mp.game.datafile.objectValueAddBoolean(objectData, key, value);",
  "mp.game.datafile.objectValueGetString(objectData, key);",
  "mp.game.datafile.arrayValueGetBoolean(arrayData, arrayIndex);",
  "mp.game.datafile.objectValueAddObject(objectData, key);",
  "mp.game.datafile.objectValueGetObject(objectData, key);",
  "mp.game.datafile.objectValueAddFloat(objectData, key, value);",
  "mp.game.datafile.loadUgcFile(filename);",
  "mp.game.decisionevent.addShockingEventAtPosition(type, x, y, z, duration);",
  "mp.game.dlc1.getDlcWeaponComponentData(p0, p1, ComponentDataPtr);",
  "mp.game.decisionevent.removeAllShockingEvents(p0);",
  "mp.game.dlc1.getDlcVehicleFlags(p0);",
  "mp.game.dlc1.getShopPedQueryOutfit(p0, outfit);",
  "mp.game.dlc1.initShopPedProp(outProp);",
  "mp.game.dlc1.getVariantComponent(componentHash, componentId, p2, p3, p4);",
  "mp.game.dlc1.getDlcVehicleModel(dlcVehicleIndex);",
  "mp.game.decorator.decorRegister(propertyName, type);",
  "mp.game.decisionevent.clearDecisionMakerEventResponse(name, type);",
  "mp.game.decisionevent.suppressShockingEventTypeNextFrame(type);",
  "mp.game.decorator.decorIsRegisteredAsType(propertyName, type);",
  "mp.game.dlc1.getPropFromOutfit(outfit, slot, item);",
  "mp.game.decisionevent.removeShockingEvent(event);",
  "mp.game.decisionevent.isShockingEventInSphere(type, x, y, z, radius);",
  "mp.game.decisionevent.unblockDecisionMakerEvent(name, type);",
  "mp.game.dlc1.initShopPedComponent(outComponent);",
  "mp.game.dlc1.getShopPedQueryComponent(componentId, outComponent);",
  "mp.game.dlc1.getDlcVehicleData(dlcVehicleIndex, outData);",
  "mp.game.dlc1.getNumDlcWeaponComponents(dlcWeaponIndex);",
  "mp.game.dlc1.getForcedComponent(componentHash, componentId, p2, p3, p4);",
  "mp.game.dlc1.getShopPedComponent(p0, p1);",
  "mp.game.dlc1.getDlcWeaponData(dlcWeaponIndex, outData);",
  "mp.game.dlc1.getNumPropsFromOutfit(character, p1, p2, p3, p4, componentId);",
  "mp.game.dlc1.getShopPedOutfit(p0, p1);",
  "mp.game.dlc1.getNumForcedComponents(componentHash);",
  "mp.game.dlc1.isDlcDataEmpty(dlcData);",
  "mp.game.dlc1.getShopPedQueryProp(p0, p1);",
  "mp.game.dlc2.nullify(variable, unused);",
  "mp.game.dlc2.isDlcPresent(DlcHash);",
  "entity.applyForceToCenterOfMass(forceType, x, y, z, p5, isRel, highForce, p8);",
  "entity.attachTo(entity2, boneIndex, xPosOffset, yPosOffset, zPosOffset, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot);",
  "entity.clearLastDamage();",
  "entity.attachToPhysically(entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18);",
  "entity.applyForceTo(forceType, x, y, z, xRot, yRot, zRot, boneIndex, isRel, p10, highForce, p12, p13);",
  "mp.discord.update(detailedStatus, state)",
  "mp.discord.update('Playing on Freeroam', 'Playing as Ronald McDonald')",
  "RAGE.Discord.Update(string details, string state)",
  "RAGE.Discord.Update(\"Playing on Freeroam\", \"Playing as Ronald McDonald\");",
  "mp.game.entity.findAnimEventPhase(animDictionary, animName, p2, p3, p4);",
  "mp.game.entity.createModelHide(x, y, z, radius, model, p5);",
  "mp.game.entity.getEntityAnimDuration(animDict, animName);",
  "mp.game.entity.createForcedObject(x, y, z, p3, modelHash, p5);",
  "mp.game.entity.createModelHideExcludingScriptObjects(x, y, z, radius, model, p5);",
  "mp.game.entity.createModelSwap(x, y, z, radius, originalModel, newModel, p6);",
  "entity.getPedIndexFromIndex();",
  "entity.doesHaveDrawable();",
  "entity.getForwardVector();",
  "entity.getMaxHealth();",
  "entity.getOffsetFromInWorldCoords(offsetX, offsetY, offsetZ);",
  "entity.getHeightAboveGround();",
  "entity.getOffsetFromGivenWorldCoords(posX, posY, posZ);",
  "entity.getAnimCurrentTime(animDict, animName);",
  "entity.getCoords(alive);",
  "entity.forceAiAndAnimationUpdate();",
  "entity.getLodDist();",
  "entity.getAttachedTo();",
  "entity.getNearestPlayerToOnTeam(team);",
  "entity.getAnimTotalTime(animDict, animName);",
  "entity.getAlpha();",
  "entity.getHeight(X, Y, Z, atTop, inWorldCoords);",
  "entity.getLastMaterialHitBy();",
  "entity.getNearestPlayerTo();",
  "entity.doesExist();",
  "entity.getQuaternion(x, y, z, w);",
  "entity.getRoll();",
  "entity.getPhysicsHeading();",
  "entity.getForwardY();",
  "entity.getForwardX();",
  "entity.detach(p1, collision);",
  "entity.getModel();",
  "entity.getRotation(rotationOrder);",
  "entity.getPitch();",
  "entity.getObjectIndexFromIndex();",
  "entity.doesHavePhysics();",
  "entity.doesBelongToThisScript(p1);",
  "entity.getCollisionNormalOfLastHitFor();",
  "entity.getHeading();",
  "entity.getMatrix(rightVector, forwardVector, upVector, position);",
  "entity.getHealth();",
  "var currentHealth = mp.players.local.getHealth();",
  "entity.getPopulationType();",
  "entity.getBoneIndexByName(boneName);",
  "mp.game.entity.isAnEntity(handle);",
  "entity.hasClearLosToInFront(entity2);",
  "entity.isAMission();",
  "entity.isTouchingModel(modelHash);",
  "entity.isStatic();",
  "entity.isTouching(targetEntity);",
  "entity.isPlayingAnim(animDict, animName, p4);",
  "entity.isAtCoord(xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9);",
  "entity.hasAnimFinished(animDict, animName, p3);",
  "entity.getRotationVelocity();",
  "entity.isAttachedToAnyVehicle();",
  "entity.getWorldPositionOfBone(boneIndex);",
  "entity.getVelocity();",
  "entity.getVehicleIndexFromIndex();",
  "entity.isInAngledArea(originX, originY, originZ, edgeX, edgeY, edgeZ, angle, p8, p9, p10);",
  "entity.isAPed();",
  "entity.isInArea(x1, y1, z1, x2, y2, z2, p7, p8, p9);",
  "entity.isDead();",
  "entity.hasBeenDamagedByAnyPed();",
  "entity.isAVehicle();",
  "entity.isAt(entity2, xSize, ySize, zSize, p5, p6, p7);",
  "entity.isInAir();",
  "entity.getType();",
  "entity.hasCollidedWithAnything();",
  "entity.isAnObject();",
  "entity.hasBeenDamagedByAnyObject();",
  "entity.getUprightValue();",
  "entity.getSpeedVector(relative);",
  "entity.getScript(script);",
  "entity.isAttachedToAnyPed();",
  "entity.isAttached();",
  "entity.isInZone(zone);",
  "entity.hasBeenDamagedBy(entity2, p2);",
  "entity.isCollisonDisabled();",
  "entity.isAttachedToAnyObject();",
  "entity.isInWater();",
  "entity.getSpeed();",
  "entity.hasBeenDamagedByAnyVehicle();",
  "entity.isOccluded();",
  "entity.isOnScreen();",
  "entity.getSubmergedLevel();",
  "entity.hasCollisionLoadedAround();",
  "entity.hasAnimEventFired(actionHash);",
  "entity.isAttachedTo(to);",
  "entity.hasClearLosTo(entity2, traceType);",
  "entity.isPositionFrozen();",
  "player.hasBeenDamagedByEntity(target, p2);",
  "mp.game.entity.playSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);",
  "mp.game.entity.removeForcedObject(p0, p1, p2, p3, p4);",
  "mp.game.entity.removeModelSwap(x, y, z, radius, originalModel, newModel, p6);",
  "mp.game.entity.setObjectAsNoLongerNeeded(object);",
  "mp.game.entity.removeModelHide(p0, p1, p2, p3, p4, p5);",
  "entity.setCoords(xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);",
  "entity.setLoadCollisionFlag(toggle);",
  "entity.setMaxSpeed(speed);",
  "entity.setMaxHealth(value);",
  "entity.setDynamic(toggle);",
  "entity.setCanBeDamaged(toggle);",
  "entity.setCollision(toggle, keepPhysics);",
  "entity.isUpsidedown();",
  "entity.setCoordsNoOffset(xPos, yPos, zPos, alive, deadFlag, ragdollFlag);",
  "entity.setAnimSpeed(animDictionary, animName, speedMultiplier);",
  "entity.setMotionBlur(toggle);",
  "entity.setInvincible(toggle);",
  "entity.setAnimCurrentTime(animDictionary, animName, time);",
  "entity.isVisible();",
  "entity.setHasGravity(toggle);",
  "entity.isUpright(angle);",
  "entity.setLodDist(value);",
  "entity.setCoords2(xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);",
  "entity.setHealth(health);",
  "entity.setOnlyDamagedByRelationshipGroup(p1, p2);",
  "entity.setOnlyDamagedByPlayer(toggle);",
  "entity.setLights(toggle);",
  "entity.playAnim(animName, propName, p3, p4, p5, p6, delta, bitset);",
  "entity.setHeading(heading);",
  "entity.resetAlpha();",
  "entity.setAlwaysPrerender(toggle);",
  "entity.setAsMission(p1, byThisScript);",
  "entity.playSynchronizedAnim(syncedScene, animation, propName, p4, p5, p6, p7);",
  "entity.isWaitingForWorldCollision();",
  "entity.setCanBeTargetedWithoutLos(toggle);",
  "entity.isVisibleToScript();",
  "entity.setCanBeDamagedByRelationshipGroup(p1, p2);",
  "entity.setIsTargetPriority(p1, p2);",
  "entity.processAttachments();",
  "mp.game.entity.stopSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5);",
  "mp.game.entity.wouldEntityBeOccluded(hash, x, y, z, p4);",
  "entity.setRecordsCollisions(toggle);",
  "entity.setVelocity(x, y, z);",
  "entity.stopAnim(animation, animGroup, p3);",
  "entity.stopSynchronizedAnim(p1, p2);",
  "entity.setTrafficlightOverride(state);",
  "entity.setRenderScorched(toggle);",
  "entity.setQuaternion(x, y, z, w);",
  "entity.setRotation(pitch, roll, yaw, rotationOrder, p5);",
  "entity.setVisible(toggle, unk);",
  "entity.setVisible(toggle, false);",
  "mp.events.add('entityStreamOut', (entity) => {});",
  "entityOverlayBatch.update(overlayParams)",
  "batch.add(entity);",
  "batch.remove(entity);",
  "batch.addThisFrame(entity);",
  "batch.destroy();",
  "batch.removeThisFrame(entity);",
  "batch.valid();",
  "mp.game.fire.isExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, angle);",
  "mp.game.fire.removeScriptFire(fireHandle);",
  "mp.game.fire.getClosestFirePos(outPosition, x, y, z);",
  "mp.game.fire.getNumberOfFiresInRange(x, y, z, radius);",
  "mp.game.fire.addSpecfxExplosion(x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);",
  "mp.game.fire.getPedInsideExplosionArea(explosionType, x1, y1, z1, x2, y2, z2, radius);",
  "mp.game.fire.stopFireInRange(x, y, z, radius);",
  "mp.game.fire.addExplosion(x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);",
  "mp.game.fire.isExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2);",
  "mp.game.fire.isExplosionInSphere(explosionType, x, y, z, radius);",
  "eventHandlers = mp.events.getAllOf('myEvent');",
  "mp.game.clock.addToTime(hours, minutes, seconds)",
  "mp.game.clock.advanceClockTimeTo(hour, minute, second)",
  "mp.game.clock.addToClockTime(hours, minutes, seconds)",
  "mp.game.entity.doesExist(entity)",
  "mp.game.entity.doesBelongToThisScript(entity, p1)",
  "mp.game.entity.doesHaveDrawable(entity)",
  "mp.game.entity.doesHavePhysics(entity)",
  "mp.game.entity.forceAiAndAnimationUpdate(entity)",
  "mp.game.entity.getAnimCurrentTime(entity, animDict, animName)",
  "mp.game.entity.getAnimTotalTime(entity, animDict, animName)",
  "mp.game.entity.getAnimDuration(animDict, animName)",
  "mp.game.entity.getAttachedTo(entity)",
  "mp.game.entity.enableUnk(entity)",
  "mp.game.entity.getBoneCount(entity)",
  "mp.game.entity.getBoneRotationLocal(entity, boneIndex)",
  "mp.game.entity.getBonePosition2(entity, boneIndex)",
  "mp.game.entity.getBoneRotation(entity, boneIndex)",
  "mp.game.entity.createForcedObject(x, y, z, p3, modelHash, p5)",
  "mp.game.entity.createModelHideExcludingScriptObjects(x, y, z, radius, modelHash, p5)",
  "mp.game.entity.createModelSwap(x, y, z, radius, originalModel, newModel, p6)",
  "mp.game.entity.createModelHide(x, y, z, radius, modelHash, p5)",
  "mp.game.entity.getAlpha(entity)",
  "mp.game.entity.findAnimEventPhase(animDictionary, animName, p2)",
  "mp.game.entity.freezePosition(entity, toggle)",
  "mp.game.entity.detach(entity, dynamic, collision)",
  "mp.game.entity.clearLastDamageEntity(entity)",
  "mp.game.entity.getBoneIndexByName(entity, boneName)",
  "mp.game.entity.attachToEntityPhysically(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18)",
  "mp.game.entity.attachBoneToEntityBonePhysically(entity1, entity2, boneIndex1, boneIndex2, p4, p5)",
  "mp.game.entity.attachBoneToEntityBone(entity1, entity2, boneIndex1, boneIndex2, p4, p5)",
  "mp.game.entity.attachToEntity(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot)",
  "mp.game.entity.applyForceTo(entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13)",
  "mp.game.entity.applyForceToCenterOfMass(entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8)",
  "mp.game.clock.setTime(hour, minute, second)",
  "mp.game.clock.pause(toggle)",
  "mp.game.clock.advanceTimeTo(hour, minute, second)",
  "mp.game.clock.getHours()",
  "mp.game.clock.getMinutes()",
  "mp.game.clock.getSeconds()",
  "mp.game.clock.setDate(day, month, year)",
  "mp.game.clock.getDayOfWeek()",
  "mp.game.clock.getDayOfMonth()",
  "mp.game.clock.getMonth()",
  "mp.game.clock.getYear()",
  "mp.game.clock.getMillisecondsPerGameMinute()",
  "mp.game.clock.getPosixTime()",
  "mp.game.clock.getUtcTime()",
  "mp.game.clock.getLocalTime()",
  "mp.game.clock.setClockTime(hour, minute, second)",
  "mp.game.clock.pauseClock(toggle)",
  "mp.game.clock.setClockDate(day, month, year)",
  "mp.game.clock.getLocalTimeGmt()",
  "mp.game.entity.hasAnimFinished(entity, animDict, animName, p3)",
  "mp.game.entity.hasBeenDamagedByAnyObject(entity)",
  "mp.game.entity.hasBeenDamagedByAnyPed(entity)",
  "mp.game.entity.hasBeenDamagedByAnyVehicle(entity)",
  "mp.game.entity.hasClearLosToEntity(entity1, entity2, traceType)",
  "mp.game.entity.hasClearLosToEntity2(entity1, entity2, traceType)",
  "mp.game.entity.hasClearLosToEntityInFront(entity1, entity2)",
  "mp.game.entity.getLastMaterialHitBy(entity)",
  "mp.game.entity.getCollisionNormalOfLastHitFor(entity)",
  "mp.game.entity.getEntityAnimDuration(animDict, animName)",
  "mp.game.entity.hasBeenDamagedByEntity(entity1, entity2, p2)",
  "mp.game.entity.getForwardX(entity)",
  "mp.game.entity.getForwardY(entity)",
  "mp.game.entity.getHeading(entity)",
  "mp.game.entity.getPhysicsHeading(entity)",
  "mp.game.entity.getHealth(entity)",
  "mp.game.entity.getMaxHealth(entity)",
  "mp.game.entity.getHeightAboveGround(entity)",
  "mp.game.entity.getMatrix(entity)",
  "mp.game.entity.getModel(entity)",
  "mp.game.entity.getOffsetFromGivenWorldCoords(entity, posX, posY, posZ)",
  "mp.game.entity.getForwardVector(entity)",
  "mp.game.entity.getOffsetFromInWorldCoords(entity, offsetX, offsetY, offsetZ)",
  "mp.game.entity.getCoords(entity, alive)",
  "mp.game.entity.getPitch(entity)",
  "mp.game.entity.getRoll(entity)",
  "mp.game.entity.getHeight(entity, X, Y, Z, atTop, inWorldCoords)",
  "mp.game.entity.getQuaternion(entity)",
  "mp.game.entity.getRotation(entity, rotationOrder)",
  "mp.game.entity.getRotationVelocity(entity)",
  "mp.game.entity.getScript(entity)",
  "mp.game.entity.getSpeedVector(entity, relative)",
  "mp.game.entity.getUprightValue(entity)",
  "mp.game.entity.getVelocity(entity)",
  "mp.game.entity.getObjectIndexFromIndex(entity)",
  "mp.game.entity.getPedIndexFromIndex(entity)",
  "mp.game.entity.getVehicleIndexFromIndex(entity)",
  "mp.game.entity.getWorldPositionOfBone(entity, boneIndex)",
  "mp.game.entity.getNearestPlayerTo(entity)",
  "mp.game.entity.getNearestPlayerToOnTeam(entity, team)",
  "mp.game.entity.getType(entity)",
  "mp.game.entity.getPopulationType(entity)",
  "mp.game.entity.getSpeed(entity)",
  "mp.game.entity.getSubmergedLevel(entity)",
  "mp.game.entity.getPickup(entity, modelHash)",
  "mp.game.entity.getLodDist(entity)",
  "mp.game.entity.getProofs(entity)",
  "mp.game.entity.getCanBeDamaged(entity)",
  "mp.game.entity.getCollisionDisabled(entity)",
  "mp.game.entity.hasAnimEventFired(entity, actionHash)",
  "mp.game.entity.hasCollidedWithAnything(entity)",
  "mp.game.entity.isAnEntity(handle)",
  "mp.game.entity.isAn(handle)",
  "mp.game.entity.isAPed(entity)",
  "mp.game.entity.isAMissionEntity(entity)",
  "mp.game.entity.isAVehicle(entity)",
  "mp.game.entity.isAnObject(entity)",
  "mp.game.entity.isAtCoord(entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9)",
  "mp.game.entity.isAtEntity(entity1, entity2, xSize, ySize, zSize, p5, p6, p7)",
  "mp.game.entity.isAttached(entity)",
  "mp.game.entity.isAttachedToAnyObject(entity)",
  "mp.game.entity.isAttachedToAnyPed(entity)",
  "mp.game.entity.isAttachedToEntity(from, to)",
  "mp.game.entity.isDead(entity, p1)",
  "mp.game.entity.isInAir(entity)",
  "mp.game.entity.isInAngledArea(entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10)",
  "mp.game.entity.isInArea(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9)",
  "mp.game.entity.isInZone(entity, zone)",
  "mp.game.entity.isInWater(entity)",
  "mp.game.entity.isOnScreen(entity)",
  "mp.game.entity.isPlayingAnim(entity, animDict, animName, taskFlag)",
  "mp.game.entity.isStatic(entity)",
  "mp.game.entity.isTouchingEntity(entity, targetEntity)",
  "mp.game.entity.isTouchingModel(entity, modelHash)",
  "mp.game.entity.isUpright(entity, angle)",
  "mp.game.entity.isUpsidedown(entity)",
  "mp.game.entity.isVisible(entity)",
  "mp.game.entity.isVisibleToScript(entity)",
  "mp.game.entity.isOccluded(entity)",
  "mp.game.entity.isAttachedToAnyVehicle(entity)",
  "mp.game.entity.setCanAutoVaultOn(entity, toggle)",
  "mp.game.entity.removeForcedObject(p0, p1, p2, p3, p4)",
  "mp.game.entity.removeModelHide(x, y, z, radius, modelHash, p5)",
  "mp.game.entity.removeModelSwap(x, y, z, radius, originalModel, newModel, p6)",
  "mp.game.entity.setAlwaysPrerender(entity, toggle)",
  "mp.game.entity.resetAlpha(entity)",
  "mp.game.entity.setAlpha(entity, alphaLevel, skin)",
  "mp.game.entity.setAngularVelocity(entity, x, y, z)",
  "mp.game.entity.hasCollisionLoadedAround(entity)",
  "mp.game.entity.setCanBeDamaged(entity, toggle)",
  "mp.game.entity.setAsNoLongerNeeded(entity)",
  "mp.game.entity.setAsMissionEntity(entity, p1, p2)",
  "mp.game.entity.setAnimSpeed(entity, animDictionary, animName, speedMultiplier)",
  "mp.game.entity.setAnimCurrentTime(entity, animDictionary, animName, time)",
  "mp.game.entity.playSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5, p8, p9, p10, p11)",
  "mp.game.entity.playSynchronizedMapAnim(p0, p1, p2, p3, p4, p5, p8, p9, p10, p11)",
  "mp.game.entity.playSynchronizedAnim(entity, syncedScene, animation, propName, p4, p5, p6, p7)",
  "mp.game.entity.playAnim(entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset)",
  "mp.game.entity.processAttachments(entity)",
  "mp.game.entity.isWaitingForWorldCollision(entity)",
  "mp.game.entity.setMaxHealth(entity, value)",
  "mp.game.entity.wouldBeOccluded(entityModelHash, x, y, z, p4)",
  "mp.game.entity.wouldEntityBeOccluded(entityModelHash, x, y, z, p4)",
  "mp.game.entity.setDecalsDisabled(entity, p1)",
  "mp.game.entity.setCanClimbOn(entity, toggle)",
  "mp.game.entity.setMotionBlur(entity, toggle)",
  "mp.game.entity.setNoCollisionEntity(entity1, entity2, thisFrameOnly)",
  "mp.game.entity.setTrafficlightOverride(entity, state)",
  "mp.game.entity.setRenderScorched(entity, toggle)",
  "mp.game.entity.setLodDist(entity, value)",
  "mp.game.entity.setHasGravity(entity, toggle)",
  "mp.game.entity.setVelocity(entity, x, y, z)",
  "mp.game.entity.setVisible(entity, toggle, unk)",
  "mp.game.entity.setRotation(entity, pitch, roll, yaw, rotationOrder, p5)",
  "mp.game.entity.setRecordsCollisions(entity, toggle)",
  "mp.game.entity.setQuaternion(entity, x, y, z, w)",
  "mp.game.entity.setOnlyDamagedByRelationshipGroup(entity, p1, p2)",
  "mp.game.entity.setOnlyDamagedByPlayer(entity, toggle)",
  "mp.game.entity.setMaxSpeed(entity, speed)",
  "mp.game.entity.setLoadCollisionFlag(entity, toggle, p2)",
  "mp.game.entity.setLights(entity, toggle)",
  "mp.game.entity.setIsTargetPriority(entity, p1, p2)",
  "mp.game.entity.setInvincible(entity, toggle)",
  "mp.game.entity.setHealth(entity, health, p2)",
  "mp.game.entity.setHeading(entity, heading)",
  "mp.game.entity.setCoordsNoOffset(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis)",
  "mp.game.entity.setDynamic(entity, toggle)",
  "mp.game.entity.setCoordsWithoutPlantsReset(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea)",
  "mp.game.entity.setCoords(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea)",
  "mp.game.entity.setCollision(entity, toggle, keepPhysics)",
  "mp.game.entity.setCanBeTargetedWithoutLos(entity, toggle)",
  "mp.game.entity.setCanBeDamagedByRelationshipGroup(entity, bCanBeDamaged, relGroup)",
  "mp.game.entity.setObjectAsNoLongerNeeded(object)",
  "mp.game.entity.setVehicleAsNoLongerNeeded(vehicle)",
  "mp.game.entity.setPedAsNoLongerNeeded(ped)",
  "mp.game.entity.stopSynchronizedAnim(entity, p1, p2)",
  "mp.game.entity.stopAnim(entity, animation, animGroup, p3)",
  "mp.game.entity.stopSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5)",
  "mp.game.entity.stopSynchronizedMapAnim(p0, p1, p2, p3, p4, p5)",
  "mp.game.entity.setCleanupByEngine(entity, toggle)",
  "mp.game.event.clearDecisionMakerResponse(name, eventType)",
  "mp.game.event.blockDecisionMaker(name, eventType)",
  "mp.game.event.addShockingAtPosition(eventType, x, y, z, duration)",
  "mp.game.event.addShockingForEntity(eventType, entity, duration)",
  "mp.game.event.isShockingInSphere(eventType, x, y, z, radius)",
  "mp.game.event.removeShocking(event)",
  "mp.game.event.removeAllShockingS(p0)",
  "mp.game.event.removeShockingSpawnBlockingAreas()",
  "mp.game.event.setDecisionMaker(ped, name)",
  "mp.game.event.unblockDecisionMaker(name, eventType)",
  "mp.game.event.suppressShockingEventsNextFrame()",
  "mp.game.event.suppressShockingTypeNextFrame(eventType)",
  "mp.game.event.suppressAgitationEventsNextFrame()",
  "mp.game.files.getNumTattooShopDlcItems(character)",
  "mp.game.files.getTattooShopDlcItemData(characterType, decorationIndex)",
  "mp.game.files.initShopPedComponent()",
  "mp.game.files.initShopPedProp()",
  "mp.game.files.setupShopPedApparelQuery(p0, p1, p2, p3)",
  "mp.game.files.getShopPedQueryComponent(componentId)",
  "mp.game.files.getShopPedComponent(componentHash)",
  "mp.game.files.getShopPedQueryProp(componentId)",
  "mp.game.files.getShopPedProp(componentHash)",
  "mp.game.files.getHashNameForComponent(entity, componentId, drawableVariant, textureVariant)",
  "mp.game.files.getHashNameForProp(entity, componentId, propIndex, propTextureIndex)",
  "mp.game.files.getShopPedApparelVariantComponentCount(componentHash)",
  "mp.game.files.getShopPedApparelVariantPropCount(propHash)",
  "mp.game.files.getVariantComponent(componentHash, variantComponentIndex)",
  "mp.game.files.getVariantProp(componentHash, variantPropIndex)",
  "mp.game.files.getShopPedApparelForcedComponentCount(componentHash)",
  "mp.game.files.getShopPedApparelForcedPropCount(componentHash)",
  "mp.game.files.getForcedComponent(componentHash, forcedComponentIndex)",
  "mp.game.files.getForcedProp(componentHash, forcedPropIndex)",
  "mp.game.files.doesShopPedApparelHaveRestrictionTag(componentHash, restrictionTagHash, componentId)",
  "mp.game.files.getShopPedQueryOutfit(outfitIndex)",
  "mp.game.files.getShopPedOutfit(p0)",
  "mp.game.files.getShopPedOutfitLocate(p0)",
  "mp.game.files.getShopPedOutfitPropVariant(outfitHash, variantIndex)",
  "mp.game.files.getShopPedOutfitComponentVariant(outfitHash, variantIndex)",
  "mp.game.files.getNumDlcVehicles()",
  "mp.game.files.getDlcVehicleModel(dlcVehicleIndex)",
  "mp.game.files.getDlcVehicleData(dlcVehicleIndex)",
  "mp.game.files.getDlcVehicleFlags(dlcVehicleIndex)",
  "mp.game.files.getNumDlcWeapons()",
  "mp.game.files.getNumDlcWeaponsSp()",
  "mp.game.files.getDlcWeaponData(dlcWeaponIndex)",
  "mp.game.files.getDlcWeaponDataSp(dlcWeaponIndex)",
  "mp.game.files.getNumDlcWeaponComponents(dlcWeaponIndex)",
  "mp.game.files.getNumDlcWeaponComponentsSp(dlcWeaponIndex)",
  "mp.game.files.getDlcWeaponComponentData(dlcWeaponIndex, dlcWeapCompIndex)",
  "mp.game.files.getDlcWeaponComponentDataSp(dlcWeaponIndex, dlcWeapCompIndex)",
  "mp.game.files.isContentItemLocked(itemHash)",
  "mp.game.files.isDlcVehicleMod(hash)",
  "mp.game.files.getDlcVehicleModLockHash(hash)",
  "mp.game.files.loadContentChangeSetGroup(hash)",
  "mp.game.files.getNumPropsFromOutfit(character, p1, p2, p3, p4, componentId)",
  "mp.game.files.getNumForcedComponents(componentHash)",
  "mp.game.files.getPropFromOutfit(outfitHash, variantIndex)",
  "mp.game.files.isDlcDataEmpty(itemHash)",
  "mp.game.gameplay.atan(p0);",
  "mp.game.gameplay.clearAreaOfObjects(x, y, z, radius, flags);",
  "mp.game.gameplay.areStringsEqual(string1, string2);",
  "mp.game.gameplay.clearAreaOfEverything(x, y, z, radius, p4, p5, p6, p7);",
  "mp.game.gameplay.absf(value);",
  "mp.game.gameplay.atan2(p0, p1);",
  "mp.game.gameplay.absi(value);",
  "mp.game.gameplay.clearBit(address, offset);",
  "mp.game.gameplay.createIncident(p0, p2, p3, p4, p5, p6, outIncident);",
  "mp.game.gameplay.clearAreaOfVehicles(x, y, z, radius, p4, p5, p6, p7, p8);",
  "mp.game.gameplay.clearAreaOfCops(x, y, z, radius, flags);",
  "mp.game.gameplay.createIncidentWithEntity(p0, p1, p2, p3, outIncident);",
  "mp.game.gameplay.clearAreaOfProjectiles(x, y, z, radius, flags);",
  "mp.game.gameplay.clearAngledAreaOfVehicles(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);",
  "mp.game.gameplay.acos(value);",
  "mp.game.gameplay.compareStrings(str1, str2, matchCase, maxLength);",
  "mp.game.gameplay.addHospitalRestart(x, y, z, p3, p4);",
  "mp.game.gameplay.addPoliceRestart(p0, p1, p2, p3, p4);",
  "mp.game.gameplay.clearArea(X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7);",
  "mp.game.gameplay.addStuntJumpAngled(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18);",
  "mp.game.gameplay.clearAreaOfPeds(x, y, z, radius, flags);",
  "mp.game.gameplay.asin(p0);",
  "mp.game.gameplay.beginReplayStats(p0, p1);",
  "mp.game.gameplay.clearWeatherTypePersist();",
  "mp.game.gameplay.clearOverrideWeather();",
  "mp.game.gameplay.clearCloudHat();",
  "mp.game.gameplay.cancelOnscreenKeyboard();",
  "mp.game.gameplay.clearWeatherTypeOvertimePersist(transitionTime);",
  "mp.game.gameplay.clearWeatherTypeOvertimePersist(0);",
  "mp.game.gameplay.clearRestartCustomPosition();",
  "mp.game.files.setupShopPedApparelQueryTu(character, p1, p2, p3, p4, componentId)",
  "mp.game.files.setupShopPedOutfitQuery(character, p1)",
  "mp.game.files.unloadContentChangeSetGroup(hash)",
  "mp.game.gameplay.addReplayStatValue(value)",
  "mp.game.gameplay.clearReplayStats()",
  "mp.game.gameplay.allowMissionCreatorWarp(toggle)",
  "mp.game.gameplay.cancelStuntJump()",
  "mp.game.gameplay.copyMemory(size)",
  "mp.game.gameplay.blockDispatchServiceResourceCreation(dispatchService, toggle)",
  "mp.game.gameplay.addPopMultiplierArea(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9)",
  "mp.game.gameplay.addPopMultiplierSphere(x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7)",
  "mp.game.gameplay.addDispatchSpawnBlockingAngledArea(x1, y1, z1, x2, y2, z2, width)",
  "mp.game.gameplay.addDispatchSpawnBlockingArea(x1, y1, x2, y2)",
  "mp.game.gameplay.addTacticalAnalysisPoint(x, y, z)",
  "mp.game.gameplay.clearTacticalAnalysisPoints()",
  "mp.game.gameplay.areProfileSettingsValid()",
  "mp.game.gameplay.cleanupAsyncInstall()",
  "mp.game.gameplay.findSpawnPointInDirection(x1, y1, z1, x2, y2, z2, distance, spawnPoint);",
  "mp.game.gameplay.getDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ);",
  "mp.game.gameplay.getAngleBetween2dVectors(x1, y1, x2, y2);",
  "mp.game.gameplay.disableStuntJumpSet(p0);",
  "mp.game.gameplay.getGroundZFor3dCoord(x, y, z, waterAsGround, waterLevelCheck);",
  "mp.game.gameplay.getHashKey(value);",
  "mp.game.gameplay.getFreeStackSlotsCount(stackSize);",
  "mp.game.gameplay.enableStuntJumpSet(p0);",
  "mp.game.gameplay.getHeadingFromVector2d(x, y);",
  "mp.game.gameplay.displayOnscreenKeyboard(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);",
  "mp.game.gameplay.getModelDimensions(modelHash);",
  "mp.game.gameplay.disablePoliceRestart(policeIndex, toggle);",
  "mp.game.gameplay.disableAutomaticRespawn(disableRespawn);",
  "mp.game.gameplay.getBitsInRange(var, rangeStart, rangeEnd);",
  "mp.game.gameplay.enableMpDlcMaps(toggle);",
  "mp.game.gameplay.disableHospitalRestart(hospitalIndex, toggle);",
  "mp.game.gameplay.enableDispatchService(dispatchType, toggle);",
  "mp.game.gameplay.getMissionFlag();",
  "mp.game.gameplay.forceLightningFlash();",
  "mp.game.gameplay.getCloudHatOpacity();",
  "mp.game.gameplay.getGameTimer();",
  "mp.game.gameplay.getFrameTime();",
  "mp.game.gameplay.getGroundZAndNormalFor3DCoord(x, y, z);",
  "mp.game.gameplay.enableTennisMode(ped, enable, femaleClipset);",
  "mp.game.gameplay.enableTennisMode(mp.players.local.handle, true, mp.players.local.isMale() ? false : true);",
  "mp.game.gameplay.getGravityLevel();",
  "mp.game.gameplay.getFakeWantedLevel();",
  "mp.game.gameplay.getFrameCount();",
  "mp.game.gameplay.getGroundZFor3DCoord2(x, y, z, waterAsGround, ignoreWaterLevelCheck);",
  "mp.game.gameplay.getAllocatedStackSize();",
  "mp.game.gameplay.getGlobalCharBuffer();",
  "mp.game.gameplay.getAngleBetween2DVectors(x1, y1, x2, y2);",
  "mp.game.gameplay.getHeadingFromVector2D(x, y);",
  "mp.game.gameplay.getBenchmarkTime();",
  "mp.game.gameplay.getBaseElementMetadata(element, blockIndex);",
  "mp.game.gameplay.getCoordsOfProjectileTypeInArea(minX, minY, minZ, maxX, maxY, maxZ, projectileHash, isPlayer);",
  "mp.game.gameplay.getCoordsOfProjectileTypeWithinDistance(ped, weaponHash, radius, isPlayer);",
  "mp.game.gameplay.doAutoSave()",
  "mp.game.gameplay.getIsAutoSaveOff()",
  "mp.game.gameplay.endReplayStats()",
  "mp.game.gameplay.getIndexOfCurrentLevel()",
  "mp.game.gameplay.doesPopMultiplierAreaExist(id)",
  "mp.game.gameplay.doesPopMultiplierSphereExist(id)",
  "mp.game.gameplay.displayOnscreenKeyboardWithLongerInitialString(p0, windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength)",
  "mp.game.gameplay.forceGameStatePlaying()",
  "mp.game.gameplay.getBenchmarkIterationsFromCommandLine()",
  "mp.game.gameplay.getBenchmarkPassFromCommandLine()",
  "mp.game.gameplay.forceSocialClubUpdate()",
  "mp.game.gameplay.getIsPlayerInAnimalForm()",
  "mp.game.gameplay.enableSnow();",
  "mp.game.gameplay.isBitSet(address, offset);",
  "mp.game.gameplay.isAreaOccupied(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);",
  "mp.game.gameplay.getProfileSetting(profileSetting);",
  "mp.game.gameplay.isIncidentValid(incidentId);",
  "mp.game.gameplay.getRandomIntInRange(min, max);",
  "mp.game.gameplay.getRandomFloatInRange(startRange, endRange);",
  "mp.game.gameplay.hasButtonCombinationJustBeenEntered(hash, amount);",
  "mp.game.gameplay.ignoreNextRestart(toggle);",
  "mp.game.gameplay.isNextWeatherType(weatherType);",
  "mp.game.gameplay.hasCheatStringJustBeenEntered(hash);",
  "mp.game.gameplay.getWeatherTypeTransition(p0, p1, progress_or_time);",
  "mp.game.gameplay.getRandomEventFlag();",
  "mp.game.gameplay.hasResumedFromSuspend();",
  "mp.game.gameplay.getWindSpeed();",
  "mp.game.gameplay.getWindDirection();",
  "mp.game.gameplay.getRainLevel();",
  "mp.game.gameplay.getSnowLevel();",
  "mp.game.gameplay.getRandomIntInRange2(min, max);",
  "mp.game.gameplay.getOnscreenKeyboardResult();",
  "mp.game.gameplay.isMinigameInProgress();",
  "mp.game.gameplay.getNumberOfFreeStacksOfThisSize(size);",
  "mp.game.gameplay.haveCreditsReachedEnd();",
  "mp.game.gameplay.getPrevWeatherTypeHashName();",
  "mp.game.gameplay.getNextWeatherTypeHashName();",
  "mp.game.gameplay.isAutoSaveInProgress()",
  "mp.game.gameplay.getReplayStatMissionType()",
  "mp.game.gameplay.getReplayStatCount()",
  "mp.game.gameplay.getReplayStatAtIndex(index)",
  "mp.game.gameplay.isMemoryCardInUse()",
  "mp.game.gameplay.getProjectileNearPed(ped, weaponhash, p2, p3, p4, p5)",
  "mp.game.gameplay.isOrbisVersion()",
  "mp.game.gameplay.isDurangoVersion()",
  "mp.game.gameplay.isPcVersion()",
  "mp.game.gameplay.isAussieVersion()",
  "mp.game.gameplay.getNumSuccessfulStuntJumps()",
  "mp.game.gameplay.getTotalSuccessfulStuntJumps()",
  "mp.game.gameplay.isFrontendFading()",
  "mp.game.gameplay.getSizeOfSaveData(p0)",
  "mp.game.gameplay.getNumDispatchedUnitsForPlayer(dispatchService)",
  "mp.game.gameplay.isCommandLineBenchmarkValueSet()",
  "mp.game.gameplay.hasAsyncInstallFinished()",
  "mp.game.gameplay.isInPowerSavingMode()",
  "mp.game.gameplay.getPowerSavingModeDuration()",
  "mp.game.gameplay.isPositionOccupied(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);",
  "mp.game.gameplay.isProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer);",
  "mp.game.gameplay.isStringNullOrEmpty(string);",
  "mp.game.gameplay.isProjectileTypeInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8);",
  "mp.game.gameplay.registerBoolToSave(p0, name);",
  "mp.game.gameplay.registerSaveHouse(p0, p1, p2, p3, p4, p5, p6);",
  "mp.game.gameplay.overrideSaveHouse(p0, p1, p2, p3, p4, p5, p6, p7);",
  "mp.game.gameplay.registerEnumToSave(p0, name);",
  "mp.game.gameplay.removeDispatchSpawnBlockingArea(p0);",
  "mp.game.gameplay.isProjectileTypeInArea(x1, y1, z1, x2, y2, z2, type, p7);",
  "mp.game.gameplay.registerIntToSave(p0, name);",
  "mp.game.gameplay.isPrevWeatherType(weatherType);",
  "mp.game.gameplay.registerFloatToSave(p0, name);",
  "mp.game.gameplay.setBit(address, offset);",
  "mp.game.gameplay.isPointObscuredByAMissionEntity(p0, p1, p2, p3, p4, p5, p6);",
  "mp.game.gameplay.registerTextLabelToSave(p0, name);",
  "mp.game.gameplay.isStringNull(string);",
  "mp.game.gameplay.preloadCloudHat(cloudHatName);",
  "mp.game.gameplay.loadCloudHat(cloudHatName, transitionTime);",
  "mp.game.gameplay.isTennisMode(ped);",
  "mp.game.gameplay.playTennisSwingAnim(ped, animDict, animName, startPhase, playRate, slowBlend);",
  "mp.game.gameplay.playTennisDiveAnim(ped, direction, diveHorizontal, diveVertical, playRate, slowBlend);",
  "mp.game.gameplay.setBeastModeActive(handle);",
  "mp.game.gameplay.nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(fontbitField);",
  "mp.game.gameplay.networkSetScriptIsSafeForNetworkGame();",
  "mp.game.gameplay.pauseDeathArrestRestart(pause);",
  "mp.game.gameplay.isProjectileTypeWithinDistance(x, y, z, weaponType, distance, isPlayer);",
  "mp.game.gameplay.isThisAMinigameScript()",
  "mp.game.gameplay.isSniperInverted()",
  "mp.game.gameplay.isStuntJumpInProgress()",
  "mp.game.gameplay.isStuntJumpMessageShowing()",
  "mp.game.gameplay.populateNow()",
  "mp.game.gameplay.registerInt64ToSave(name)",
  "mp.game.gameplay.registerTextLabelToSave2(name)",
  "mp.game.gameplay.removePopMultiplierArea(id, p1)",
  "mp.game.gameplay.isPopMultiplierAreaUnk(id)",
  "mp.game.gameplay.removePopMultiplierSphere(id, p1)",
  "mp.game.gameplay.resetDispatchSpawnLocation()",
  "mp.game.gameplay.resetDispatchIdealSpawnDistance()",
  "mp.game.gameplay.resetDispatchTimeBetweenSpawnAttempts(p0)",
  "mp.game.gameplay.resetDispatchSpawnBlockingAreas()",
  "mp.game.gameplay.removeStealthKill(hash, p1)",
  "mp.game.gameplay.scriptRaceInit(p0, p1, p2, p3)",
  "mp.game.gameplay.scriptRaceShutdown()",
  "mp.game.gameplay.scriptRaceGetPlayerSplitTime(player)",
  "mp.game.gameplay.resetBenchmarkRecording()",
  "mp.game.gameplay.saveBenchmarkRecording()",
  "mp.game.gameplay.landingMenuIsActive()",
  "mp.game.gameplay.restartGame()",
  "mp.game.gameplay.setRandomEventFlag(p0);",
  "mp.game.gameplay.setDispatchIdealSpawnDistance(p0);",
  "mp.game.gameplay.setGravityLevel(level);",
  "mp.game.gameplay.setSuperJumpThisFrame();",
  "mp.game.gameplay.setDispatchTimeBetweenSpawnAttempts(p0, p1);",
  "mp.game.gameplay.setRainFxIntensity(intensity);",
  "mp.game.gameplay.setGamePaused(toggle);",
  "mp.game.gameplay.setOverrideWeather(weatherType);",
  "mp.game.gameplay.setFadeOutAfterArrest(toggle);",
  "mp.game.gameplay.setWeatherTypeTransition(sourceWeather, targetWeather, transitionTime);",
  "mp.game.gameplay.setFadeInAfterDeathArrest(toggle);",
  "mp.game.gameplay.setFireAmmoThisFrame();",
  "mp.game.gameplay.setCloudHatTransition(type, transitionTime);",
  "mp.game.gameplay.setSaveHouse(p0, p1, p2);",
  "mp.game.gameplay.setExplosiveMeleeThisFrame();",
  "mp.game.gameplay.setUnkMapFlag(flag);",
  "mp.game.gameplay.setFakeWantedLevel(fakeWantedLevel);",
  "mp.game.gameplay.setMinigameInProgress(toggle);",
  "mp.game.gameplay.setTimeScale(time);",
  "mp.game.gameplay.setWeatherTypeNow(weatherType);",
  "mp.game.gameplay.setRandomSeed(time);",
  "mp.game.gameplay.setDispatchTimeBetweenSpawnAttemptsMultiplier(p0, p1);",
  "mp.game.gameplay.setFadeOutAfterDeath(toggle);",
  "mp.game.gameplay.setWeatherTypePersist(weatherType);",
  "mp.game.gameplay.setBitsInRange(var, rangeStart, rangeEnd, p3);",
  "mp.game.gameplay.setExplosiveAmmoThisFrame();",
  "mp.game.gameplay.setThisScriptCanBePaused(toggle);",
  "mp.game.gameplay.setCreditsActive(toggle);",
  "mp.game.gameplay.setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle);",
  "mp.game.gameplay.setMissionFlag(toggle);",
  "mp.game.gameplay.setSaveMenuActive(unk);",
  "mp.game.gameplay.setWeatherTypeNowPersist(weatherType);",
  "mp.game.gameplay.setFadeInAfterLoad(toggle);",
  "mp.game.gameplay.setWeatherTypeOverTime(weatherType, time);",
  "mp.game.gameplay.setWeatherTypeOvertimePersist(weatherName, time);",
  "mp.game.gameplay.setWeatherTypeOvertimePersist(\"CLEAR\", 300);",
  "mp.game.gameplay.setRandomWeatherType();",
  "mp.game.gameplay.setRainLevel(level);",
  "mp.game.gameplay.setRainLevel(0.5);",
  "mp.game.gameplay.setSnowLevel(level);",
  "mp.game.gameplay.setSnowLevel(0.5);",
  "mp.game.gameplay.setCloudHatOpacity(value);",
  "mp.game.gameplay.setRestartCustomPosition(x, y, z, heading);",
  "mp.game.gameplay.setForcePlayerToJump(handle)",
  "mp.game.gameplay.setStuntJumpsCanTrigger(toggle)",
  "mp.game.gameplay.setInstancePriorityMode(p0)",
  "mp.game.gameplay.setInstancePriorityHint(flag)",
  "mp.game.gameplay.setIncidentRequestedUnits(incidentId, dispatchService, numUnits)",
  "mp.game.gameplay.setIncidentUnk(incidentId, p1)",
  "mp.game.gameplay.setDispatchSpawnLocation(x, y, z)",
  "mp.game.gameplay.setRiotModeEnabled(toggle)",
  "mp.game.gameplay.setPlayerIsInAnimalForm(toggle)",
  "mp.game.gameplay.setPlayerRockstarEditorDisabled(toggle)",
  "mp.game.gameplay.startSaveStruct(p0, p1, structName);",
  "mp.game.gameplay.stringToInt(string, outInteger);",
  "mp.game.gameplay.terminateAllScriptsWithThisName(scriptName);",
  "mp.game.gameplay.tan(p0);",
  "mp.game.gameplay.usingMissionCreator(toggle);",
  "mp.game.gameplay.setWindDirection(direction);",
  "mp.game.gameplay.startSaveArray(p0, p1, arrayName);",
  "mp.game.gameplay.startSaveData(p0, p1, p2);",
  "mp.game.gameplay.setWind(p0);",
  "mp.game.gameplay.setWindSpeed(speed);",
  "mp.game.gameplay.unloadCloudHat(cloudHatName, transitionTime);",
  "mp.game.gameplay.updateOnscreenKeyboard();",
  "mp.game.gameplay.waterOverrideSetShorewaveamplitude(value);",
  "mp.game.gameplay.waterOverrideSetShorewaveamplitude(5.0);",
  "mp.game.gameplay.waterOverrideSetShorewaveminamplitude(value);",
  "mp.game.gameplay.waterOverrideSetShorewavemaxamplitude(value);",
  "mp.game.gameplay.waterOverrideSetOceannoiseminamplitude(value);",
  "mp.game.gameplay.waterOverrideSetOceanwaveamplitude(value);",
  "mp.game.gameplay.waterOverrideSetOceanwaveminamplitude(value);",
  "mp.game.gameplay.waterOverrideSetOceanwavemaxamplitude(value);",
  "mp.game.gameplay.waterOverrideSetRipplebumpiness(value);",
  "mp.game.gameplay.waterOverrideSetRippleminbumpiness(value);",
  "mp.game.gameplay.waterOverrideSetRipplemaxbumpiness(value);",
  "mp.game.gameplay.waterOverrideSetRippledisturb(value);",
  "mp.game.gameplay.waterOverrideSetStrength(value);",
  "mp.game.gameplay.waterOverrideFadeIn(time);",
  "mp.game.gameplay.waterOverrideFadeOut(time);",
  "mp.game.gameplay.shouldUseMetricMeasurements()",
  "mp.game.gameplay.stopSaveData()",
  "mp.game.gameplay.startSaveStructWithSize(size, structName)",
  "mp.game.gameplay.stopSaveStruct()",
  "mp.game.gameplay.startSaveArrayWithSize(size, arrayName)",
  "mp.game.gameplay.stopSaveArray()",
  "mp.game.gameplay.startBenchmarkRecording()",
  "mp.game.gameplay.stopBenchmarkRecording()",
  "mp.game.gameplay.uiIsSingleplayerPauseMenuActive()",
  "mp.game.graphics.addDecal(decaltype, x, y, z, dirX, dirY, dirZ, sideX, sideY, sideZ, width, height, r, g, b, a, timeout, isLongRange, isDynamic, complexCol);",
  "mp.game.graphics.addPetrolDecal(x, y, z, groundLvl, width, transparency);",
  "mp.game.graphics.addEntityIcon(entity, icon)",
  "mp.game.graphics.attachTvAudioToEntity(entity)",
  "mp.game.graphics.addPetrolTrailDecalInfo(x, y, z, p3)",
  "mp.game.graphics.addVehicleCrewEmblem(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha)",
  "mp.game.graphics.addTcmodifierOverride(modifierName1, modifierName2)",
  "mp.game.graphics.beginScaleformMovieMethod(scaleform, methodName)",
  "mp.game.graphics.beginScaleformMovieMethodOnFrontend(methodName)",
  "mp.game.graphics.beginScaleformMovieMethodOnFrontendHeader(methodName)",
  "mp.game.graphics.animpostfxPlay(effectName, duration, looped)",
  "mp.game.graphics.animpostfxStop(effectName)",
  "mp.game.graphics.animpostfxGetUnk(effectName)",
  "mp.game.graphics.animpostfxIsRunning(effectName)",
  "mp.game.graphics.animpostfxStopAll()",
  "mp.game.graphics.animpostfxStopAndDoUnk(effectName)",
  "mp.game.graphics.drawDebugLineWithTwoColours(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);",
  "mp.game.graphics.callScaleformMovieFunctionFloatParams(scaleform, functionName, param1, param2, param3, param4, param5);",
  "mp.game.graphics.drawBox(x1, y1, z1, x2, y2, z2, r, g, b, alpha);",
  "mp.game.graphics.callScaleformMovieFunctionMixedParams(scaleform, functionName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);",
  "mp.game.graphics.callScaleformMovieMethod(scaleform, method);",
  "mp.game.graphics.drawDebugCross(x, y, z, size, r, g, b, alpha);",
  "mp.game.graphics.doesParticleFxLoopedExist(ptfxHandle);",
  "mp.game.graphics.beginTextComponent(componentType);",
  "mp.game.graphics.callScaleformMovieFunctionStringParams(scaleform, functionName, param1, param2, param3, param4, param5);",
  "mp.game.graphics.disableVehicleDistantlights(toggle);",
  "mp.game.graphics.drawDebugSphere(x, y, z, radius, r, g, b, alpha);",
  "mp.game.graphics.destroyTrackedPoint(point);",
  "mp.game.graphics.createCheckpoint(type, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, colorR, colorG, colorB, alpha, reserved);",
  "mp.game.graphics.drawDebugBox(x1, y1, z1, x2, y2, z2, r, g, b, alpha);",
  "mp.game.graphics.drawDebugText(text, x, y, z, r, g, b, alpha);",
  "mp.game.graphics.drawDebugLine(x1, y1, z1, x2, y2, z2, r, g, b, alpha);",
  "mp.game.graphics.drawDebugText2d(text, x, y, z, r, g, b, alpha);",
  "mp.game.graphics.createWorldTextureSwap(oldTextureDict, oldTextureName, newTextureDict, newTextureName);",
  "mp.game.graphics.createWorldTextureSwap('hw1_16_build', 'hw1_16_tpage_ro_01', 'gta5_bill', 'prop_billboard_02_dm');",
  "mp.game.graphics.drawDebugText2D(text, x, y, z, red, green, blue, alpha)",
  "mp.game.graphics.beginTakeMissionCreatorPhoto()",
  "mp.game.graphics.beginTakeHighQualityPhoto()",
  "mp.game.graphics.dontRenderInGameUi(val)",
  "mp.game.graphics.clearDrawOrigin()",
  "mp.game.graphics.drawBinkMovie(binkMovie, p1, p2, p3, p4, p5, r, g, b, a)",
  "mp.game.graphics.disableOcclusionThisFrame()",
  "mp.game.graphics.createTrackedPoint()",
  "mp.game.graphics.cascadeShadowsInitSession()",
  "mp.game.graphics.cascadeShadowsSetCascadeBounds(cascade, enabled, x, y, z, scale, interpolateToDisabled, interpolateTime)",
  "mp.game.graphics.cascadeShadowsSetCascadeBoundsScale(scale)",
  "mp.game.graphics.cascadeShadowsEnableEntityTracker(toggle)",
  "mp.game.graphics.cascadeShadowsClearShadowSampleType()",
  "mp.game.graphics.cascadeShadowsSetAircraftMode(enable)",
  "mp.game.graphics.cascadeShadowsSetEntityTrackerScale(scale)",
  "mp.game.graphics.cascadeShadowsSetDynamicDepthValue(distance)",
  "mp.game.graphics.cascadeShadowsSetShadowSampleType(type)",
  "mp.game.graphics.cascadeShadowsSetDynamicDepthMode(enable)",
  "mp.game.graphics.disableScreenblurFade()",
  "mp.game.graphics.doesVehicleHaveCrewEmblem(vehicle, p1)",
  "mp.game.graphics.disableScriptAmbientEffects(p0)",
  "mp.game.graphics.clearTimecycleModifier()",
  "mp.game.graphics.clearExtraTimecycleModifier()",
  "mp.game.graphics.callScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5)",
  "mp.game.graphics.callScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5)",
  "mp.game.graphics.callScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5)",
  "mp.game.graphics.beginScaleformScriptHudMovieMethod(hudComponent, methodName)",
  "mp.game.graphics.beginTextCommandScaleformString(componentType)",
  "mp.game.graphics.doesLatestBriefStringExist(type)",
  "mp.game.graphics.clearTvChannelPlaylist(tvChannel)",
  "mp.game.graphics.createEntityOverlayBatch(overlayParams)",
  "mp.game.graphics.enableClownBloodVfx(toggle);",
  "mp.game.graphics.drawScaleformMovieFullscreenMasked(scaleform1, scaleform2, red, green, blue, alpha);",
  "mp.game.graphics.drawSpotLight(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff);",
  "mp.game.graphics.drawTvChannel(xPos, yPos, xScale, yScale, rotation, r, g, b, alpha);",
  "mp.game.graphics.drawLightWithRange(posX, posY, posZ, colorR, colorG, colorB, range, intensity);",
  "mp.game.graphics.fadeDecalsInRange(p0, p1, p2, p3, p4);",
  "mp.game.graphics.drawLightWithRangeAndShadow(x, y, z, r, g, b, range, intensity, shadow);",
  "mp.game.graphics.getDecalWashLevel(decal);",
  "mp.game.graphics.drawSprite(textureDict, textureName, screenX, screenY, scaleX, scaleY, heading, colorR, colorG, colorB, alpha);",
  "mp.game.graphics.drawScaleformMovie3dNonAdditive(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13);",
  "mp.game.graphics.enableMovieSubtitles(toggle);",
  "mp.game.graphics.drawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha)",
  "mp.game.graphics.drawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, r, g, b, alpha);",
  "mp.game.graphics.drawSpotLightWithShadow(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadow);",
  "mp.game.graphics.drawScaleformMovie(scaleformHandle, x, y, width, height, red, green, blue, alpha, p9);",
  "mp.game.graphics.drawScaleformMovieFullscreen(scaleform, red, green, blue, alpha, unk);",
  "mp.game.graphics.drawScaleformMovie3d(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13);",
  "mp.game.graphics.enableAlienBloodVfx(toggle);",
  "mp.game.graphics.drawSpritePoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3)",
  "mp.game.graphics.drawSpritePoly2(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3)",
  "mp.game.graphics.freeMemoryForMissionCreatorPhoto()",
  "mp.game.graphics.freeMemoryForHighQualityPhoto()",
  "mp.game.graphics.freeMemoryForLowQualityPhoto()",
  "mp.game.graphics.drawLowQualityPhotoToPhone(p0, p1)",
  "mp.game.graphics.getCurrentNumberOfCloudPhotos()",
  "mp.game.graphics.fadeUpPedLight(seconds)",
  "mp.game.graphics.drawSphere(x, y, z, radius, red, green, blue, alpha)",
  "mp.game.graphics.forceRenderInGameUi(toggle)",
  "mp.game.graphics.drawInteractiveSprite(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha)",
  "mp.game.graphics.drawSpriteUv(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha)",
  "mp.game.graphics.getBinkMovieTime(binkMovie)",
  "mp.game.graphics.getActiveScreenResolution()",
  "mp.game.graphics.getAspectRatio(b)",
  "mp.game.graphics.getIsWidescreen()",
  "mp.game.graphics.getIsHidef()",
  "mp.game.graphics.endPetrolTrailDecals()",
  "mp.game.graphics.getIsPetrolDecalInRange(xCoord, yCoord, zCoord, radius)",
  "mp.game.graphics.getExtraTimecycleModifierIndex()",
  "mp.game.graphics.drawScaleformMovie3D(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13)",
  "mp.game.graphics.drawScaleformMovie3DSolid(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13)",
  "mp.game.graphics.endScaleformMovieMethod()",
  "mp.game.graphics.endScaleformMovieMethodReturnValue()",
  "mp.game.graphics.endTextCommandScaleformString()",
  "mp.game.graphics.endTextComponent()",
  "mp.game.graphics.endTextCommandScaleformString2()",
  "mp.game.graphics.enableMovieKeyframeWait(toggle)",
  "mp.game.graphics.hasHudScaleformLoaded(hudComponent);",
  "mp.game.graphics.getScreenAspectRatio(b);",
  "mp.game.graphics.hasNamedScaleformMovieLoaded(scaleformName);",
  "mp.game.graphics.hasStreamedTextureDictLoaded(textureDict);",
  "mp.game.graphics.getScreenResolution(x, y);",
  "mp.game.graphics.hasScaleformContainerMovieLoadedIntoParent(scaleformHandle);",
  "mp.game.graphics.getTextureResolution(textureDict, textureName);",
  "mp.game.graphics.getScreenEffectIsActive(effectName);",
  "mp.game.graphics.hasScaleformMovieLoaded(scaleformHandle);",
  "mp.game.graphics.isDecalAlive(decal);",
  "mp.game.graphics.getLightsState(lightId);",
  "mp.game.graphics.getStatusOfTakeMissionCreatorPhoto()",
  "mp.game.graphics.getStatusOfLoadMissionCreatorPhoto()",
  "mp.game.graphics.getStatusOfTakeHighQualityPhoto()",
  "mp.game.graphics.getStatusOfSaveHighQualityPhoto()",
  "mp.game.graphics.getMaximumNumberOfPhotos()",
  "mp.game.graphics.getMaximumNumberOfCloudPhotos()",
  "mp.game.graphics.getStatusOfSortedListOperation(p0)",
  "mp.game.graphics.getScriptGfxPosition(x, y)",
  "mp.game.graphics.getSafeZoneSize()",
  "mp.game.graphics.getRequestingnightvision()",
  "mp.game.graphics.getUsingnightvision()",
  "mp.game.graphics.getScreenCoordFromWorldCoord(worldX, worldY, worldZ)",
  "mp.game.graphics.grassLodResetScriptAreas()",
  "mp.game.graphics.grassLodShrinkScriptAreas(x, y, z, radius, p4, p5, p6)",
  "mp.game.graphics.golfTrailSetEnabled(toggle)",
  "mp.game.graphics.golfTrailSetPath(x1, y1, z1, x2, y2, z2, scale, idx, ascending)",
  "mp.game.graphics.golfTrailSetTessellation(p0, p1)",
  "mp.game.graphics.golfTrailSetFixedControlPoint(type, xPos, yPos, zPos, p4, red, green, blue, alpha)",
  "mp.game.graphics.golfTrailSetRadius(p0, p1, p2)",
  "mp.game.graphics.golfTrailSetColour(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)",
  "mp.game.graphics.golfTrailSetShaderParams(p0, p1, p2, p3, p4)",
  "mp.game.graphics.golfTrailSetFacing(p0)",
  "mp.game.graphics.golfTrailGetMaxHeight()",
  "mp.game.graphics.golfTrailGetVisualControlPoint(p0)",
  "mp.game.graphics.getUsingseethrough()",
  "mp.game.graphics.getScreenblurFadeCurrentTime()",
  "mp.game.graphics.getTogglePausedRenderphasesStatus()",
  "mp.game.graphics.getVehicleCrewEmblemRequestState(vehicle, p1)",
  "mp.game.graphics.getTimecycleModifierIndex()",
  "mp.game.graphics.getTimecycleTransitionModifierIndex()",
  "mp.game.graphics.hasScaleformMovieFilenameLoaded(scaleformName)",
  "mp.game.graphics.getScaleformMovieMethodReturnValueInt(methodReturn)",
  "mp.game.graphics.getScaleformMovieMethodReturnValueBool(methodReturn)",
  "mp.game.graphics.getScaleformMovieMethodReturnValueString(methodReturn)",
  "mp.game.graphics.hasScaleformScriptHudMovieLoaded(hudComponent)",
  "mp.game.graphics.getTvChannel()",
  "mp.game.graphics.getTvVolume()",
  "mp.game.graphics.isPlaylistUnk(tvChannel, p1)",
  "mp.game.graphics.pushScaleformMovieFunctionParameterFloat(value);",
  "mp.game.graphics.removeParticleFxInRange(X, Y, Z, radius);",
  "mp.game.graphics.removeDecal(decal);",
  "mp.game.graphics.releaseMovieMeshSet(movieMeshSet);",
  "mp.game.graphics.pushScaleformMovieFunctionParameterString(value);",
  "mp.game.graphics.pushScaleformMovieFunction(scaleform, functionName);",
  "mp.game.graphics.removeDecalsFromObject(obj);",
  "mp.game.graphics.pushScaleformMovieFunctionParameterInt(value);",
  "mp.game.graphics.pushScaleformMovieFunctionFromHudComponent(hudComponent, functionName);",
  "mp.game.graphics.loadTvChannel(tvChannel);",
  "mp.game.graphics.requestScaleformMovie(scaleformName);",
  "mp.game.graphics.removeDecalsInRange(x, y, z, range);",
  "mp.game.graphics.moveVehicleDecals(p0, p1);",
  "mp.game.graphics.requestHudScaleform(hudComponent);",
  "mp.game.graphics.removeDecalsFromObjectFacing(obj, x, y, z);",
  "mp.game.graphics.pushScaleformMovieFunctionN(functionName);",
  "mp.game.graphics.loadMovieMeshSet(movieMeshSetName);",
  "mp.game.graphics.requestScaleformMovie3(scaleformName);",
  "mp.game.graphics.removeParticleFx(ptfxHandle, p1);",
  "mp.game.graphics.isTrackedPointVisible(point);",
  "mp.game.graphics.pushScaleformMovieFunctionParameterBool(value);",
  "mp.game.graphics.registerTextFontId(name);",
  "mp.game.graphics.removeWorldTextureSwap(oldTextureDict, oldTextureName);",
  "mp.game.graphics.loadMissionCreatorPhoto(p1, p2, p3)",
  "mp.game.graphics.playBinkMovie(binkMovie)",
  "mp.game.graphics.releaseBinkMovie(binkMovie)",
  "mp.game.graphics.queryMovieMeshSetState(meshsetid)",
  "mp.game.graphics.overridePedBadgeTexture(ped, txd, txn)",
  "mp.game.graphics.isScreenblurFadeRunning()",
  "mp.game.graphics.removeParticleFxFromEntity(entity)",
  "mp.game.graphics.removeDecalsFromVehicle(vehicle)",
  "mp.game.graphics.patchDecalDiffuseMap(decalType, textureDict, textureName)",
  "mp.game.graphics.removeVehicleCrewEmblem(vehicle, p1)",
  "mp.game.graphics.overrideInteriorSmokeName(name)",
  "mp.game.graphics.overrideInteriorSmokeLevel(level)",
  "mp.game.graphics.overrideInteriorSmokeEnd()",
  "mp.game.graphics.registerNoirScreenEffectThisFrame()",
  "mp.game.graphics.presetInteriorAmbientCache(timecycleModifierName)",
  "mp.game.graphics.pushTimecycleModifier()",
  "mp.game.graphics.popTimecycleModifier()",
  "mp.game.graphics.removeTcmodifierOverride(p0)",
  "mp.game.graphics.requestScaleformMovie2(scaleformName)",
  "mp.game.graphics.popScaleformMovieFunctionVoid()",
  "mp.game.graphics.popScaleformMovieFunction()",
  "mp.game.graphics.isScaleformMovieMethodReturnValueReady(methodReturn)",
  "mp.game.graphics.removeScaleformScriptHudMovie(hudComponent)",
  "mp.game.graphics.isTvPlaylistItemPlaying(videoCliphash)",
  "mp.game.graphics.requestStreamedTextureDict(textureDict, p1);",
  "mp.game.graphics.setDrawOrigin(x, y, z, p3);",
  "mp.game.graphics.requestScaleformMovieInstance(scaleformName);",
  "mp.game.graphics.setBlackout(enable);",
  "mp.game.graphics.setDebugLinesAndSpheresDrawingActive(enabled);",
  "mp.game.graphics.set2dLayer(layer);",
  "mp.game.graphics.screen2dToWorld3d(coords2d);",
  "mp.game.graphics.resetWorldTextureSwaps();",
  "mp.game.graphics.resetLightsState();",
  "mp.game.graphics.setBackfaceculling(toggle)",
  "mp.game.graphics.saveHighQualityPhoto(unused)",
  "mp.game.graphics.returnTwo(p0)",
  "mp.game.graphics.setCheckpointIconScale(checkpoint, scale)",
  "mp.game.graphics.setCheckpointCylinderHeight(checkpoint, nearHeight, farHeight, radius)",
  "mp.game.graphics.setCheckpointScale(checkpoint, p0)",
  "mp.game.graphics.setCheckpointRgba(checkpoint, red, green, blue, alpha)",
  "mp.game.graphics.setCheckpointRgba2(checkpoint, red, green, blue, alpha)",
  "mp.game.graphics.resetScriptGfxAlign()",
  "mp.game.graphics.setBinkMovie(name)",
  "mp.game.graphics.setBinkMovieTime(binkMovie, progress)",
  "mp.game.graphics.setBinkMovieVolume(binkMovie, value)",
  "mp.game.graphics.setBinkMovieUnk2(binkMovie, p1)",
  "mp.game.graphics.setBinkShouldSkip(binkMovie, bShouldSkip)",
  "mp.game.graphics.setArtificialLightsState(state)",
  "mp.game.graphics.setArtificialLightsStateAffectsVehicles(toggle)",
  "mp.game.graphics.seethroughReset()",
  "mp.game.graphics.seethroughSetFadeStartDistance(distance)",
  "mp.game.graphics.seethroughSetFadeEndDistance(distance)",
  "mp.game.graphics.seethroughGetMaxThickness()",
  "mp.game.graphics.seethroughSetMaxThickness(thickness)",
  "mp.game.graphics.seethroughSetNoiseAmountMin(amount)",
  "mp.game.graphics.seethroughSetNoiseAmountMax(amount)",
  "mp.game.graphics.seethroughSetHiLightIntensity(intensity)",
  "mp.game.graphics.seethroughSetHiLightNoise(noise)",
  "mp.game.graphics.seethroughSetHeatscale(index, heatScale)",
  "mp.game.graphics.seethroughSetColorNear(red, green, blue)",
  "mp.game.graphics.resetPausedRenderphases()",
  "mp.game.graphics.resetParticleFxOverride(name)",
  "mp.game.graphics.setDisableDecalRenderingThisFrame()",
  "mp.game.graphics.setCurrentPlayerTcmodifier(modifierName)",
  "mp.game.graphics.resetExtraTimecycleModifierStrength()",
  "mp.game.graphics.requestScaleformMovieInteractive(scaleformName)",
  "mp.game.graphics.scaleformMovieMethodAddParamInt(value)",
  "mp.game.graphics.scaleformMovieMethodAddParamFloat(value)",
  "mp.game.graphics.scaleformMovieMethodAddParamBool(value)",
  "mp.game.graphics.scaleformMovieMethodAddParamTextureNameString2(string)",
  "mp.game.graphics.scaleformMovieMethodAddParamTextureNameString(string)",
  "mp.game.graphics.scaleformMovieMethodAddParamPlayerNameString(string)",
  "mp.game.graphics.scaleformMovieMethodAddParamLatestBriefString(value)",
  "mp.game.graphics.requestScaleformScriptHudMovie(hudComponent)",
  "mp.game.graphics.setPtfxAssetOldToNew(oldAsset, newAsset);",
  "mp.game.graphics.setParticleFxCamInsideVehicle(p0);",
  "mp.game.graphics.setStreamedTextureDictAsNoLongerNeeded(textureDict);",
  "mp.game.graphics.setParticleFxLoopedOffsets(ptfxHandle, x, y, z, rotX, rotY, rotZ);",
  "mp.game.graphics.setPtfxAssetNextCall(name);",
  "mp.game.graphics.setParticleFxLoopedScale(ptfxHandle, scale);",
  "mp.game.graphics.setNoisinessoveride(value);",
  "mp.game.graphics.setScaleformMovieToUseSystemTime(scaleform, toggle);",
  "mp.game.graphics.setTrackedPointInfo(point, x, y, z, radius);",
  "mp.game.graphics.setParticleFxNonLoopedColour(r, g, b);",
  "mp.game.graphics.setNightvision(toggle);",
  "mp.game.graphics.setParticleFxBloodScale(scale);",
  "mp.game.graphics.setParticleFxBloodScale(5.0);",
  "mp.game.graphics.setSeethrough(toggle);",
  "mp.game.graphics.setTvChannel(channel);",
  "mp.game.graphics.setScaleformMovieAsNoLongerNeeded(scaleformHandle);",
  "mp.game.graphics.setFlash(p0, p1, fadeIn, duration, fadeOut);",
  "mp.game.graphics.setTvAudioFrontend(toggle);",
  "mp.game.graphics.setForceVehicleTrails(toggle);",
  "mp.game.graphics.setParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, Id);",
  "mp.game.graphics.setParticleFxLoopedAlpha(ptfxHandle, alpha);",
  "mp.game.graphics.setParticleFxNonLoopedAlpha(alpha);",
  "mp.game.graphics.setParticleFxLoopedColour(ptfxHandle, r, g, b, p4);",
  "mp.game.graphics.setFarShadowsSuppressed(toggle);",
  "mp.game.graphics.setTimecycleModifierStrength(strength);",
  "mp.game.graphics.setParticleFxShootoutBoat(p0);",
  "mp.game.graphics.setParticleFxCamInsideNonplayerVehicle(p0, p1);",
  "mp.game.graphics.setForcePedFootstepsTracks(toggle);",
  "mp.game.graphics.setScreenDrawPosition(x, y);",
  "mp.game.graphics.setParticleFxLoopedRange(ptfxHandle, range);",
  "mp.game.graphics.setFrozenRenderingDisabled(enabled);",
  "mp.game.graphics.setNoiseoveride(toggle);",
  "mp.game.graphics.setLightsState(lightid, disable);",
  "mp.game.graphics.setLightsState(1, true);",
  "mp.game.graphics.setScriptGfxDrawBehindPausemenu(toggle)",
  "mp.game.graphics.setScriptGfxDrawOrder(drawOrder)",
  "mp.game.graphics.setScriptGfxAlign(horizontalAlign, verticalAlign)",
  "mp.game.graphics.setScriptGfxAlignParams(x, y, w, h)",
  "mp.game.graphics.setEntityIconVisibility(entity, toggle)",
  "mp.game.graphics.setEntityIconColor(entity, red, green, blue, alpha)",
  "mp.game.graphics.setHidofEnvBlurParams(p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn)",
  "mp.game.graphics.setParticleFxLoopedFarClipDist(ptfxHandle, range)",
  "mp.game.graphics.setParticleFxOverride(oldAsset, newAsset)",
  "mp.game.graphics.setPlayerTcmodifierTransition(value)",
  "mp.game.graphics.setNextPlayerTcmodifier(modifierName)",
  "mp.game.graphics.setExtraTimecycleModifier(modifierName)",
  "mp.game.graphics.setExtraTimecycleModifierStrength(strength)",
  "mp.game.graphics.setScaleformFitRendertarget(scaleformHandle, toggle)",
  "mp.game.graphics.setEntityOverlayPassEnabled(enable);",
  "mp.game.graphics.startParticleFxNonLoopedOnEntity2(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);",
  "mp.game.graphics.startParticleFxLoopedOnEntityBone2(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);",
  "mp.game.graphics.startParticleFxLoopedAtCoord(effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);",
  "mp.game.graphics.transitionFromBlurred(transitionTime);",
  "mp.game.graphics.washDecalsInRange(p0, p1, p2, p3, p4);",
  "mp.game.graphics.sittingTv(scaleform);",
  "mp.game.graphics.startParticleFxNonLoopedAtCoord2(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);",
  "mp.game.graphics.startScreenEffect(effectName, duration, looped);",
  "mp.game.graphics.transitionToBlurred(transitionTime);",
  "mp.game.graphics.startParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);",
  "mp.game.graphics.startParticleFxNonLoopedOnPedBone2(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);",
  "mp.game.graphics.stopScreenEffect(effectName);",
  "mp.game.graphics.startParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);",
  "mp.game.graphics.startParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);",
  "mp.game.graphics.startParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);",
  "mp.game.graphics.setTvVolume(volume);",
  "mp.game.graphics.world3dToScreen2d(new mp.Vector3(worldX, worldY, worldZ));",
  "mp.game.graphics.startParticleFxLoopedOnEntity2(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);",
  "mp.game.graphics.stopParticleFxLooped(ptfxHandle, p1);",
  "mp.game.graphics.startParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);",
  "mp.game.graphics.startParticleFxLoopedOnPedBone(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);",
  "gui.takeScreenshot(name, type, quality, compQuality);",
  "mp.gui.takeScreenshot(\"random.png\", 1, 100, 0);",
  "mp.events.add(\"guiReady\", eventHandler);",
  "mp.gui.isGpuRenderingEnabled();",
  "mp.game.graphics.updateLightsOnEntity(entity)",
  "mp.game.graphics.stopBinkMovie(binkMovie)",
  "mp.game.graphics.togglePlayerDamageOverlay(enable)",
  "mp.game.graphics.triggerScreenblurFadeIn(transitionTime)",
  "mp.game.graphics.triggerScreenblurFadeOut(transitionTime)",
  "mp.game.graphics.togglePausedRenderphases(toggle)",
  "mp.game.graphics.startNetworkedParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11)",
  "mp.game.graphics.startNetworkedParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ)",
  "mp.game.graphics.startNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ)",
  "mp.game.graphics.startNetworkedParticleFxNonLoopedOnEntityBone(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ)",
  "mp.game.graphics.startNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p12, p13, p14, p15)",
  "mp.game.graphics.startNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, p13, p14, p15, p16)",
  "mp.game.graphics.useParticleFxAsset(name)",
  "mp.game.graphics.washDecalsFromVehicle(vehicle, p1)",
  "mp.game.graphics.startPetrolTrailDecals(p0)",
  "mp.game.graphics.unpatchDecalDiffuseMap(decalType)",
  "mp.game.graphics.setTvChannelPlaylist(tvChannel, playlistName, restart)",
  "mp.game.graphics.setTvChannelPlaylistAtHour(tvChannel, playlistName, hour)",
  "mp.game.graphics.ui3DsceneIsAvailable()",
  "mp.game.graphics.ui3DscenePushPreset(presetName)",
  "mp.game.graphics.terraingridActivate(toggle)",
  "mp.game.graphics.terraingridSetParams(x, y, z, p3, rotation, p5, width, height, p8, scale, glowIntensity, normalHeight, heightDiff)",
  "mp.game.graphics.terraingridSetColours(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha)",
  "mp.game.graphics.stopAllScreenEffects()",
  "mp.game.interior.disableInterior(interiorID, toggle);",
  "mp.game.interior.hideMapObjectThisFrame(mapObjectHash);",
  "mp.game.interior.getOffsetFromInteriorInWorldCoords(interiorID, x, y, z);",
  "mp.game.interior.getInteriorFromCollision(x, y, z);",
  "mp.game.interior.areCoordsCollidingWithExterior(x, y, z);",
  "mp.game.interior.addPickupToInteriorRoomByName(pickup, roomName);",
  "mp.game.interior.capInterior(interiorID, toggle);",
  "mp.game.interior.unkGetInteriorAtCoords(x, y, z, unk);",
  "mp.game.interior.isValidInterior(interiorID);",
  "mp.game.interior.refreshInterior(interiorID);",
  "mp.game.interior.isInteriorReady(interiorID);",
  "mp.game.interior.isInteriorDisabled(interiorID);",
  "mp.game.interior.getInteriorAtCoordsWithType(x, y, z, interiorType);",
  "mp.game.interior.unpinInterior(interiorID);",
  "mp.game.interior.isInteriorCapped(interiorID);",
  "mp.game.interior.getInteriorAtCoords(x, y, z);",
  "mp.game.interior.getInteriorGroupId(interiorID);",
  "mp.game.itemset.cleanItemset(p0);",
  "mp.game.itemset.createItemset(p0);",
  "mp.game.itemset.getIndexedItemInItemset(p0, p1);",
  "mp.game.itemset.isItemsetValid(p0);",
  "mp.game.itemset.addToItemset(p0, p1);",
  "mp.game.itemset.getItemsetSize(p0);",
  "mp.game.itemset.isInItemset(p0, p1);",
  "mp.game.itemset.removeFromItemset(p0, p1);",
  "mp.game.itemset.destroyItemset(p0);",
  "mp.game.zone.getNameOfZone(x, y, z);",
  "marker.colour();",
  "mp.game.mobile.setMobilePhonePosition(posX, posY, posZ);",
  "mp.game.mobile.setMobilePhoneRotation(rotX, rotY, rotZ, p3);",
  "mp.game.mobile.setMobilePhoneScale(scale);",
  "mp.game.mobile.setPhoneLean(Toggle);",
  "mp.game.mobile.scriptIsMovingMobilePhoneOffscreen(toggle);",
  "mp.game.mobile.getMobilePhoneRenderId(renderId);",
  "mp.game.mobile.getMobilePhoneRotation(rotation, p1);",
  "mp.game.player.getPed();",
  "marker.getColor();",
  "marker.setColor(r, g, b, a);",
  "mp.events.add('meleeActionDamage', (source, target, weaponHash, damage, isCritical) => {});",
  "mp.nametags.enabled();",
  "mp.nametags.orderByDistance();",
  "mp.game.networkcash.networkEarnFromRockstar(amount);",
  "mp.game.networkcash.networkEarnFromBounty(amount, playerHandle, p2, p3);",
  "mp.game.networkcash.networkReceivePlayerJobshareCash(amount, );",
  "mp.game.networkcash.networkSpentBetting(p0, p1, p2, p3, p4);",
  "mp.game.networkcash.networkCanReceivePlayerCash(p0, p1, p2, p3);",
  "mp.game.networkcash.networkEarnFromProperty(amount, propertyName);",
  "mp.game.networkcash.networkBuyItem(itemp2p3p4item_namep6p7p8p9);",
  "mp.game.networkcash.networkBuyBounty(amount, victim, p2, p3);",
  "mp.game.networkcash.networkCanBet(p0);",
  "mp.game.networkcash.networkSpentCarwash(p0, p1, p2, p3, p4);",
  "mp.game.networkcash.networkEarnFromCrateDrop(amount);",
  "mp.game.networkcash.networkGivePlayerJobshareCash(amount, );",
  "mp.game.networkcash.networkBuyAirstrike(cost, p1, p2);",
  "mp.game.networkcash.networkSpentBuyOfftheradar(p0, p1, p2);",
  "mp.game.networkcash.networkSpentAmmoDrop(p0, p1, p2);",
  "mp.game.networkcash.networkBuyHeliStrike(cost, p1, p2);",
  "mp.game.networkcash.networkEarnFromBetting(amount, p1);",
  "mp.game.networkcash.networkSpentHoldups(p0, p1, p2);",
  "mp.game.networkcash.networkEarnFromVehicle(p0, p1, p2, p3, p4, p5, p6, p7);",
  "mp.game.networkcash.networkBuyHealthcare(cost, p1, p2);",
  "mp.game.networkcash.networkSpentArrestBail(p0, p1, p2);",
  "mp.game.networkcash.networkSpentBuyPassiveMode(p0, p1, p2);",
  "mp.game.networkcash.networkRefundCash(index, context, reason, unk);",
  "mp.game.networkcash.networkSpentHireMugger(p0, p1, p2);",
  "mp.game.networkcash.hasItemBeenUnlocked(p0, p1, p2, p3, p4);",
  "mp.game.networkcash.networkSpentPayVehicleInsurancePremium(p0, VehicleModel, p2, p3, p4);",
  "mp.game.networkcash.networkSpentHireMercenary(p0, p1, p2);",
  "mp.game.networkcash.networkSpentTaxi(amount, p1, p2);",
  "mp.game.networkcash.networkSpentCashDrop(p0, p1, p2);",
  "mp.game.networkcash.networkSpentBounty(p0, p1, p2);",
  "mp.game.networkcash.networkInitializeCash(p0, p1);",
  "mp.game.networkcash.networkEarnFromHoldups(amount);",
  "mp.game.networkcash.networkSpentBoatPickup(p0, p1, p2);",
  "mp.game.networkcash.networkBuyProperty(propertyCost, propertyName, p2, p3);",
  "mp.game.networkcash.networkSpentCinema(p0, p1, p2, p3);",
  "mp.game.networkcash.networkSpentBuyRevealPlayers(p0, p1, p2);",
  "mp.game.networkcash.networkSpentHeliPickup(p0, p1, p2);",
  "mp.game.networkcash.networkSpentTelescope(p0, p1, p2);",
  "mp.game.networkcash.networkSpentBullShark(p0, p1, p2);",
  "mp.game.networkcash.networkSpentCallPlayer(p0, p1, p2, p3);",
  "mp.game.networkcash.networkSpentProstitutes(p0, p1, p2);",
  "mp.game.networkcash.networkSpentBuyWantedlevel(p0, p1, p2, p3);",
  "mp.game.networkcash.networkEarnFromPickup(amount);",
  "mp.game.networkcash.networkEarnFromBag(amount);",
  "mp.game.networkcash.networkEarnFromImportExport(p0, p1);",
  "mp.network.startBatch();",
  "mp.network.endBatch();",
  "mp.nametags.useScreen2dCoords();",
  "mp.game.networkcash.processCashGift(p0, p1, p2);",
  "mp.game.object.doesDoorExist(doorHash);",
  "mp.game.object.createAmbientPickup(pickupHash, posX, posY, posZ, p4, value, modelHash, p7, p8);",
  "mp.game.object.createPickup(pickupHash, posX, posY, posZ, p4, value, p6, modelHash);",
  "mp.game.object.addDoorToSystem(doorHash, modelHash, x, y, z, p5, p6, p7);",
  "mp.game.object.createPortablePickup2(pickupHash, x, y, z, placeOnGround, modelHash);",
  "mp.game.object.createPortablePickup(pickupHash, x, y, z, placeOnGround, modelHash);",
  "mp.game.object.createMoneyPickups(x, y, z, value, amount, model);",
  "mp.game.object.createObject(modelHash, x, y, z, networkHandle, createHandle, dynamic);",
  "mp.game.object.createPickupRotate(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, placementFlag, amount, rotOrder, hostObject, modelHash);",
  "mp.game.object.createObjectNoOffset(modelHash, x, y, z, networkHandle, createHandle, dynamic);",
  "mp.game.object.doorControl(doorHash, x, y, z, locked, p5, p6, p7);",
  "mp.game.object.doesPickupExist(p0);",
  "mp.game.object.doesObjectOfTypeExistAtCoords(x, y, z, radius, hash, p5);",
  "mp.game.object.doesPickupObjectExist(p0);",
  "mp.game.object.create(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic)",
  "mp.game.object.createNoOffset(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic)",
  "mp.game.object.doorSystemSetDoorState(doorHash, state, requestDoor, forceUpdate)",
  "mp.game.object.doorSystemGetDoorState(doorHash)",
  "mp.game.object.doorSystemGetDoorPendingState(doorHash)",
  "mp.game.object.doorSystemSetAutomaticRate(doorHash, rate, requestDoor, forceUpdate)",
  "mp.game.object.doorSystemSetAutomaticDistance(doorHash, distance, requestDoor, forceUpdate)",
  "mp.game.object.doorSystemSetOpenRatio(doorHash, ajar, requestDoor, forceUpdate)",
  "mp.game.object.doorSystemGetAutomaticDistance(doorHash)",
  "mp.game.object.doorSystemGetOpenRatio(doorHash)",
  "mp.game.object.doorSystemSetHoldOpen(doorHash, toggle)",
  "mp.game.object.doorSystemSetSpringRemoved(doorHash, removed, requestDoor, forceUpdate)",
  "mp.game.object.doorSystemGetIsPhysicsLoaded(p0)",
  "mp.game.object.doorSystemFindExistingDoor(x, y, z, modelHash)",
  "mp.game.object.areEntitiesEntirelyInsideGarage(garageHash, p1, p2, p3, p4)",
  "mp.game.object.clearGarageArea(garageHash, isNetwork)",
  "mp.game.object.clearObjectsInsideGarage(garage, vehicles, peds, objects, broadcast?)",
  "mp.game.object.enableSavingInGarage(garageHash, toggle)",
  "mp.game.object.doesOfTypeExistAtCoords(x, y, z, radius, hash, p5)",
  "mp.game.object.breakFragmentChild(p0, p1, p2)",
  "mp.game.object.doesRayfireMapExist(object)",
  "mp.game.object.createNonNetworkedAmbientPickup(type, x, y, z, flags?, amount?, customModel?, scriptedObject?, hostObject?)",
  "mp.game.object.createNonNetworkedPortablePickup(type, x, y, z, snaptoGround?, customModel?)",
  "mp.game.object.attachPortablePickupToPed(pickupObject, ped)",
  "mp.game.object.detachPortablePickupFromPed(pickupObject)",
  "mp.game.object.doesPickupOfTypeExistInArea(pickupHash, x, y, z, radius)",
  "mp.game.object.forcePickupRegenerate(p0)",
  "mp.game.object.hasClosestObjectOfTypeBeenBroken(p0, p1, p2, p3, modelHash, p5);",
  "mp.game.object.getPickupCoords(p0);",
  "mp.game.object.isObjectNearPoint(objectHash, x, y, z, range);",
  "mp.game.object.getSafePickupCoords(x, y, z, p3, p4);",
  "mp.game.object.highlightPlacementCoords(x, y, z, colorIndex);",
  "mp.game.object.getObjectOffsetFromCoords(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset);",
  "mp.game.object.isPointInAngledArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);",
  "mp.game.object.isAnyObjectNearPoint(x, y, z, range, p4);",
  "mp.game.object.hasPickupBeenCollected(p0);",
  "mp.game.object.isGarageEmpty(garage, p1, p2);",
  "mp.game.object.getObjectFragmentDamageHealth(p0, p1);",
  "mp.game.object.isDoorClosed(door);",
  "mp.game.object.getClosestObjectOfType(x, y, z, radius, modelHash, isMission, p6, p7);",
  "mp.game.object.getStateOfClosestDoorOfType(type, x, y, z, locked, heading);",
  "mp.game.object.isPickupWithinRadius(pickupHash, x, y, z, radius);",
  "object.getPickup();",
  "object.hasBeenBroken();",
  "object.isVisible();",
  "mp.game.object.getClosestOfType(x, y, z, radius, modelHash, isMission, p6, p7)",
  "mp.game.object.hasClosestOfTypeBeenBroken(p0, p1, p2, p3, modelHash, p5)",
  "mp.game.object.getOffsetFromCoords(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset)",
  "mp.game.object.getCoordsAndRotationOfClosestOfType(x, y, z, radius, modelHash, rotationOrder)",
  "mp.game.object.isDoorRegisteredWithSystem(doorHash)",
  "mp.game.object.isPlayerEntirelyInsideGarage(garageHash, player, p2, p3)",
  "mp.game.object.isPlayerPartiallyInsideGarage(garageHash, player, p2)",
  "mp.game.object.isAnyEntityEntirelyInsideGarage(garageHash, p1, p2, p3, p4)",
  "mp.game.object.isEntirelyInsideGarage(garageHash, entity, p2, p3)",
  "mp.game.object.isPartiallyInsideGarage(garageHash, entity, p2)",
  "mp.game.object.getFragmentDamageHealth(p0, p1)",
  "mp.game.object.isAnyNearPoint(x, y, z, range, p4)",
  "mp.game.object.isNearPoint(objectHash, x, y, z, range)",
  "mp.game.object.getRayfireMap(x, y, z, radius, name)",
  "mp.game.object.getStateOfRayfireMap(object)",
  "mp.game.object.getRayfireMapAnimPhase(object)",
  "mp.game.object.hidePickup(pickupObject, toggle)",
  "mp.game.object.isAPortablePickup(object)",
  "mp.game.object.isAPickup(object)",
  "mp.game.object.getPickupGenerationRangeMultiplier()",
  "mp.game.object.getWeaponTypeFromPickupType(pickupHash)",
  "mp.game.object.getPickupHashFromWeapon(weaponHash)",
  "mp.game.object.isPickupWeaponValid(object)",
  "mp.game.object.getTextureVariation(object)",
  "mp.game.object.getPickupHash(pickupHash)",
  "mp.game.object.getIsArenaPropPhysicsDisabled(object, p1)",
  "mp.game.object.getAllByHash(hash)",
  "mp.game.object.setForceObjectThisFrame(p0, p1, p2, p3);",
  "mp.game.object.removeAllPickupsOfType(pickupHash);",
  "mp.game.object.setDoorAjarAngle(doorHash, ajar, p2, p3);",
  "mp.game.object.removePickup(pickup);",
  "mp.game.object.removeDoorFromSystem(doorHash);",
  "mp.game.object.setTeamPickupObject(p0, p1, p2);",
  "mp.game.object.setDoorAccelerationLimit(doorHash, limit, p2, p3);",
  "mp.game.object.setPickupRegenerationTime(Pickup, Duration);",
  "mp.game.object.trackObjectVisibility(p0);",
  "mp.game.object.setStateOfClosestDoorOfType(type, x, y, z, locked, heading, p6);",
  "object.slide(toX, toY, toZ, speedX, speedY, speedZ, collision);",
  "object.setActivatePhysicsAsSoonAsItIsUnfrozen(toggle);",
  "object.placeOnGroundProperly();",
  "object.setTargettable(targettable);",
  "object.setPhysicsParams(weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);",
  "mp.game.object.placeOnGroundProperly2(object)",
  "mp.game.object.setForceVehiclesToAvoid(object, enable)",
  "mp.game.object.setAllowLowLodBuoyancy(object, toggle)",
  "mp.game.object.removeHighDetailModel(object)",
  "mp.game.object.trackVisibility(object)",
  "mp.game.object.setUnkGlobalBoolRelatedToDamage(value)",
  "mp.game.object.setCreateWeaponLightSource(object, toggle)",
  "mp.game.object.setStateOfRayfireMap(object, state)",
  "mp.game.object.setMaxNumPortablePickupsCarriedByPlayer(modelHash, p1)",
  "mp.game.object.setLocalPlayerCanCollectPortablePickups(p0)",
  "mp.game.object.toggleUsePickupsForPlayer(player, pickupHash, toggle)",
  "mp.game.object.setLocalPlayerCanUsePickupsWithThisModel(modelHash, toggle)",
  "mp.game.object.setTeamPickup(object, p1, p2)",
  "mp.game.object.preventCollectionOfPortablePickup(object, p1, p2)",
  "mp.game.object.setPickupGenerationRangeMultiplier(multiplier)",
  "mp.game.object.setPickupUncollectable(p0, p1)",
  "mp.game.object.setPickupHiddenWhenUncollectable(p0, p1)",
  "mp.game.object.renderFakePickupGlow(x, y, z, colorIndex)",
  "mp.game.object.setTextureVariation(object, textureVariation)",
  "mp.game.object.setTextureVariationOfClosestOfType(x, y, z, radius, modelHash, textureVariation)",
  "mp.game.object.setLightColor(object, p1, r, g, b)",
  "mp.game.object.setStuntPropSpeedup(object, p1)",
  "mp.game.object.setStuntPropDuration(object, duration)",
  "mp.game.object.setForceThisFrame(x, y, z, p3)",
  "mp.game.object.setEnableArenaPropPhysics(object, toggle, p2)",
  "mp.game.object.setEnableArenaPropPhysicsOnPed(object, toggle, p2, ped)",
  "object.streamingRange();",
  "mp.game.pathfind.getVehicleNodePosition(nodeId, outPosition);",
  "mp.game.pathfind.getNthClosestVehicleNodeIdWithHeading(x, y, z, nthClosest, outPosition, outHeading, p6, p7, p8);",
  "mp.game.pathfind.calculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2);",
  "mp.game.pathfind.getIsSlowRoadFlag(nodeID);",
  "mp.game.pathfind.getSafeCoordForPed(x, y, z, onGround, flags);",
  "mp.game.pathfind.getSupportsGpsRouteFlag(nodeID);",
  "mp.game.pathfind.generateDirectionsToCoord(x, y, z, p3, p4, vehicle, p6);",
  "mp.game.pathfind.getNthClosestVehicleNodeWithHeading(x, y, z, nthClosest, outPosition, heading, unknown1, unknown2, unknown3, unknown4);",
  "mp.game.pathfind.isNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2);",
  "mp.game.pathfind.getRandomVehicleNode(x, y, z, radius, p4, p5, p6, outPosition, heading);",
  "mp.game.pathfind.addNavmeshRequiredRegion(p0, p1, p2);",
  "mp.game.pathfind.getClosestVehicleNodeWithHeading(x, y, z, nodeType, p6, p7):",
  "mp.game.pathfind.addNavmeshBlockingObject(p0, p1, p2, p3, p4, p5, p6, p7, p8);",
  "mp.game.pathfind.isVehicleNodeIdValid(vehicleNodeId);",
  "mp.game.pathfind.disableNavmeshInArea(p0, p1, p2, p3, p4, p5, p6);",
  "mp.game.pathfind.getClosestMajorVehicleNode(x, y, z, outPosition, unknown1, unknown2);",
  "mp.game.pathfind.getStreetNameAtCoord(x, y, z, streetName, crossingRoad);",
  "mp.game.pathfind.getVehicleNodeProperties(x, y, z, density, flags);",
  "mp.game.pathfind.isPointOnRoad(x, y, z, vehicle);",
  "mp.game.pathfind.getClosestRoad(x, y, z, p3, p4, p5, p6, p7, p8, p9, p10);",
  "mp.game.pathfind.getNthClosestVehicleNodeId(x, y, z, nth, nodetype, p5, p6);",
  "mp.game.pathfind.getClosestVehicleNode(x, y, z, nodeType, p5, p6);",
  "mp.game.pathfind.getNthClosestVehicleNodeFavourDirection(x, y, z, desiredX, desiredY, desiredZ, nthClosest, outPosition, outHeading, nodetype, p10, p11);",
  "mp.game.pathfind.getNthClosestVehicleNode(x, y, z, nthClosest, outPosition, unknown1, unknown2, unknown3);",
  "mp.game.pathfind.removeNavmeshBlockingObject(p0);",
  "mp.game.pathfind.loadAllPathNodes(keepInMemory);",
  "mp.game.pathfind.setIgnoreNoGpsFlag(ignore);",
  "mp.game.ped.addScenarioBlockingArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);",
  "mp.game.pathfind.setGpsDisabledZone(p0, p1, p2, p3, p4, p5);",
  "mp.game.pathfind.setPedPathsBackToOriginal(p0, p1, p2, p3, p4, p5);",
  "mp.game.pathfind.updateNavmeshBlockingObject(p0, p1, p2, p3, p4, p5, p6, p7, p8);",
  "mp.game.pathfind.setRoadsBackToOriginal(p0, p1, p2, p3, p4, p5);",
  "mp.game.pathfind.setRoadsBackToOriginalInAngledArea(x1, y1, z1, x2, y2, z2, p6);",
  "mp.game.pathfind.setPedPathsInArea(x1, y1, z1, x2, y2, z2, unknown);",
  "mp.game.ped.addRelationshipGroup(name);",
  "mp.game.ped.attachSynchronizedSceneToEntity(sceneID, entity, boneIndex);",
  "mp.game.pathfind.setRoadsInAngledArea(x1, y1, z1, x2, y2, z2, angle, unknown1, unknown2, unknown3);",
  "mp.game.pathfind.setRoadsInArea(x1, y1, z1, x2, y2, z2, unknown1, unknown2);",
  "mp.game.ped.canCreateRandomPed(unk);",
  "mp.game.ped.addDecorationFromHashes(ped, collection, overlay)",
  "mp.game.ped.addArmourTo(ped, amount)",
  "mp.game.ped.canCreateRandom(unk)",
  "mp.game.ped.canCreateRandomDriver()",
  "mp.game.ped.canCreateRandomBikeRider()",
  "mp.game.ped.clearLastDamageBone(ped)",
  "mp.game.ped.canInCombatSeeTarget(ped, target)",
  "mp.game.ped.applyDamageTo(ped, damageAmount, p2, p3)",
  "mp.game.ped.clearAllVehicleForcedSeatUsage(ped)",
  "mp.game.ped.canKnockOffVehicle(ped)",
  "mp.game.ped.canCreateRandomCops()",
  "mp.game.ped.clearDriveByClipsetOverride(ped)",
  "mp.game.ped.clearCoverClipsetOverride(ped)",
  "mp.game.ped.clearAlternateWalkAnim(ped, p1)",
  "mp.game.ped.clearAlternateMovementAnim(ped, stance, p2)",
  "mp.game.ped.clearFacialClipsetOverride(ped)",
  "mp.game.ped.canSeeHatedPed(ped1, ped2)",
  "mp.game.ped.applyBloodByZone(ped, p1, p2, p3)",
  "mp.game.ped.blockDeadBodyShockingEvents(ped, toggle)",
  "mp.game.ped.clearFacialIdleAnimOverride(ped)",
  "mp.game.ped.clearDecorationsLeaveScars(ped)",
  "mp.game.ped.clearDecorations(ped)",
  "mp.game.ped.addDecorationFromHashesInCorona(ped, collection, overlay)",
  "mp.game.ped.clearEnvDirt(ped)",
  "mp.game.ped.clearDamageDecalByZone(ped, p1, p2)",
  "mp.game.ped.clearBloodDamageByZone(ped, p1)",
  "mp.game.ped.clearBloodDamage(ped)",
  "mp.game.ped.applyDamagePack(ped, damagePack, damage, mult)",
  "mp.game.ped.applyDamageDecal(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName)",
  "mp.game.ped.applyBloodSpecific(ped, p1, p2, p3, p4, p5, p6, p7)",
  "mp.game.ped.applyBlood(ped, boneIndex, xRot, yRot, zRot, woundType)",
  "mp.game.ped.applyBloodDamageByZone(ped, p1, p2, p3, p4)",
  "mp.game.ped.canRagdoll(ped)",
  "mp.game.ped.clearAllProps(ped)",
  "mp.game.ped.doesGroupExist(groupId);",
  "mp.game.ped.clearPedAlternateWalkAnim(p0, p1);",
  "mp.game.ped.detachSynchronizedScene(sceneID);",
  "mp.game.ped.createGroup(unused);",
  "mp.game.ped.createNmMessage(startImmediately, messageId);",
  "mp.game.ped.disposeSynchronizedScene(scene);",
  "mp.game.ped.getAnimInitialOffsetRotation(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);",
  "mp.game.ped.clearRelationshipBetweenGroups(relationship, group1, group2);",
  "mp.game.ped.createSynchronizedScene(x, y, z, roll, pitch, yaw, p6);",
  "mp.game.ped.createRandomPed(posX, posY, posZ);",
  "mp.game.ped.getAnimInitialOffsetPosition(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);",
  "mp.game.ped.createPed(pedType, modelHash, x, y, z, heading, networkHandle, pedHandle);",
  "mp.game.ped.create(pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed)",
  "mp.game.ped.clone(ped, heading, isNetwork, bScriptHostPed)",
  "mp.game.ped.cloneEx(ped, heading, isNetwork, bScriptHostPed, p4)",
  "mp.game.ped.cloneToTarget(ped, targetPed)",
  "mp.game.ped.cloneToTargetEx(ped, targetPed, p2)",
  "mp.game.ped.createInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed)",
  "mp.game.ped.freezeCameraRotation(ped)",
  "mp.game.ped.getAccuracy(ped)",
  "mp.game.ped.explodeHead(ped, weaponHash)",
  "mp.game.ped.createRandom(posX, posY, posZ)",
  "mp.game.ped.createRandomAsDriver(vehicle, returnHandle)",
  "mp.game.ped.clearNonCreationArea()",
  "mp.game.ped.getArmour(ped)",
  "mp.game.ped.forceToOpenParachute(ped)",
  "mp.game.ped.createParachuteBagObject(ped, p1, p2)",
  "mp.game.ped.getCauseOfDeath(ped)",
  "mp.game.ped.doesRelationshipGroupExist(groupHash)",
  "mp.game.ped.getAsGroupMember(groupID, memberNumber)",
  "mp.game.ped.getAsGroupLeader(groupID)",
  "mp.game.ped.getAlertness(ped)",
  "mp.game.ped.forceMotionState(ped, motionStateHash, p2, p3, p4)",
  "mp.game.ped.finalizeHeadBlend(ped)",
  "mp.game.ped.disableHeatscaleOverride(ped)",
  "mp.game.ped.doesScenarioBlockingAreaExist(x1, y1, z1, x2, y2, z2)",
  "mp.game.ped.clearProp(ped, propId)",
  "mp.game.ped.createSynchronizedSceneAtMapObject(x, y, z, radius, objectHash)",
  "mp.game.ped.getBoneIndex(ped, boneId)",
  "mp.game.ped.forceAiAndAnimationUpdate(ped, p1, p2)",
  "mp.game.ped.clearStoredHatProp(ped)",
  "mp.game.ped.getBoneCoords(ped, boneId, offsetX, offsetY, offsetZ)",
  "mp.game.ped.clearWetness(ped)",
  "mp.game.ped.clearRagdollBlockingFlags(ped, flags)",
  "mp.game.ped.clearScubaGearVariation(ped)",
  "mp.game.ped.clearParachutePackVariation(ped)",
  "mp.game.ped.dropAmbientProp(ped)",
  "mp.game.ped.getNumParentPedsOfType(type);",
  "mp.game.ped.getFirstParentIdForPedType(type);",
  "mp.game.ped.getGroupSize(groupID, unknown, sizeInMembers);",
  "mp.game.ped.getClosestPed(x, y, z, radius, p4, p5, outPed, p7, p8, pedType);",
  "mp.game.ped.getNumHeadOverlayValues(overlayID);",
  "mp.game.ped.getMount(ped)",
  "mp.game.ped.getMoney(ped)",
  "mp.game.ped.getDeadPickupCoords(ped, p1, p2)",
  "mp.game.ped.getLastDamageBone(ped)",
  "mp.game.ped.getParachuteState(ped)",
  "mp.game.ped.getParachuteLandingType(ped)",
  "mp.game.ped.getParachuteTintIndex(ped)",
  "mp.game.ped.getJackTarget(ped)",
  "mp.game.ped.getEventData(ped, eventType)",
  "mp.game.ped.getCombatFloat(ped, p1)",
  "mp.game.ped.getGroupIndex(ped)",
  "mp.game.ped.getMaxHealth(ped)",
  "mp.game.ped.getDrawableVariation(ped, componentId)",
  "mp.game.ped.getNumberOfDrawableVariations(ped, componentId)",
  "mp.game.ped.getNumberOfTextureVariations(ped, componentId, drawableId)",
  "mp.game.ped.getNumberOfPropDrawableVariations(ped, propId)",
  "mp.game.ped.getNumberOfPropTextureVariations(ped, propId, drawableId)",
  "mp.game.ped.getHeadBlendData(ped)",
  "mp.game.ped.getEyeColor(ped)",
  "mp.game.ped.getHeadOverlayValue(ped, overlayID)",
  "mp.game.ped.getHeadOverlayNum(overlayID)",
  "mp.game.ped.getNumHairColors()",
  "mp.game.ped.getNumMakeupColors()",
  "mp.game.ped.getHairRgbColor(hairColorIndex)",
  "mp.game.ped.getMakeupRgbColor(makeupColorIndex)",
  "mp.game.ped.getClosest(x, y, z, radius, p4, p5, p7, p8, pedType)",
  "mp.game.ped.getHeadBlendFirstIndex(type)",
  "mp.game.ped.getHeadBlendNumHeads(headType)",
  "mp.game.ped.getDecorationZoneFromHashes(collection, overlay)",
  "mp.game.ped.getHeadshotTxdString(id)",
  "mp.game.ped.getNearbyPeds(ped, ignore)",
  "mp.game.ped.getNearbyVehicles(ped)",
  "mp.game.ped.getCurrentMovementSpeed(ped)",
  "mp.game.ped.getEmissiveIntensity(ped)",
  "mp.game.ped.getEnveffScale(ped)",
  "mp.game.ped.getMeleeTargetFor(ped)",
  "mp.game.ped.getCombatRange(ped)",
  "mp.game.ped.getCombatMovement(ped)",
  "mp.game.ped.getHelmetStoredHatTexIndex(ped)",
  "mp.game.ped.getHelmetStoredHatPropIndex(ped)",
  "mp.game.ped.getConfigFlag(ped, flagId, p2)",
  "mp.game.ped.getDecorationsState(ped)",
  "mp.game.ped.getExtractedDisplacement(ped, worldSpace)",
  "mp.game.ped.getDefensiveAreaPosition(ped, p1)",
  "mp.game.ped.isAValidLipstickColor(colorID);",
  "mp.game.ped.isAValidBlushColor(colorID);",
  "mp.game.ped.hasStealthModeAssetLoaded(asset);",
  "mp.game.ped.getSynchronizedScenePhase(sceneID);",
  "mp.game.ped.hasActionModeAssetLoaded(asset);",
  "mp.game.ped.getRandomPedAtCoord(x, y, z, xRadius, yRadius, zRadius, pedType);",
  "mp.game.ped.getTattooZone(collection, overlay);",
  "mp.game.ped.getPedheadshotTxdString(handle);",
  "mp.game.ped.getPedAsGroupMember(groupID, memberNumber);",
  "mp.game.ped.getPedAsGroupLeader(groupID);",
  "mp.game.ped.hasPedReceivedEvent(p0, p1);",
  "mp.game.ped.getRelationshipBetweenGroups(group1, group2);",
  "mp.game.ped.getSynchronizedSceneRate(sceneID);",
  "mp.game.ped.isAValidHairColor(colorID);",
  "mp.game.ped.isAimingFromCover(ped)",
  "mp.game.ped.isAPlayer(ped)",
  "mp.game.ped.getVehicleIsIn(ped, includeLastVehicle)",
  "mp.game.ped.instantlyFillPopulation()",
  "mp.game.ped.getVisualFieldCenterAngle(ped)",
  "mp.game.ped.getStealthMovement(ped)",
  "mp.game.ped.getTaskCombatTarget(ped, losCheck)",
  "mp.game.ped.getPedsJacker(ped)",
  "mp.game.ped.getSeatIsTryingToEnter(ped)",
  "mp.game.ped.getVehicleIsTryingToEnter(ped)",
  "mp.game.ped.getSourceOfDeath(ped)",
  "mp.game.ped.getTimeOfDeath(ped)",
  "mp.game.ped.getRelationshipBetweenS(ped1, ped2)",
  "mp.game.ped.getRelationshipGroupDefaultHash(ped)",
  "mp.game.ped.getRelationshipGroupHash(ped)",
  "mp.game.ped.getPlayerIsFollowing(ped)",
  "mp.game.ped.getVehicleIsUsing(ped)",
  "mp.game.ped.getVehicleIsEntering(ped)",
  "mp.game.ped.getTimeOfLastWeaponDamage(ped, weaponHash)",
  "mp.game.ped.getType(ped)",
  "mp.game.ped.getTextureVariation(ped, componentId)",
  "mp.game.ped.hasHeadBlendFinished(ped)",
  "mp.game.ped.hasPreloadVariationDataFinished(ped)",
  "mp.game.ped.hasHeadshotImgUploadFailed()",
  "mp.game.ped.getPropIndex(ped, componentId)",
  "mp.game.ped.hasHeadshotImgUploadSucceeded()",
  "mp.game.ped.getRagdollBoneIndex(ped, bone)",
  "mp.game.ped.hasReceivedEvent(ped, eventId)",
  "mp.game.ped.giveHelmet(ped, cannotRemove, helmetFlag, textureIndex)",
  "mp.game.ped.getResetFlag(ped, flagId)",
  "mp.game.ped.giveNmMessage(ped)",
  "mp.game.ped.hideBloodDamageByZone(ped, p1, p2)",
  "mp.game.ped.getRandomAtCoord(x, y, z, xRadius, yRadius, zRadius, pedType)",
  "mp.game.ped.getPropTextureIndex(ped, componentId)",
  "mp.game.ped.hasPreloadPropDataFinished(ped)",
  "mp.game.ped.isAnyPedNearPoint(x, y, z, radius);",
  "mp.game.ped.isAnyPedShootingInArea(x1, y1, z1, x2, y2, z2, p6, p7);",
  "mp.game.ped.isCopPedInArea3d(x1, y1, z1, x2, y2, z2);",
  "mp.game.ped.isInAnyVehicle(ped, atGetIn)",
  "mp.game.ped.isCopInArea3D(x1, y1, z1, x2, y2, z2)",
  "mp.game.ped.isHurt(ped)",
  "mp.game.ped.isFatallyInjured(ped)",
  "mp.game.ped.isDeadOrDying(ped, p1)",
  "mp.game.ped.isConversationDead(ped)",
  "mp.game.ped.isFacingPed(ped, otherPed, angle)",
  "mp.game.ped.isAnyShootingInArea(x1, y1, z1, x2, y2, z2, p6, p7)",
  "mp.game.ped.isHuman(ped)",
  "mp.game.ped.isInAnyBoat(ped)",
  "mp.game.ped.isInAnySub(ped)",
  "mp.game.ped.isInAnyHeli(ped)",
  "mp.game.ped.isInAnyPlane(ped)",
  "mp.game.ped.isInAnyPoliceVehicle(ped)",
  "mp.game.ped.isFalling(ped)",
  "mp.game.ped.isClimbing(ped)",
  "mp.game.ped.isDiving(ped)",
  "mp.game.ped.isDucking(ped)",
  "mp.game.ped.isInAnyTaxi(ped)",
  "mp.game.ped.isGroupMember(ped, groupId)",
  "mp.game.ped.isHangingOnToVehicle(ped)",
  "mp.game.ped.isDoingDriveby(ped)",
  "mp.game.ped.isBeingJacked(ped)",
  "mp.game.ped.isBeingStunned(ped, p1)",
  "mp.game.ped.isFleeing(ped)",
  "mp.game.ped.isGoingIntoCover(ped)",
  "mp.game.ped.isInAnyTrain(ped)",
  "mp.game.ped.isGettingIntoAVehicle(ped)",
  "mp.game.ped.isComponentVariationValid(ped, componentId, drawableId, textureId)",
  "mp.game.ped.isHairColorValid2(colorId)",
  "mp.game.ped.isBlushColorValid2(colorId)",
  "mp.game.ped.isHairColorValid(colorID)",
  "mp.game.ped.isBlushColorValid(colorID)",
  "mp.game.ped.isBodyBlemishValid(colorId)",
  "mp.game.ped.isAnyHostileNearPoint(ped, x, y, z, radius)",
  "mp.game.ped.isHeadshotImgUploadAvailable()",
  "mp.game.ped.isHeadshotReady(id)",
  "mp.game.ped.isHeadshotValid(id)",
  "mp.game.ped.isHeadingTowardsPosition(ped, x, y, z, p4)",
  "mp.game.ped.isAnyNearPoint(x, y, z, radius)",
  "mp.game.ped.isBeingStealthKilled(ped)",
  "mp.game.ped.isHelmetUnk(ped)",
  "mp.game.ped.isEvasiveDiving(ped)",
  "mp.game.ped.isHeadtrackingEntity(ped, entity)",
  "mp.game.ped.isHeadtrackingPed(ped1, ped2)",
  "mp.game.ped.isDefensiveAreaActive(ped, p1)",
  "ped.isDynamic();",
  "mp.game.ped.isPedRespondingToEvent(p0, p1);",
  "mp.game.ped.isPedheadshotValid(handle);",
  "mp.game.ped.isPedheadshotReady(handle);",
  "mp.game.ped.isInVehicle(ped, vehicle, atGetIn)",
  "mp.game.ped.isInModel(ped, modelHash)",
  "mp.game.ped.isInjured(ped)",
  "mp.game.ped.isReloading(ped)",
  "mp.game.ped.isInMeleeCombat(ped)",
  "mp.game.ped.isStopped(ped)",
  "mp.game.ped.isShootingInArea(ped, x1, y1, z1, x2, y2, z2, p7, p8)",
  "mp.game.ped.isShooting(ped)",
  "mp.game.ped.isModel(ped, modelHash)",
  "mp.game.ped.isMale(ped)",
  "mp.game.ped.isOnMount(ped)",
  "mp.game.ped.isOnVehicle(ped)",
  "mp.game.ped.isOnSpecificVehicle(ped, vehicle)",
  "mp.game.ped.isSittingInVehicle(ped, vehicle)",
  "mp.game.ped.isSittingInAnyVehicle(ped)",
  "mp.game.ped.isOnFoot(ped)",
  "mp.game.ped.isOnAnyBike(ped)",
  "mp.game.ped.isPlantingBomb(ped)",
  "mp.game.ped.isInFlyingVehicle(ped)",
  "mp.game.ped.isInParachuteFreeFall(ped)",
  "mp.game.ped.isJumping(ped)",
  "mp.game.ped.isJumpingOutOfVehicle(ped)",
  "mp.game.ped.isOpeningADoor(ped)",
  "mp.game.ped.isProne(ped)",
  "mp.game.ped.isInCombat(ped, target)",
  "mp.game.ped.isJacking(ped)",
  "mp.game.ped.isInCover(ped, exceptUseWeapon)",
  "mp.game.ped.isInCoverFacingLeft(ped)",
  "mp.game.ped.isInHighCover(ped)",
  "mp.game.ped.isRespondingToEvent(ped, event)",
  "mp.game.ped.isInGroup(ped)",
  "mp.game.ped.isSwimming(ped)",
  "mp.game.ped.isSwimmingUnderWater(ped)",
  "mp.game.ped.isScriptedScenarioUsingConditionalAnim(ped, animDict, anim)",
  "mp.game.ped.isLipstickColorValid2(colorId)",
  "mp.game.ped.isLipstickColorValid(colorID)",
  "mp.game.ped.isScubaGearLightEnabled(ped)",
  "mp.game.ped.isSwappingWeapon(Ped)",
  "mp.game.ped.isRunningRagdollTask(ped)",
  "mp.game.ped.isShaderEffectValid(ped)",
  "mp.game.ped.isPerformingDependentComboLimit(ped)",
  "mp.game.ped.isPerformingStealthKill(ped)",
  "mp.game.ped.isPerformingMeleeAction(ped)",
  "mp.game.ped.isMobilePhoneToEar(ped)",
  "mp.game.ped.isRunningMobilePhoneTask(ped)",
  "mp.game.ped.isRunningMeleeTask(ped)",
  "mp.game.ped.isRagdoll(ped)",
  "mp.game.ped.removeActionModeAsset(asset);",
  "mp.game.ped.requestActionModeAsset(asset);",
  "mp.game.ped.removeScenarioBlockingArea(p0, p1);",
  "mp.game.ped.isSynchronizedSceneRunning(sceneId);",
  "mp.game.ped.removeGroup(groupId);",
  "mp.game.ped.removeRelationshipGroup(groupHash);",
  "mp.game.ped.requestStealthModeAsset(asset);",
  "mp.game.ped.isSynchronizedSceneLooped(sceneID);",
  "mp.game.ped.resetGroupFormationDefaultSpacing(groupHandle);",
  "mp.game.ped.removeStealthModeAsset(asset);",
  "mp.game.ped.removeElegantly()",
  "mp.game.ped.resetLastVehicle(ped)",
  "mp.game.ped.resetAiWeaponDamageModifier()",
  "mp.game.ped.resetAiMeleeWeaponDamageModifier()",
  "mp.game.ped.isVaulting(ped)",
  "mp.game.ped.removeFromGroup(ped)",
  "mp.game.ped.knockOffVehicle(ped)",
  "mp.game.ped.isTryingToEnterALockedVehicle(ped)",
  "mp.game.ped.resetMovementClipset(ped, p1)",
  "mp.game.ped.resetStrafeClipset(ped)",
  "mp.game.ped.resetInVehicleContext(ped)",
  "mp.game.ped.isTargetInPerceptionArea(ped, targetPed, focusAngle, focusDistance, peripheralAngle, peripheralDistance)",
  "mp.game.ped.requestVehicleVisibilityTracking(ped, p1)",
  "mp.game.ped.releasePreloadPropData(ped)",
  "mp.game.ped.knockOffProp(ped, p1, p2, p3, p4)",
  "mp.game.ped.releaseHeadshotImgUpload(id)",
  "mp.game.ped.releasePreloadVariationData(ped)",
  "mp.game.ped.requestHeadshotImgUpload(id)",
  "mp.game.ped.registerHeadshotTransparent(ped)",
  "mp.game.ped.registerHeadshot3(ped)",
  "mp.game.ped.registerHeadshot(ped)",
  "mp.game.ped.isUsingActionMode(ped)",
  "mp.game.ped.isSynchronizedSceneHoldLastFrame(sceneID)",
  "mp.game.ped.isSynchronizedSceneLoo(sceneID)",
  "mp.game.ped.isTracked(ped)",
  "mp.game.ped.isTrackedVisible(ped)",
  "mp.game.ped.requestVisibilityTracking(ped)",
  "mp.game.ped.isWearingHelmet(ped)",
  "mp.game.ped.isTakingOffHelmet(ped)",
  "mp.game.ped.removeHelmet(ped, instantly)",
  "mp.game.ped.playFacialAnim(ped, animName, animDict)",
  "mp.game.ped.isUsingAnyScenario(ped)",
  "mp.game.ped.isUsingScenario(ped, scenario)",
  "mp.game.ped.removeScenarioBlockingAreas()",
  "mp.game.ped.resetVisibleDamage(ped)",
  "mp.game.ped.removePreferredCoverSet(ped)",
  "mp.game.ped.removeDefensiveArea(ped, toggle)",
  "mp.game.ped.resetRagdollTimer(ped)",
  "mp.game.ped.registerHatedTargetsAround(ped, radius)",
  "mp.game.ped.registerTarget(ped, target)",
  "mp.game.ped.setAiWeaponDamageModifier(value);",
  "mp.game.ped.setAiWeaponDamageModifier(1.5);",
  "mp.game.ped.setAiMeleeWeaponDamageModifier(modifier);",
  "mp.game.ped.setAccuracy(ped, accuracy)",
  "mp.game.ped.setArmour(ped, amount)",
  "mp.game.ped.setAllowVehiclesOverride(ped, toggle)",
  "mp.game.ped.setCanBeDraggedOut(ped, toggle)",
  "mp.game.ped.setAmbientPedsDropMoney(dropMoney)",
  "mp.game.ped.setCanBeShotInVehicle(ped, toggle)",
  "mp.game.ped.setCanBeTargetted(ped, toggle)",
  "mp.game.ped.setCanBeTargettedByTeam(ped, team, toggle)",
  "mp.game.ped.setCanBeTargettedByPlayer(ped, player, toggle)",
  "mp.game.ped.setAsGroupLeader(ped, groupId)",
  "mp.game.ped.setAsGroupMember(ped, groupId)",
  "mp.game.ped.setCanBeTargetedWithoutLos(ped, toggle)",
  "mp.game.ped.setAllowedToDuck(ped, toggle)",
  "mp.game.ped.setAsCop(ped, toggle)",
  "mp.game.ped.setCanBeKnockedOffVehicle(ped, state)",
  "mp.game.ped.setAsEnemy(ped, toggle)",
  "mp.game.ped.setCanSmashGlass(ped, p1, p2)",
  "mp.game.ped.setCanAttackFriendly(ped, toggle, p2)",
  "mp.game.ped.setAlertness(ped, value)",
  "mp.game.ped.resetWeaponMovementClipset(ped)",
  "mp.game.ped.setAlternateWalkAnim(ped, animDict, animName, p3, p4)",
  "mp.game.ped.setAlternateMovementAnim(ped, stance, animDictionary, animationName, p4, p5)",
  "mp.game.ped.setBlendFromParents(ped, p1, p2, p3, p4)",
  "mp.game.ped.setCanPlayInCarIdles(ped, enable)",
  "mp.game.ped.setCanLosePropsOnDamage(ped, enable, flag)",
  "mp.game.ped.setBlockingOfNonTemporaryEvents(ped, toggle)",
  "mp.game.ped.setAoBlobRendering(ped, toggle)",
  "mp.game.ped.setBlocksPathingWhenDead(ped, toggle)",
  "mp.game.ped.setCanSwitchWeapon(ped, toggle)",
  "mp.game.ped.setCanPeekInCover(ped, toggle)",
  "mp.game.ped.setCanCowerInCover(ped, toggle)",
  "mp.game.ped.setCanRagdollFromPlayerImpact(ped, toggle)",
  "mp.game.ped.setCanBeTargetedWhenInjured(ped, toggle)",
  "mp.game.ped.setCanEvasiveDive(ped, toggle)",
  "mp.game.ped.setCanLegIk(ped, toggle)",
  "mp.game.ped.setCanHeadIk(ped, toggle)",
  "mp.game.ped.setCanArmIk(ped, toggle)",
  "mp.game.ped.setCanPlayAmbientBaseAnims(ped, toggle)",
  "mp.game.ped.setCanPlayAmbientAnims(ped, toggle)",
  "mp.game.ped.setCanPlayInjuredAnims(ped, p1)",
  "mp.game.ped.setCanPlayVisemeAnims(ped, toggle, p2)",
  "mp.game.ped.setCanPlayGestureAnims(ped, toggle)",
  "mp.game.ped.resurrect(ped)",
  "mp.game.ped.reviveInjured(ped)",
  "mp.game.ped.setAngledDefensiveArea(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9)",
  "mp.game.ped.setCanRagdoll(ped, toggle)",
  "mp.game.ped.setBoundsOrientation(ped, p1, p2, p3, p4, p5)",
  "mp.game.ped.setCreateRandomCopsOnScenarios(toggle);",
  "mp.game.ped.setCreateRandomCops(toggle);",
  "mp.game.ped.setCreateRandomCopsNotOnScenarios(toggle);",
  "mp.game.ped.setDesiredHeading(ped, heading)",
  "mp.game.ped.setDensityMultiplierThisFrame(multiplier)",
  "mp.game.ped.setDiesInWater(ped, toggle)",
  "mp.game.ped.setDiesInSinkingVehicle(ped, toggle)",
  "mp.game.ped.setDucking(ped, toggle)",
  "mp.game.ped.setCanTeleportToGroupLeader(pedHandle, groupHandle, toggle)",
  "mp.game.ped.setCombatFloat(ped, combatType, p2)",
  "mp.game.ped.setExclusivePhoneRelationships(ped)",
  "mp.game.ped.setCoordsNoGang(ped, posX, posY, posZ)",
  "mp.game.ped.setCoordsKeepVehicle(ped, posX, posY, posZ)",
  "mp.game.ped.setDiesInVehicle(ped, toggle)",
  "mp.game.ped.setEnableHandcuffs(ped, toggle)",
  "mp.game.ped.setEnableBoundAnkles(ped, toggle)",
  "mp.game.ped.setEnableScuba(ped, toggle)",
  "mp.game.ped.setDriveByClipsetOverride(ped, clipset)",
  "mp.game.ped.setCoverClipsetOverride(ped, p1)",
  "mp.game.ped.setDefaultComponentVariation(ped)",
  "mp.game.ped.setEyeColor(ped, index)",
  "mp.game.ped.setEnableScubaGearLight(ped, toggle)",
  "mp.game.ped.setDisableFallDamage(ped, enable)",
  "mp.game.ped.setCapsule(ped, value)",
  "mp.game.ped.setEnveffColorModulator(ped, p1, p2, p3)",
  "mp.game.ped.setEmissiveIntensity(ped, intensity)",
  "mp.game.ped.setEnableEnveffScale(ped, toggle)",
  "mp.game.ped.setEnveffScale(ped, value)",
  "mp.game.ped.setCowerHash(ped, p1)",
  "mp.game.ped.setCombatAttributes(ped, attributeIndex, enabled)",
  "mp.game.ped.setCombatRange(ped, p1)",
  "mp.game.ped.setCombatAbility(ped, p1)",
  "mp.game.ped.setCombatMovement(ped, combatMovement)",
  "mp.game.ped.setDiesInstantlyInWater(ped, toggle)",
  "mp.game.ped.setConfigFlag(ped, flagId, value)",
  "mp.game.ped.setClothProne(p0, p1)",
  "mp.game.ped.setCanUseAutoConversationLookat(ped, toggle)",
  "mp.game.ped.setCanTorsoReactIk(ped, p1)",
  "mp.game.ped.setCanTorsoIk(ped, toggle)",
  "mp.game.ped.setClothPackageIndex(p0, p1)",
  "mp.game.ped.setEnableWeaponBlocking(ped, toggle)",
  "mp.game.ped.setDiesWhenInjured(ped, toggle)",
  "mp.game.ped.setDefensiveAreaDirection(ped, p1, p2, p3, p4)",
  "mp.game.ped.setDefensiveAreaAttachedToPed(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10)",
  "mp.game.ped.setDefensiveSphereAttachedToVehicle(ped, target, xOffset, yOffset, zOffset, radius, p6)",
  "mp.game.ped.setDefensiveSphereAttachedToPed(ped, target, xOffset, yOffset, zOffset, radius, p6)",
  "mp.game.ped.setDriverAggressiveness(driver, aggressiveness)",
  "mp.game.ped.setDriverAbility(driver, ability)",
  "mp.game.ped.setDriverRacingModifier(driver, modifier)",
  "mp.game.ped.setGroupSeparationRange(groupHandle, separationRange);",
  "mp.game.ped.setGroupFormationSpacing(groupId, p1, p2, p3);",
  "mp.game.ped.setGroupFormation(groupId, formationType);",
  "mp.game.ped.setIntoVehicle(ped, vehicle, seatIndex)",
  "mp.game.ped.setMoveAnimsBlendOut(ped)",
  "mp.game.ped.setMoney(ped, amount)",
  "mp.game.ped.setIdRange(ped, value)",
  "mp.game.ped.setHighlyPerceptive(ped, toggle)",
  "mp.game.ped.setHearingRange(ped, value)",
  "mp.game.ped.setMinGroundTimeForStungun(ped, ms)",
  "mp.game.ped.setFiringPattern(ped, patternHash)",
  "mp.game.ped.setGravity(ped, toggle)",
  "mp.game.ped.setMaxHealth(ped, value)",
  "mp.game.ped.setMaxTimeInWater(ped, value)",
  "mp.game.ped.setMaxTimeUnderwater(ped, value)",
  "mp.game.ped.setKeepTask(ped, toggle)",
  "mp.game.ped.setGetOutUpsideDownVehicle(ped, toggle)",
  "mp.game.ped.setMovementClipset(ped, clipSet, p2)",
  "mp.game.ped.setInVehicleContext(ped, context)",
  "mp.game.ped.setGestureGroup(ped, animGroupGesture)",
  "mp.game.ped.setHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent)",
  "mp.game.ped.setHeadOverlay(ped, overlayID, index, opacity)",
  "mp.game.ped.setHeadOverlayColor(ped, overlayID, colorType, colorID, secondColorID)",
  "mp.game.ped.setHairColor(ped, colorID, highlightColorID)",
  "mp.game.ped.setForceStepType(ped, p1, type, p3)",
  "mp.game.ped.setForceFootstepUpdate(ped, toggle)",
  "mp.game.ped.setLodMultiplier(ped, multiplier)",
  "mp.game.ped.setIkTarget(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, ikflag, blendInDuration, blendOutDuration)",
  "mp.game.ped.setFaceFeature(ped, index, scale)",
  "mp.game.ped.setMovementModeOverride(ped, name)",
  "mp.game.ped.setHeatscaleOverride(ped, heatScale)",
  "mp.game.ped.setMoveRateOverride(ped, value)",
  "mp.game.ped.setMinMoveBlendRatio(ped, value)",
  "mp.game.ped.setMaxMoveBlendRatio(ped, value)",
  "mp.game.ped.setIncreasedAvoidanceRadius(ped)",
  "mp.game.ped.setFleeAttributes(ped, attributeFlags, enable)",
  "mp.game.ped.setMotionBlur(ped, toggle)",
  "mp.game.ped.setLegIkMode(ped, mode)",
  "mp.game.ped.setHelmetTextureIndex(ped, textureIndex)",
  "mp.game.ped.setHelmetUnk(ped, p1, p2, p3)",
  "mp.game.ped.setHelmetPropIndex(ped, propIndex, p2)",
  "mp.game.ped.setHelmetFlag(ped, helmetFlag)",
  "mp.game.ped.setHelmet(ped, canWearHelmet)",
  "mp.game.ped.setGeneratesDeadBodyEvents(ped, toggle)",
  "mp.game.ped.setModelIsSuppressed(modelHash, toggle)",
  "mp.game.ped.setGroupMemberPassengerIndex(ped, index)",
  "mp.game.ped.setFacialIdleAnimOverride(ped, animName, animDict)",
  "mp.game.ped.setFacialClipsetOverride(ped, animDict)",
  "mp.game.ped.setNameDebug(ped, name)",
  "mp.game.ped.setScenarioPedsSpawnInSphereArea(p0, p1, p2, p3, p4);",
  "mp.game.ped.setPedDensityMultiplierThisFrame(multiplier);",
  "mp.game.ped.setScriptedConversionCoordThisFrame(x, y, z);",
  "mp.game.ped.setPedNonCreationArea(x1, y1, z1, x2, y2, z2);",
  "mp.game.ped.setRelationshipBetweenGroups(relationship, group1, group2);",
  "mp.game.ped.setScenarioPedsToBeReturnedByNextCommand(value);",
  "mp.game.ped.setPedAlternateWalkAnim(p0, p1, p2, p3, p4);",
  "mp.game.ped.setScenarioPedDensityMultiplierThisFrame(p0, p1);",
  "mp.game.ped.setPedToRagdollWithFall(ped, minTime, maxTime, fallType, dirX, dirY, dirZ, groundHeight, p8, p9, p10, p11, p12, p13);",
  "mp.game.ped.setPedReserveParachuteTintIndex(p0, p1);",
  "mp.game.ped.setScenarioDensityMultiplierThisFrame(intMultiplier, extMultiplier)",
  "mp.game.ped.setNonCreationArea(x1, y1, z1, x2, y2, z2)",
  "mp.game.ped.setStayInVehicleWhenJacked(ped, toggle)",
  "mp.game.ped.setParachuteTintIndex(ped, tintIndex)",
  "mp.game.ped.setReserveParachuteTintIndex(ped, p1)",
  "mp.game.ped.setSeeingRange(ped, value)",
  "mp.game.ped.setStealthMovement(ped, p1, action)",
  "mp.game.ped.setPinnedDown(ped, pinned, i)",
  "mp.game.ped.setRelationshipGroupDefaultHash(ped, hash)",
  "mp.game.ped.setRelationshipGroupHash(ped, hash)",
  "mp.game.ped.setRelationshipGroupDontAffectWantedLevel(group, p1)",
  "mp.game.ped.setShootRate(ped, shootRate)",
  "mp.game.ped.setNeverLeavesGroup(ped, toggle)",
  "mp.game.ped.setStrafeClipset(ped, clipSet)",
  "mp.game.ped.setRandomComponentVariation(ped, p1)",
  "mp.game.ped.setRandomProps(ped)",
  "mp.game.ped.setPopControlSphereThisFrame(x, y, z, min, max)",
  "mp.game.ped.setScriptedAnimSeatOffset(ped, p1)",
  "mp.game.ped.setPanicExitScenario(p0, p1, p2, p3)",
  "mp.game.ped.setRagdollForceFall(ped)",
  "mp.game.ped.setPreloadVariationData(ped, slot, drawableId, textureId)",
  "mp.game.ped.setSteersAroundVehicles(ped, toggle)",
  "mp.game.ped.setSteersAroundObjects(ped, toggle)",
  "mp.game.ped.setSteersAroundPeds(ped, toggle)",
  "mp.game.ped.setPlaysHeadOnHornAnimWhenDiesInVehicle(ped, toggle)",
  "mp.game.ped.setShootsAtCoord(ped, x, y, z, toggle)",
  "mp.game.ped.setResetFlag(ped, flagId, doReset)",
  "mp.game.ped.setPrimaryLookat(ped, lookAt)",
  "mp.game.ped.setShouldPlayFleeScenarioExit(ped, p1, p2, p3)",
  "mp.game.ped.setShouldPlayImmediateScenarioExit(ped)",
  "mp.game.ped.setShouldPlayNormalScenarioExit(ped)",
  "mp.game.ped.setShouldPlayDirectedScenarioExit(ped, x, y, z)",
  "mp.game.ped.setPreferredCoverSet(ped, itemSet)",
  "mp.game.ped.setSphereDefensiveArea(ped, x, y, z, radius, p5, p6)",
  "mp.game.ped.setRagdollBlockingFlags(ped, flags)",
  "mp.game.ped.setRagdollOnCollision(ped, toggle)",
  "mp.game.ped.setPedToRagdoll(ped, time1, time2, ragdollType, p4, p5, p6)",
  "mp.game.ped.setScubaGearVariation(ped)",
  "mp.game.ped.setPreloadPropData(ped, componentId, drawableId, TextureId)",
  "mp.game.ped.setPropIndex(ped, componentId, drawableId, TextureId, attach)",
  "mp.game.ped.setSynchronizedSceneLooped(sceneID, toggle);",
  "mp.game.ped.setSynchronizedSceneOrigin(sceneID, x, y, z, roll, pitch, yaw, p7);",
  "mp.game.ped.setSynchronizedScenePhase(sceneID, phase);",
  "mp.game.ped.setSynchronizedSceneRate(sceneID, rate);",
  "mp.game.ped.setTimeExclusiveDisplayTexture(p0, p1);",
  "mp.peds.new(model, position, heading, dimension);",
  "mp.game.ped.setSuffersCriticalHits(ped, toggle)",
  "mp.game.ped.setVisualFieldMinAngle(ped, value)",
  "mp.game.ped.setVisualFieldMaxAngle(ped, value)",
  "mp.game.ped.setVisualFieldMinElevationAngle(ped, angle)",
  "mp.game.ped.setVisualFieldMaxElevationAngle(ped, angle)",
  "mp.game.ped.setVisualFieldPeripheralRange(ped, range)",
  "mp.game.ped.setVisualFieldCenterAngle(ped, angle)",
  "mp.game.ped.setToInformRespectedFriends(ped, radius, maxFriends)",
  "mp.game.ped.setVehicleForcedSeatUsage(ped, vehicle, seatIndex, flags, p4)",
  "mp.game.ped.setWeaponMovementClipset(ped, clipSet)",
  "mp.game.ped.updateHeadBlendData(ped, shapeMix, skinMix, thirdMix)",
  "mp.game.ped.spawnpointsGetSearchResultFlags(p0)",
  "mp.game.ped.spawnpointsGetSearchResult(randomInt)",
  "mp.game.ped.spawnpointsGetNumSearchResults()",
  "mp.game.ped.setSynchronizedSceneLoo(sceneID, toggle)",
  "mp.game.ped.setTargetLossResponse(ped, responseType)",
  "mp.game.ped.stopAnyModelBeingSuppressed()",
  "mp.game.ped.spawnpointsIsSearchActive()",
  "mp.game.ped.spawnpointsStartSearch(x, y, z, radius, zmax, interiorFlags, scale, duration)",
  "mp.game.ped.spawnpointsStartSearchInAngledArea(x, y, z, x1, y1, z1, zmax, interiorFlags, scale, duration)",
  "mp.game.ped.spawnpointsIsSearchFailed()",
  "mp.game.ped.spawnpointsCancelSearch()",
  "mp.game.ped.unregisterHeadshot(id)",
  "mp.game.ped.setUsingActionMode(ped, p1, p2, action)",
  "mp.game.ped.setSynchronizedSceneHoldLastFrame(sceneID, toggle)",
  "mp.game.ped.wasKnockedOut(ped)",
  "mp.game.ped.wasKilledByTakedown(ped)",
  "mp.game.ped.wasKilledByStealth(ped)",
  "mp.game.ped.stopWeaponFiringWhenDropped(ped)",
  "mp.game.ped.setToLoadCover(ped, toggle)",
  "mp.game.ped.setSweat(ped, sweat)",
  "mp.game.ped.setWetnessEnabledThisFrame(ped)",
  "mp.game.ped.setWetnessHeight(ped, height)",
  "mp.game.ped.setToRagdollWithFall(ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13)",
  "mp.game.ped.setToRagdoll(ped, time1, time2, ragdollType, p4, p5, p6)",
  "player.call(eventName, ...args);",
  "mp.game.player.arePlayerFlashingStarsAboutToDrop();",
  "mp.game.player.changePlayerPed(pedb2b3);",
  "mp.game.player.canPlayerStartMission();",
  "mp.game.player.arePlayerStarsGreyedOut();",
  "mp.game.player.canPedHearPlayer(ped);",
  "player.addVehicleSubtaskAttackCoord(x, y, z);",
  "player.addVehicleSubtaskAttack(ped2);",
  "player.clearDrivebyTaskUnderneathDrivingTask();",
  "player.clearDecorations();",
  "player.canRagdoll();",
  "player.applyBloodByZone(p1, p2, p3, p4);",
  "player.applyDamageDecal(p1, p2, p3, p4, p5, p6, p7, p8, p9);",
  "player.applyDamagePack(damagePack, damage, mult);",
  "player.applyDamagePack(\"Explosion_Large\", 100, 1);",
  "player.clearDriveByClipsetOverride();",
  "player.canKnockOffVehicle();",
  "player.clearDamageDecalByZone(p1, p2);",
  "player.clearBloodDamageByZone(p1);",
  "player.addArmourTo(amount);",
  "player.applyDamageTo(damageAmount, includingArmor);",
  "player.clearFacialIdleAnimOverride();",
  "player.applyBloodDamageByZone(p1, p2, p3, p4);",
  "player.applyBlood(boneIndex, xRot, yRot, zRot, woundType);",
  "player.clearBloodDamage();",
  "player.clearAllProps();",
  "player.clearAlternateMovementAnim(stance, p2);",
  "player.clearFacialDecorations();",
  "player.canInCombatSeeTarget(target);",
  "player.applyBloodSpecific(p1, p2, p3, p4, p5, p6, p7, p8);",
  "player.changePed(ped, b2, b3);",
  "player.areStarsGreyedOut();",
  "player.clearHasDamagedAtLeastOneNonAnimalPed();",
  "player.areFlashingStarsAboutToDrop();",
  "player.canStartMission();",
  "player.clearHasDamagedAtLeastOnePed();",
  "player.canPedHear(ped);",
  "mp.game.player.assistedMovementCloseRoute()",
  "mp.game.player.assistedMovementFlushRoute()",
  "mp.game.player.attachVirtualBound(p0, p1, p2, p3, p4, p5, p6, p7)",
  "Object player.getClothes(Number componentNumber)",
  "mp.game.player.forceCleanup(cleanupFlags);",
  "mp.game.player.forceCleanupForThreadWithThisId(id, cleanupFlags);",
  "mp.game.player.clearPlayerParachutePackModelOverride();",
  "mp.game.player.clearPlayerParachuteModelOverride();",
  "mp.game.player.clearPlayerWantedLevel();",
  "mp.game.player.clearPlayerParachuteVariationOverride();",
  "mp.game.player.enableSpecialAbility(toggle);",
  "mp.game.player.clearPlayerHasDamagedAtLeastOneNonAnimalPed();",
  "mp.game.player.forceCleanupForAllThreadsWithThisName(name, cleanupFlags);",
  "mp.game.player.disableFiring(toggle);",
  "mp.game.player.displaySystemSigninUi(unk);",
  "mp.game.player.clearPlayerHasDamagedAtLeastOnePed();",
  "player.clearSecondaryTask();",
  "player.clearTasksImmediately();",
  "player.controlMountedWeapon();",
  "player.clearTasks();",
  "player.clearProp(propId);",
  "player.forceToOpenParachute();",
  "player.getCauseOfDeath();",
  "player.getBoneCoords(boneId, offsetX, offsetY, offsetZ);",
  "player.explodeHead(weaponHash);",
  "player.getAccuracy();",
  "player.getBoneIndex(boneId);",
  "player.getCombatFloat(p1);",
  "player.clearLastDamageBone();",
  "player.getArmour();",
  "player.clearWetness();",
  "player.getCombatMovement();",
  "player.cloneToTarget(ped2);",
  "player.clone(heading, networkHandle, pedHandle);",
  "player.forceMotionState(motionStateHash, p2, p3, p4);",
  "player.getAlertness();",
  "player.clearParachuteVariationOverride();",
  "player.clearParachutePackModelOverride();",
  "player.disableFiring(toggle);",
  "mp.game.player.disableFiring(true);",
  "player.clearParachuteModelOverride();",
  "player.clearWantedLevel();",
  "player.disableVehicleRewards();",
  "player.getAmmoInClip(weapon_hash);",
  "player.disableOutgoingSync();",
  "mp.game.player.getCauseOfMostRecentForceCleanup()",
  "mp.game.player.getAchievementProgress(achievement)",
  "mp.game.player.detachVirtualBound()",
  "mp.game.player.extendWorldBoundaryFor(x, y, z)",
  "mp.game.player.clearReserveParachuteModelOverride(player)",
  "mp.game.player.getEntityIsFreeAimingAt();",
  "player.getDesiredMoveBlendRatio();",
  "player.getIsTaskActive(taskNumber);",
  "player.getNavmeshRouteDistanceRemaining(p1, p2);",
  "player.getMeleeTargetFor();",
  "player.getNearbyPeds(sizeAndPeds, ignore);",
  "player.getHeadBlendData(headBlendData);",
  "player.getNumberOfDrawableVariations(componentId);",
  "player.getFloodInvincibility(p1);",
  "player.getDefensiveAreaPosition(p1);",
  "player.getMoney();",
  "player.getMaxHealth();",
  "player.getJackTarget();",
  "player.getNumberOfPropDrawableVariations(propId);",
  "player.getDrawableVariation(componentId);",
  "player.getDecorationsState();",
  "player.getNumberOfTextureVariations(componentId, drawableId);",
  "player.getEnveffScale();",
  "player.getHeadOverlayValue(overlayID);",
  "player.getNumberOfPropTextureVariations(propId, drawableId);",
  "player.getDeadPickupCoords(p1, p2);",
  "player.getNearbyVehicles(sizeAndVehs);",
  "player.getLastDamageBone(outBone);",
  "player.getExtractedDisplacement(worldSpace);",
  "player.getMount();",
  "player.getGroupIndex();",
  "player.getCombatRange();",
  "player.getGroup();",
  "player.getIsFreeAimingAt(entity);",
  "player.getCurrentStealthNoise();",
  "player.getHasReserveParachute();",
  "player.getName();",
  "player.getMaxArmour();",
  "mp.game.player.getInvincible();",
  "player.getHeadBlend();",
  "player.getFaceFeature(index);",
  "player.getHeadOverlay(overlayID);",
  "mp.game.player.getEntityIsFreeAimingAtRaw();",
  "mp.players.local.getCurrentScenarioId();",
  "mp.game.player.getNumberOfS()",
  "mp.game.player.getNumberOfPlayersInTeam(team)",
  "mp.game.player.getMaxWantedLevel()",
  "mp.game.player.getIndex()",
  "mp.game.player.getHealthRechargeLimit()",
  "mp.game.player.getFakeWantedLevel()",
  "mp.game.player.getPlayerWantedCentrePosition();",
  "mp.game.player.getPlayerInvincible();",
  "mp.game.player.getPlayerName();",
  "mp.game.player.getPlayerTargetEntity(entity);",
  "mp.game.player.getPlayerUnderwaterTimeRemaining();",
  "mp.game.player.getPlayerHasReserveParachute();",
  "mp.game.player.getPlayerWantedLevel();",
  "mp.game.player.getPlayerRgbColour(rgb);",
  "mp.game.player.getPlayerGroup();",
  "mp.game.player.getPlayerSprintTimeRemaining();",
  "mp.game.player.getPlayerCurrentStealthNoise();",
  "mp.game.player.getPlayerTeam();",
  "mp.game.player.getPlayerSprintStaminaRemaining();",
  "mp.game.player.getPlayerPed();",
  "mp.game.player.getPlayerPedScriptIndex();",
  "mp.game.player.getPlayerParachutePackTintIndex(tintIndex);",
  "mp.game.player.getPlayerParachuteTintIndex(tintIndex);",
  "mp.game.player.getPlayerMaxArmour();",
  "mp.game.player.getPlayerReserveParachuteTintIndex(index);",
  "mp.game.player.getPlayerParachuteSmokeTrailColor(rgb);",
  "player.getSequenceProgress();",
  "player.getPhoneGestureAnimTotalTime();",
  "player.getPhoneGestureAnimCurrentTime();",
  "player.getScriptTaskStatus(taskHash);",
  "player.getRagdollBoneIndex(bone);",
  "player.getRelationshipGroupDefaultHash();",
  "player.getPlayerIsFollowing();",
  "player.getSeatIsTryingToEnter();",
  "player.getParachuteState();",
  "player.getStealthMovement();",
  "player.getRelationshipGroupHash();",
  "player.getPropIndex(componentId);",
  "player.getParachuteLandingType();",
  "player.getSourceOfDeath();",
  "player.getResetFlag(flagId);",
  "player.getPropTextureIndex(componentId);",
  "player.getParachuteTintIndex(tintIndex);",
  "player.getRelationshipBetweens(ped2);",
  "player.getSprintTimeRemaining();",
  "player.getSprintStaminaRemaining();",
  "player.getPedScriptIndex();",
  "player.getParachutePackTintIndex(tintIndex);",
  "player.getReserveParachuteTintIndex(index);",
  "player.getRgbColour(r, g, b);",
  "player.getParachuteSmokeTrailColor(r, g, b);",
  "mp.game.player.getPlayersLastVehicle()",
  "mp.game.player.getParachuteModelOverride(player)",
  "mp.game.player.getReserveParachuteModelOverride(player)",
  "mp.game.player.getTimeSincePlayerDroveOnPavement();",
  "mp.game.player.getTimeSincePlayerDroveAgainstTraffic();",
  "mp.game.player.giveAchievementToPlayer(achievement);",
  "mp.game.player.hasPlayerDamagedAtLeastOneNonAnimalPed();",
  "mp.game.player.hasPlayerLeftTheWorld();",
  "mp.game.player.getTimeSincePlayerHitVehicle();",
  "mp.game.player.getWantedLevelThreshold(wantedLevel);",
  "mp.game.player.getWantedLevelRadius();",
  "mp.game.player.givePlayerRagdollControl(toggle);",
  "mp.game.player.hasPlayerBeenSpottedInStolenVehicle();",
  "mp.game.player.getTimeSincePlayerHitPed();",
  "mp.game.player.hasPlayerDamagedAtLeastOnePed();",
  "mp.game.player.hasAchievementBeenPassed(achievement);",
  "mp.game.player.hasForceCleanupOccurred(cleanupFlags);",
  "mp.game.player.hasPlayerTeleportFinished();",
  "player.getTextureVariation(componentId);",
  "player.getTimeOfDeath();",
  "player.giveHelmet(cannotRemove, helmetFlag, textureIndex);",
  "player.getVehicleIsUsing();",
  "player.hasHeadBlendFinished();",
  "player.getVehicleIsTryingToEnter();",
  "player.getVehicleIsIn(getLastVehicle);",
  "player.getsJacker();",
  "player.giveNmMessage();",
  "player.getType();",
  "player.getWantedCentrePosition();",
  "player.getTarget(entity);",
  "player.hasDamagedAtLeastOnePed();",
  "mp.game.player.getTeam();",
  "player.giveRagdollControl(toggle);",
  "player.getTimeSinceHitVehicle();",
  "player.getUnderwaterTimeRemaining();",
  "player.getTimeSinceDroveOnPavement();",
  "player.hasLeftTheWorld();",
  "player.hasBeenSpottedInStolenVehicle();",
  "player.getTimeSinceDroveAgainstTraffic();",
  "player.getWantedLevel();",
  "player.getTimeSinceHitPed();",
  "player.hasDamagedAtLeastOneNonAnimalPed();",
  "mp.game.player.getWantedLevelParoleDuration()",
  "mp.game.player.getTargetEntity()",
  "mp.game.player.giveAchievementTo(achievement)",
  "mp.game.player.getTimeSinceLastArrest()",
  "mp.game.player.getTimeSinceLastDeath()",
  "mp.game.player.intToPlayerindex(value);",
  "mp.game.player.isFreeAimingAtEntity(target)",
  "mp.game.player.intToParticipantindex(value);",
  "player.hasUseScenarioTask();",
  "player.isGettingUp();",
  "player.isCuffed();",
  "player.isDrivebyTaskUnderneathDrivingTask();",
  "player.isBeingArrested(atArresting);",
  "player.isActiveInScenario();",
  "player.isAPlayer();",
  "player.isHangingOnToVehicle();",
  "player.isDeadOrDying(p1);",
  "player.isAimingFromCover();",
  "player.isEvasiveDiving(evadingEntity);",
  "player.isBeingStunned(p1);",
  "player.isDiving();",
  "player.hideBloodDamageByZone(p1, p2);",
  "player.isHeadtracking(entity);",
  "player.isBeingStealthKilled();",
  "player.isBeingJacked();",
  "player.isGroupMember(groupId);",
  "player.isGoingIntoCover();",
  "player.isDoingDriveby();",
  "player.isGettingIntoAVehicle();",
  "player.isFleeing();",
  "player.isDucking();",
  "player.isFacingPed(otherPed, angle);",
  "player.isFatallyInjured();",
  "player.isConversationDead();",
  "player.isComponentVariationValid(componentId, drawableId, textureId);",
  "player.isFalling();",
  "player.isFreeAimingAt(entity);",
  "player.isDead();",
  "player.isControlOn();",
  "player.isFreeForAmbientTask();",
  "player.hasTeleportFinished();",
  "mp.game.player.isCamControlDisabled()",
  "mp.game.player.intToindex(args)",
  "mp.game.player.isBattleAware()",
  "mp.game.player.isBluetoothEnable()",
  "mp.game.player.isPlayerBeingArrested(atArresting);",
  "mp.game.player.isPlayerControlOn();",
  "mp.game.player.isPlayerFreeAiming();",
  "mp.game.player.isPlayerFreeForAmbientTask();",
  "mp.game.player.isPlayerDead();",
  "mp.game.player.isPlayerClimbing();",
  "player.isMoveBlendRatioSprinting();",
  "player.isMoveBlendRatioStill();",
  "player.isMountedWeaponTaskUnderneathDrivingTask();",
  "player.isMoveBlendRatioRunning();",
  "player.isInWrithe();",
  "player.isMoveBlendRatioWalking();",
  "player.isOnFoot();",
  "player.isInAnyPoliceVehicle();",
  "player.isInAnyHeli();",
  "player.isInAnyBoat();",
  "player.isJumpingOutOfVehicle();",
  "player.isOnMount();",
  "player.isInCombat(target);",
  "player.isJacking();",
  "player.isInMeleeCombat();",
  "player.isInGroup();",
  "player.isHurt();",
  "player.isHeadtrackingPed(ped2);",
  "player.isInAnyPlane();",
  "player.isOnVehicle();",
  "player.isMale();",
  "player.isInAnyTaxi();",
  "player.isInAnyTrain();",
  "player.isInModel(modelHash);",
  "player.isInParachuteFreeFall();",
  "player.isInCoverFacingLeft();",
  "player.isInjured();",
  "player.isInFlyingVehicle();",
  "player.isOnAnyBike();",
  "player.isInAnyVehicle(atGetIn);",
  "player.isInVehicle(vehicle, atGetIn);",
  "player.isHuman();",
  "player.isPlantingBomb();",
  "player.isModel(modelHash);",
  "player.isOnSpecificVehicle(vehicle);",
  "player.isInAnySub();",
  "player.isPerformingStealthKill();",
  "mp.game.player.isOnline()",
  "mp.game.player.isLoggingInNp()",
  "mp.game.player.isPlayerReadyForCutscene();",
  "mp.game.player.isSpecialAbilityActive();",
  "mp.game.player.isSpecialAbilityUnlocked(playerModel);",
  "mp.game.player.isSpecialAbilityMeterFull();",
  "mp.game.player.isPlayerTargettingAnything();",
  "mp.game.player.isTargettingEntity(entity.handle);",
  "mp.game.player.isPlayerWantedLevelGreater(wantedLevel);",
  "mp.game.player.isSpecialAbilityEnabled();",
  "mp.game.player.isPlayerRidingTrain();",
  "mp.game.player.isPlayerPlaying();",
  "mp.game.player.isPlayerScriptControlOn();",
  "mp.game.player.isPlayerPressingHorn();",
  "player.isRunningArrestTask();",
  "player.isSprinting();",
  "player.isStill();",
  "player.isPlayingPhoneGestureAnim();",
  "player.isRunning();",
  "player.isStrafing();",
  "player.isUsingActionMode();",
  "player.isVaulting();",
  "player.isUsingScenario(scenario);",
  "player.isReloading();",
  "player.isRunningMobilePhoneTask();",
  "player.isPropValid(componentId, drawableId, TextureId);",
  "player.isShooting();",
  "mp.players.local.isTryingToEnterALockedVehicle();",
  "player.isRagdoll();",
  "player.isTracked();",
  "player.isStopped();",
  "player.isUsingAnyScenario();",
  "player.isScriptedScenarioUsingConditionalAnim(animDict, anim);",
  "player.isShootingInArea(x1, y1, z1, x2, y2, z2, p7, p8);",
  "player.isSittingInAnyVehicle();",
  "player.isTrackedVisible();",
  "player.isSwimming();",
  "player.isSittingInVehicle(vehicle);",
  "player.isSwimmingUnderWater();",
  "player.isProne();",
  "player.isRunningRagdollTask();",
  "player.isRidingTrain();",
  "player.isPlaying();",
  "player.isTargettingAnything();",
  "player.isTargetting(entity);",
  "player.isScriptControlOn();",
  "player.isReadyForCutscene();",
  "player.isPressingHorn();",
  "mp.game.player.isSystemUiBeingDisplayed()",
  "mp.game.player.isTeleportActive()",
  "player.outputChatBox(text);",
  "player.removeFromVehicle()",
  "mp.game.player.resetPlayerInputGait();",
  "mp.game.player.playerAttachVirtualBound(p0, p1, p2, p3, p4, p5, p6, p7);",
  "mp.game.player.reportCrime(crimeType, wantedLvlThresh);",
  "mp.game.player.resetPlayerArrestState();",
  "mp.game.player.reserveEntityExplodesOnHighExplosionCombo(p1);",
  "mp.game.player.resetPlayerStamina();",
  "mp.game.player.removePlayerHelmet(p2);",
  "player.playAnimOnRunningScenario(animDict, animName);",
  "player.isWalking();",
  "player.resetStrafeClipset();",
  "player.resetInVehicleContext();",
  "player.registerTarget(target);",
  "player.resetVisibleDamage();",
  "player.registerheadshot();",
  "player.knockOffVehicle();",
  "player.knockOffProp(p1, p2, p3, p4);",
  "player.removeDefensiveArea(toggle);",
  "player.registerHatedTargetsAround(radius);",
  "player.resetRagdollTimer();",
  "player.removeHelmet(p2);",
  "player.resetMovementClipset(p1);",
  "player.resetLastVehicle();",
  "player.playFacialAnim(animName, animDict);",
  "player.removeFromGroup();",
  "player.isWearingHelmet();",
  "player.removePreferredCoverSet();",
  "player.resetInputGait();",
  "player.isWantedLevelGreater(wantedLevel);",
  "player.resetArrestState();",
  "player.reserveExplodesOnHighExplosionCombo(p1);",
  "player.resetStamina();",
  "player.removeWeapon(weaponHash);",
  "mp.game.player.reportPoliceSpotted()",
  "mp.game.player.pedId()",
  "mp.game.player.networkIdToInt()",
  "mp.game.player.setAutoGiveParachuteWhenEnterPlane(toggle);",
  "mp.game.player.setAllRandomPedsFlee(toggle);",
  "mp.game.player.setAllRandomPedsFleeThisFrame();",
  "mp.game.player.restoreStamina(p1);",
  "mp.game.player.resetWantedLevelDifficulty()",
  "mp.game.player.setAreasGeneratorOrientation();",
  "mp.game.player.setAirDragMultiplierForPlayersVehicle(multiplier);",
  "player.setAsEnemy(toggle);",
  "player.setBlendFromParents(p1, p2, p3, p4);",
  "player.setAsGroupLeader(groupId);",
  "player.setAllowVehiclesOverride(toggle);",
  "player.setCanBeTargetedWithoutLos(toggle);",
  "player.setCanBeTargetedWhenInjured(toggle);",
  "player.setCanBeTargetted(toggle);",
  "player.setCanBeTargettedByPlayer(player, toggle);",
  "player.setCanEvasiveDive(toggle);",
  "player.setCanArmIk(toggle);",
  "player.resurrect();",
  "player.setCanBeKnockedOffVehicle(state);",
  "player.setAccuracy(accuracy);",
  "player.reviveInjured();",
  "player.setAlternateMovementAnim(stance, animDictionary, animationName, p4, p5);",
  "player.resetWeaponMovementClipset();",
  "player.setAsGroupMember(groupId);",
  "player.setBlockingOfNonTemporaryEvents(toggle);",
  "player.setCanAttackFriendly(toggle, p2);",
  "player.setAsCop(toggle);",
  "player.setCanBeTargettedByTeam(team, toggle);",
  "player.setCanHeadIk(toggle);",
  "player.setCanBeDraggedOut(toggle);",
  "player.setCanBeShotInVehicle(toggle);",
  "player.setAngledDefensiveArea(p1, p2, p3, p4, p5, p6, p7, p8, p9);",
  "player.setCanCowerInCover(toggle);",
  "player.setArmour(amount);",
  "player.setAllowedToDuck(toggle);",
  "player.setAlertness(value);",
  "player.setCanDoDriveBy(toggle);",
  "player.restoreStamina(p1);",
  "player.setAirDragMultiplierForsVehicle(multiplier);",
  "player.setCanBeHassledByGangs(toggle);",
  "player.setAmmoInClip(weapon, ammo);",
  "mp.game.player.setAchievementProgress(achievement, progress)",
  "mp.game.player.setAutoGiveScubaGearWhenExitVehicle(toggle)",
  "mp.game.player.resetWorldBoundaryFor()",
  "mp.game.player.setBluetoothState(state)",
  "mp.game.player.setDisableAmbientMeleeMove(toggle);",
  "mp.game.player.setDispatchCopsForPlayer(toggle);",
  "player.setDesiredMoveBlendRatio(p1);",
  "player.setDriveTaskCruiseSpeed(cruiseSpeed);",
  "player.setCanPlayAmbientBaseAnims(toggle);",
  "player.setCanSmashGlass(p1, p2);",
  "player.setDiesInVehicle(toggle);",
  "player.setCanTeleportToGroupLeader(groupHandle, toggle);",
  "player.setCapsule(value);",
  "player.setCombatRange(p1);",
  "player.setDefensiveAreaDirection(p1, p2, p3, p4);",
  "player.setDefaultComponentVariation();",
  "player.setCombatMovement(combatMovement);",
  "player.setDefensiveAreaAttachedToPed(attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10);",
  "player.setDiesInWater(toggle);",
  "player.setDiesWhenInjured(toggle);",
  "player.setDecoration(collection, overlay);",
  "player.setCanPlayAmbientAnims(toggle);",
  "player.setCanLegIk(toggle);",
  "player.setCoordsNoGang(posX, posY, posZ);",
  "player.setCoordsKeepVehicle(posX, posY, posZ);",
  "player.setCombatAttributes(attributeIndex, enabled);",
  "player.setCowerHash(p1);",
  "player.setDesiredHeading(heading);",
  "player.setCanRagdoll(toggle);",
  "player.setCanPlayGestureAnims(toggle);",
  "player.setCanPeekInCover(toggle);",
  "player.setCombatAbility(p1);",
  "player.setDiesInSinkingVehicle(toggle);",
  "player.setCanRagdollFromPlayerImpact(toggle);",
  "player.setCanUseAutoConversationLookat(toggle);",
  "player.setDriveByClipsetOverride(clipset);",
  "player.setCanSwitchWeapon(toggle);",
  "player.setDiesInstantlyInWater(toggle);",
  "player.setCanTorsoIk(toggle);",
  "player.setCanPlayVisemeAnims(p1, p2);",
  "player.setDefensiveSphereAttachedToPed(p1, p2, p3, p4, p5, p6);",
  "player.setCombatFloat(combatType, p2);",
  "player.setClothPinFrames(toggle);",
  "mp.game.player.setControl(toggle, possiblyFlags);",
  "player.setCanUseCover(toggle);",
  "player.setDispatchCopsFor(toggle);",
  "player.setCanLeaveParachuteSmokeTrail(enabled);",
  "mp.players.local.setCanLosePropsOnDamage(false, 0);",
  "mp.game.player.setClothPackageIndex(index)",
  "mp.game.player.setClothLockCounter(value)",
  "mp.game.player.setEveryoneIgnorePlayer(toggle);",
  "mp.game.player.setIgnoreLowPriorityShockingEvents(toggle);",
  "mp.game.player.setHudAnimStopLevel(toggle);",
  "player.setHighFallTask(p1, p2, p3);",
  "player.setDriveTaskDrivingStyle(drivingStyle);",
  "player.setDucking(toggle);",
  "player.setGroupMemberPassengerIndex(index);",
  "player.setHelmetPropIndex(propIndex);",
  "player.setHearingRange(value);",
  "player.setHeadOverlayColor(overlayID, colorType, colorID, secondColorID);",
  "player.setHairColor(colorID, highlightColorID);",
  "player.setInVehicleContext(context);",
  "player.setHelmet(canWearHelmet);",
  "player.setFacialDecoration(collection, overlay);",
  "player.setFleeAttributes(attributes, p2);",
  "player.setFaceFeature(index, scale);",
  "player.setGeneratesDeadBodyEvents(toggle);",
  "mp.players.local.setHeadBlendData(shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);",
  "player.setEnableWeaponBlocking(toggle);",
  "player.setFiringPattern(patternHash);",
  "player.setGravity(toggle);",
  "player.setDriverAggressiveness(aggressiveness);",
  "player.setDriverAbility(ability);",
  "player.setGetOutUpsideDownVehicle(toggle);",
  "player.setEnveffScale(value);",
  "player.setHelmetFlag(helmetFlag);",
  "player.setIkTarget(p1, targetPed, boneLookAt, x, y, z, p7, duration, duration1);",
  "player.setEnableBoundAnkles(toggle);",
  "player.setEnableEnveffScale(toggle);",
  "player.setGestureGroup(p1);",
  "player.setIdRange(value);",
  "player.setHelmetTextureIndex(textureIndex);",
  "player.setIntoVehicle(vehicle, seatIndex);",
  "player.setExclusivePhoneRelationships();",
  "player.setFacialIdleAnimOverride(animName, animDict);",
  "player.setForcedAim(toggle);",
  "player.setForcedZoom(toggle);",
  "player.setForceSkipAimIntro(toggle);",
  "player.setHasReserveParachute();",
  "player.setEveryoneIgnore(toggle);",
  "mp.game.player.setHealthRechargeLimit(limit)",
  "mp.game.player.setFallDistance(p0, p1)",
  "mp.game.player.setHomingRocketDisabled(player, disableHoming)",
  "mp.game.player.setPlayerCanBeHassledByGangs(toggle);",
  "mp.game.player.setPlayerCanDoDriveBy(toggle);",
  "mp.game.player.setPlayerCanLeaveParachuteSmokeTrail(enabled);",
  "mp.game.player.setPlayerCanUseCover(toggle);",
  "mp.game.player.setMaxWantedLevel(maxWantedLevel);",
  "player.setParachuteTaskThrust(thrust);",
  "player.setPathPreferToAvoidWater(avoidWater);",
  "player.setPathAvoidFire(avoidFire);",
  "player.setPathCanUseLadders(Toggle);",
  "player.setPathCanUseClimbovers(Toggle);",
  "player.setParachuteTaskTarget(x, y, z);",
  "player.setMountedWeaponTarget(targetEntity, p2, x, y, z);",
  "player.setPathCanDropFromHeight(Toggle);",
  "player.setPathsWidthPlant(mayEnterWater);",
  "player.setMinMoveBlendRatio(value);",
  "player.setMoveRateOverride(value);",
  "player.setMotionBlur(toggle);",
  "player.setParachuteTintIndex(tintIndex);",
  "player.setNeverLeavesGroup(toggle);",
  "player.setMaxMoveBlendRatio(value);",
  "player.setMaxTimeInWater(value);",
  "player.setMaxTimeUnderwater(value);",
  "player.setKeepTask(toggle);",
  "player.setNameDebug(name);",
  "player.setMoveAnimsBlendOut();",
  "mp.players.local.setMoney(amount);",
  "player.setPinnedDown(pinned, i);",
  "player.setMovementClipset(clipSet, p2);",
  "player.setLegIkMode(mode);",
  "player.setLodMultiplier(multiplier);",
  "player.setModelIsSuppressed(toggle);",
  "player.setMaxHealth(value);",
  "player.setMinGroundTimeForStungun(ms);",
  "player.setMayNotEnterAnyVehicle();",
  "player.setInvincible(toggle);",
  "player.setLockonRangeOverride(range);",
  "player.setMeleeWeaponDamageModifier(modifier);",
  "player.setLockon(toggle);",
  "player.setMaxArmour(value);",
  "player.setMayOnlyEnterThisVehicle(vehicle);",
  "player.setParachuteSmokeTrailColor(r, g, b);",
  "player.setParachutePackTintIndex(tintIndex);",
  "player.setParachuteModelOverride(model);",
  "player.setMeleeWeaponDefenseModifier(modifier);",
  "player.setParachuteVariationOverride(p1, p2, p3, p4);",
  "player.setNoiseMultiplier(multiplier);",
  "player.setParachutePackModelOverride(model);",
  "mp.game.player.setInvincibleKeepRagdollEnabled(toggle)",
  "mp.game.player.setLeavePedBehind(toggle)",
  "mp.game.player.setPlayerMayOnlyEnterThisVehicle(vehicle);",
  "mp.game.player.setPlayerMaxArmour(value);",
  "mp.game.player.setPlayerStealthPerceptionModifier(value);",
  "mp.game.player.setPlayerParachutePackModelOverride(model);",
  "mp.game.player.setPlayerSimulateAiming(toggle);",
  "mp.game.player.setPlayerWeaponDefenseModifier(modifier);",
  "mp.game.player.setPlayerSprint(toggle);",
  "mp.game.player.setPlayerTeam(team);",
  "mp.game.player.setPlayerResetFlagPreferRearSeats(flags);",
  "mp.game.player.setPlayerMeleeWeaponDefenseModifier(modifier);",
  "mp.game.player.setPlayerForcedAim(toggle);",
  "mp.game.player.setTargetingMode(targetMode);",
  "mp.game.player.setPlayerParachuteModelOverride(model);",
  "mp.game.player.setPlayerClothLockCounter(value);",
  "mp.game.player.setPlayerLockonRangeOverride(range);",
  "mp.game.player.setPlayerParachuteSmokeTrailColor(rgb);",
  "mp.game.player.setPlayerVehicleDamageModifier(damageAmount);",
  "mp.game.player.setPlayerWantedCentrePosition(xyz);",
  "mp.game.player.setPlayerMeleeWeaponDamageModifier(modifier);",
  "mp.game.player.setPoliceRadarBlips(toggle);",
  "mp.game.player.setPlayerParachutePackTintIndex(tintIndex);",
  "mp.game.player.setPlayerNoiseMultiplier(multiplier);",
  "mp.game.player.setPlayerModel(model);",
  "mp.game.player.setPlayerMayNotEnterAnyVehicle();",
  "mp.game.player.setInvincible(toggle);",
  "mp.game.player.setPoliceIgnorePlayer(toggle);",
  "mp.game.player.setPlayerWantedLevelNoDrop(wantedLevelp2);",
  "mp.game.player.setPlayerWantedLevel(wantedLevel, disableNoMission);",
  "mp.game.player.setPlayerVehicleDefenseModifier(modifier);",
  "mp.game.player.setPlayerLockon(toggle);",
  "mp.game.player.setHealthRechargeMultiplier(regenRate);",
  "mp.game.player.setPlayerClothPinFrames(toggle);",
  "mp.game.player.setPlayerForcedZoom(toggle);",
  "mp.game.player.setPlayerForceSkipAimIntro(toggle);",
  "mp.game.player.setPlayerHasReserveParachute();",
  "mp.game.player.setPlayerControl(togglepossiblyFlags);",
  "mp.game.player.setPlayerClothPackageIndex(index);",
  "mp.game.player.setPlayerParachuteTintIndex(tintIndex);",
  "mp.game.player.setPlayerReserveParachuteTintIndex(index);",
  "mp.game.player.setPlayerSneakingNoiseMultiplier(multiplier);",
  "mp.game.player.setPlayerWeaponDamageModifier(damageAmount);",
  "mp.game.player.setPlayerParachuteVariationOverride(p1p2p3p4);",
  "mp.game.player.setPlayerWantedLevelNow(p1);",
  "player.setRagdollFlag(flag);",
  "player.setPreferredCoverSet(itemSet);",
  "player.setPropIndex(componentId, drawableId, TextureId, attach);",
  "player.setPlaysHeadOnHornAnimWhenDiesInVehicle(toggle);",
  "player.setPrimaryLookat(lookAt);",
  "player.setPoliceIgnore(toggle);",
  "mp.game.player.setRunSprintMultiplierFor(multiplier);",
  "mp.game.player.setSwimMultiplierFor(multiplier);",
  "mp.game.player.setSpecialAbilityMultiplier(multiplier);",
  "player.setTaskVehicleChaseIdealPursuitDistance(distance);",
  "player.setTaskVehicleChaseBehaviorFlag(flag, set);",
  "player.setRagdollForceFall();",
  "player.setTargetLossResponse(responseType);",
  "player.setToInformRespectedFriends(radius, maxFriends);",
  "player.setSteersAroundObjects(toggle);",
  "player.setSweat(sweat);",
  "player.setStrafeClipset(clipSet);",
  "player.setToLoadCover(toggle);",
  "player.setVisualFieldCenterAngle(angle);",
  "player.setSteersAroundPeds(toggle);",
  "player.setScriptedAnimSeatOffset(p1);",
  "player.setShootRate(shootRate);",
  "player.setVisualFieldMaxAngle(value);",
  "player.setVisualFieldMaxElevationAngle(angle);",
  "player.setStealthMovement(p1, action);",
  "player.setShootsAtCoord(x, y, z, toggle);",
  "player.setSphereDefensiveArea(x, y, z, radius, p5, p6);",
  "player.setRelationshipGroupDefaultHash(hash);",
  "player.setToRagdoll(time1, time2, ragdollType, p4, p5, p6);",
  "player.setResetFlag(flagId, doReset);",
  "player.setRandomProps();",
  "player.setRelationshipGroupHash(hash);",
  "player.setRandomComponentVariation(p1);",
  "player.setUsingActionMode(state, timeout, action);",
  "player.setResetRagdollFlag(flag);",
  "player.setSteersAroundVehicles(toggle);",
  "player.setSuffersCriticalHits(toggle);",
  "player.setStayInVehicleWhenJacked(toggle);",
  "player.setRagdollOnCollision(toggle);",
  "player.setSeeingRange(value);",
  "player.setTeam(team);",
  "player.setResetFlagPreferRearSeats(flags);",
  "player.setVehicleDefenseModifier(modifier);",
  "player.setStealthPerceptionModifier(value);",
  "player.setSprint(toggle);",
  "player.setVehicleDamageModifier(damageAmount);",
  "player.setSwimMultiplierFor(multiplier);",
  "player.setReserveParachuteTintIndex(index);",
  "player.setSneakingNoiseMultiplier(multiplier);",
  "player.setSimulateAiming(toggle);",
  "mp.game.player.setUnderwaterTimeRemaining(time)",
  "mp.game.player.setTargetingMode(targetMode)",
  "mp.game.player.setTargetLevel(targetLevel)",
  "mp.game.player.setSpecialAbility(p1, p2)",
  "mp.game.player.setReserveParachuteModelOverride(player, model)",
  "player.spawn(Vector3 position)",
  "mp.game.player.specialAbilityChargeMedium(p1p2);",
  "mp.game.player.specialAbilityReset();",
  "mp.game.player.specialAbilityChargeNormalized(normalizedValuep2);",
  "mp.game.player.setWantedLevelDifficulty(difficulty);",
  "mp.game.player.setWantedLevelMultiplier(multiplier);",
  "mp.game.player.specialAbilityChargeSmall(player, increment, gnoreActive, abilitySlot?);",
  "mp.game.player.specialAbilityFillMeter(p1);",
  "mp.game.player.simulatePlayerInputGait(speed, time, heading, headingRelativeToPed, notCancellable);",
  "mp.game.player.specialAbilityLock(playerModel);",
  "mp.game.player.specialAbilityDeactivateFast();",
  "mp.game.player.specialAbilityChargeAbsolute(p1p2);",
  "mp.game.player.specialAbilityDeactivate();",
  "mp.game.player.specialAbilityChargeContinuous(p1);",
  "mp.game.player.specialAbilityChargeLarge(p1p2);",
  "player.setWeaponMovementClipset(clipSet);",
  "player.setVisualFieldMinAngle(value);",
  "player.setWetnessHeight(height);",
  "player.setVisualFieldMinElevationAngle(angle);",
  "player.setVisualFieldPeripheralRange(range);",
  "player.setWetnessEnabledThisFrame();",
  "player.setWeaponDefenseModifier(modifier);",
  "player.setWantedLevelNoDrop(wantedLevel, p2);",
  "player.setWantedLevel(wantedLevel, disableNoMission);",
  "player.simulateInputGait(amount, gaitType, speed, p4, p5);",
  "player.setWantedCentrePosition(x, y, z);",
  "player.setWeaponDamageModifier(damageAmount);",
  "player.setWantedLevelNow(p1);",
  "mp.game.player.setWantedLevelHiddenEvasionTime(player, wantedLevel, lossTime)",
  "mp.game.player.specialAbilityActivate(p0, p1)",
  "mp.game.player.specialAbilityChargeOnMissionFailed(p1)",
  "mp.game.player.setWeaponDefenseModifier2(modifier)",
  "mp.game.player.startPlayerTeleport(x, y, z, heading, p5, p6, p7);",
  "mp.game.player.startFiringAmnesty(duration);",
  "mp.game.player.specialAbilityUnlock(playerModel);",
  "player.taskJump(unused);",
  "player.taskClearLookAt();",
  "player.taskGoToCoordWhileAimingAtCoord(x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern);",
  "player.taskBoatMission(boat, p2, p3, x, y, z, p7, maxSpeed, p9, p10, p11);",
  "player.taskFollowNavMeshToCoord(x, y, z, speed, timeout, stoppingRange, persistFollowing, unk);",
  "player.taskFollowNavMeshToCoordAdvanced(x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f);",
  "player.taskGoToCoordAnyMeansExtraParams(x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11);",
  "player.taskDriveBy(targetPed, p2, targetX, targetY, targetZ, p6, p7, p8, firingPattern);",
  "player.taskFollowToOffsetOf(entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing);",
  "player.taskCower(duration);",
  "player.taskGuardCurrentPosition(p1, p2, p3);",
  "player.taskCombatHatedTargetsInArea(x, y, z, radius, p5);",
  "player.taskForceMotionState(state, p2);",
  "player.taskLeaveAnyVehicle(p1, p2);",
  "player.taskFollowPointRoute(speed, unknown);",
  "player.taskGoToCoordAnyMeans(x, y, z, speed, p5, p6, walkingStyle, p8);",
  "player.taskAimGunAtCoord(x, y, z, time, p5, p6);",
  "player.taskAimGunScripted(scriptTask, p2, p3);",
  "player.taskCombatHatedTargetsAround(radius, p2);",
  "player.taskClimb(unused);",
  "player.taskChatTo(target, p2, p3, p4, p5, p6, p7);",
  "player.taskAchieveHeading(heading, timeout);",
  "player.taskGoToWhileAimingAtEntity(entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern);",
  "player.stopAnimTask(animDictionary, animationName, p3);",
  "mp.players.local.stopAnimTask(\"random@shop_robbery\", \"robbery_action_f\", 3.0);",
  "player.taskAimGunAt(entity, duration, p3);",
  "player.taskGetOffBoat(boat);",
  "player.taskGoToCoordAndAimAtHatedEntitiesNearCoord(gotoX, gotoY, gotoZ, aimNearX, aimNearY, aimNearZ, speed, shoot, unknown1, unknown2, unkTrue, unknown3, heading, firingPattern);",
  "player.taskGotoAiming(target, distanceToStopAt, StartAimingDist);",
  "player.taskHeliChase(entityToFollow, x, y, z);",
  "player.taskClimbLadder(p1);",
  "player.taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12);",
  "player.taskGuardSphereDefensiveArea(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);",
  "player.taskGoStraightToCoord(x, y, z, speed, timeout, targetHeading, distanceToSlide);",
  "player.taskGoStraightToCoord(x, y, z, 6.2, -1, player.getHeading(), 2);",
  "player.taskGotoOffset(p1, p2, x, y, z, duration);",
  "player.stopAnimPlayback(p1, p2);",
  "player.taskCombat(targetPed, p2, p3);",
  "player.taskArrest(target);",
  "player.stopWeaponFiringWhenDropped();",
  "mp.game.player.startTeleport(x, y, z, heading, tpVehicle, setToGround, fadeOut);",
  "mp.game.player.startTeleport(573.07, -352.55, 43.21, 0, false, true, true);",
  "mp.game.player.switchCrimeType(p1)",
  "mp.game.player.stopTeleport()",
  "player.taskRappelFromHeli(p1);",
  "player.taskScriptedAnimation(p1, p2, p3, p4, p5);",
  "mp.players.local.taskPutDirectlyIntoMelee(target, blendIn, timeInTask, phaseSync, combatFlag);",
  "player.taskTurnToFaceCoord(x, y, z, duration);",
  "player.taskSweepAim(anim, p2, p3, p4, p5, vehicle, p7, p8);",
  "player.taskSmartFlee(fleeTarget, distance, fleeTime, p4, p5);",
  "player.taskPlaneMission(plane, targetVehicle, targetPed, destinationX, destinationY, destinationZ, p7, physicsSpeed, p9, p10, maxAltitude, minAltitude);",
  "player.taskPlaneChase(entityToFollow, x, y, z);",
  "player.taskMoveNetwork(task, multiplier, p3, animDict, flags);",
  "player.taskMoveNetwork('arm_wrestling_sweep_paired_a_rev3', 0.0, 1, 'mini@arm_wrestling', 0);",
  "player.taskSeekCoverToCoords(x1, y1, z1, x2, y2, z2, p7, p8);",
  "player.taskStopPhoneGestureAnimation();",
  "player.taskPutDirectlyIntoCover(x, y, z, timeout, p5, p6, p7, p8, p9, p10);",
  "player.taskShockingEventReact(eventHandle);",
  "player.taskShootAtCoord(x, y, z, duration, firingPattern);",
  "player.taskUseNearestScenarioToCoordWarp(x, y, z, radius, p5);",
  "player.taskSlideToCoordHdgRate(x, y, z, heading, p5, p6);",
  "player.taskPerformSequence(taskSequence);",
  "player.taskTurnToFace(entity, duration);",
  "player.taskUseMobilePhoneTimed(duration);",
  "player.taskSkyDive();",
  "player.taskReloadWeapon(doReload);",
  "player.taskLookAt(lookAt, duration, flags, priority);",
  "player.taskReactAndFlee(fleeTarget);",
  "player.taskShuffleToNextVehicleSeat(vehicle);",
  "player.taskPlayAnimAdvanced(animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, speed, speedMultiplier, duration, flag, animTime, p14, p15);",
  "player.taskSeekCoverFrom(target, duration, p3);",
  "player.taskPlayPhoneGestureAnimation(p1, p2, p3, p4, p5, p6, p7);",
  "player.taskSetBlockingOfNonTemporaryEvents(toggle);",
  "player.taskStandStill(time);",
  "player.taskSmartFleeCoord(x, y, z, distance, time, p6, p7);",
  "player.taskOpenVehicleDoor(vehicle, timeOut, doorIndex, speed);",
  "player.taskPlantBomb(x, y, z, heading);",
  "player.taskSwapWeapon(p1);",
  "player.taskStealthKill(target, killType, p3, p4);",
  "player.taskStandGuard(x, y, z, heading, scenarioName);",
  "player.taskParachuteToTarget(x, y, z);",
  "player.taskUseMobilePhone(duration, p2);",
  "player.taskPatrol(p1, p2, p3, p4);",
  "player.taskPlaneLand(plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);",
  "player.taskSlideToCoord(x, y, z, heading, p5);",
  "player.taskParachute(p1);",
  "player.taskMoveNetworkAdvanced(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags);",
  "player.taskStayInCover();",
  "player.taskPause(ms);",
  "player.taskSetDecisionMaker(p1);",
  "player.taskSynchronizedScene(scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9);",
  "player.taskVehiclePark(vehicle, x, y, z, heading, mode, radius, keepEngineOn);",
  "player.taskVehicleEscort(vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance);",
  "player.taskVehicleShootAt(target, p2);",
  "player.taskVehicleDriveToCoordLongrange(vehicle, x, y, z, speed, driveMode, stopRange);",
  "player.taskVehicleGotoNavmesh(vehicle, x, y, z, speed, behaviorFlag, stoppingRange);",
  "player.taskVehicleHeliProtect(vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7);",
  "player.taskVehicleFollowWaypointRecording(vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9);",
  "player.taskVehicleChase(targetEnt);",
  "player.taskVehicleDriveWander(vehicle, speed, drivingStyle);",
  "player.uncuff();",
  "player.taskVehicleMissionTarget(vehicle, pedTarget, mode, maxSpeed, drivingStyle, minDistance, p7, p8);",
  "player.updateTaskAimGunScriptedTarget(target, x, y, z, disableBlockingClip);",
  "player.taskWarpIntoVehicle(vehicle, seat);",
  "player.updateTaskHandsUpDuration(duration);",
  "player.taskWanderStandard(p1, p2);",
  "player.taskVehicleTempAction(vehicle, action, time);",
  "player.taskWrithe(target, time, p3);",
  "player.taskWanderInArea(x, y, z, radius, minimalLength, timeBetweenWalks);",
  "player.taskVehicleDriveToCoord(vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10);",
  "player.taskVehicleAimAt(target);",
  "player.updateTaskSweepAim(entity);",
  "player.taskVehicleMissionCoorsTarget(vehicle, x, Y, Z, p5, p6, p7, p8, p9, p10);",
  "player.taskVehicleFollow(vehicle, targetEntity, drivingStyle, speed, minDistance);",
  "player.updateHeadBlendData(shapeMix, skinMix, thirdMix);",
  "player.wasKilledByTakedown();",
  "player.unregisterheadshot();",
  "player.wasKilledByStealth();",
  "mp.events.add(\"playerEnterCheckpoint\", eventHandler);",
  "mp.game.player.updateTeleport();",
  "mp.players.local.voiceAutoVolume();",
  "player.voice3d();",
  "mp.players.broadcast(text);",
  "void players.broadcastInRange(Vecto3 position, number range [, number dimension], string text);",
  "void players.broadcastInRange(number dimension, string text);",
  "mp.events.add(\"playerExitCheckpoint\", eventHandler);",
  "mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {});",
  "mp.events.add('playerResurrect', () => {});",
  "mp.players.reloadResources();",
  "blip.AddTextComponentSubstringName()",
  "blip.DoesExist()",
  "blip.EndTextCommandSetName()",
  "blip.GetAlpha()",
  "blip.GetColour()",
  "blip.GetHudColour()",
  "blip.GetInfoIdCoord()",
  "blip.GetCoords()",
  "blip.GetInfoIdDisplay()",
  "blip.GetInfoIdEntityIndex()",
  "blip.GetInfoIdType()",
  "blip.GetSprite()",
  "blip.HideNumberOn()",
  "mp.Entity.remoteId();",
  "mp.Entity.maxStreamed();",
  "checkpoint.SetCylinderHeight(nearHeight, farHeight, radius)",
  "checkpoint.SetIconRgba(red, green, blue, alpha)",
  "checkpoint.SetRgba(red, green, blue, alpha)",
  "checkpoint.Direction();",
  "checkpoint.Visible();",
  "checkpoint.Radius();",
  "ped.CanSpeak(speechName, unk)",
  "ped.AddVehicleSubtaskAttackCoord(x, y, z)",
  "ped.AddVehicleSubtaskAttack(ped2)",
  "ped.ClearDrivebyTaskUnderneathDrivingTask()",
  "ped.ClearSecondaryTask()",
  "ped.ClearTasks()",
  "ped.ClearTasksImmediately()",
  "ped.ControlMountedWeapon()",
  "ped.AddOwnedExplosion(x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake)",
  "ped.AttachPortablePickupTo(p1)",
  "ped.AddArmourTo(amount)",
  "ped.ApplyDamageTo(damageAmount, p2)",
  "ped.ApplyBlood(boneIndex, xRot, yRot, zRot, woundType)",
  "ped.ApplyBloodByZone(p1, p2, p3, int)",
  "ped.ApplyBloodDamageByZone(p1, p2, p3, p4)",
  "ped.ApplyBloodSpecific(p1, p2, p3, p4, p5, p6, p7, int)",
  "ped.ApplyDamageDecal(p1, p2, p3, p4, p5, p6, p7, p8, p9)",
  "ped.ApplyDamagePack(damagePack, damage, mult)",
  "ped.CanKnockOffVehicle()",
  "ped.CanInCombatSeeTarget(target)",
  "ped.CanRagdoll()",
  "ped.ClearAllProps()",
  "ped.ClearFacialIdleAnimOverride()",
  "ped.ClearAlternateMovementAnim(stance, p2)",
  "ped.ClearAlternateWalkAnim(p1)",
  "ped.ClearBloodDamageByZone(p1)",
  "ped.ClearDamageDecalByZone(p1, p2)",
  "ped.ClearDecorations()",
  "ped.ClearFacialDecorations()",
  "ped.ClearDriveByClipsetOverride()",
  "ped.ClearLastDamageBone()",
  "ped.ClearProp(propId)",
  "ped.ClearWetness()",
  "ped.Clone(heading, isNetwork, p3)",
  "ped.CloneToTarget(targetPed)",
  "ped.ClearBloodDamage()",
  "ped.AddAmmoTo(weaponHash, ammo)",
  "ped.ClearLastWeaponDamage()",
  "new Rage.Element.Ped(uint model, Vector3 position, float heading = 0f, uint dimension = 0u)",
  "ped.DisablePainAudio(toggle)",
  "ped.GetIsTaskActive(taskNumber)",
  "ped.GetDesiredMoveBlendRatio()",
  "ped.CreateMpGamerTag(username, pointedClanTag, isRockstarClan, clanTag, p5)",
  "ped.DoesHaveAiBlip()",
  "ped.EnableTennisMode(toggle, p2)",
  "ped.DetachPortablePickupFrom()",
  "ped.ExplodeHead(weaponHash)",
  "ped.FreezeCameraRotation()",
  "ped.ForceMotionState(motionStateHash, p2, p3, p4)",
  "ped.ForceToOpenParachute()",
  "ped.GetCombatFloat(p1)",
  "ped.GetDeadPickupCoords(p1, p2)",
  "ped.GetJackTarget()",
  "ped.GetMeleeTargetFor()",
  "ped.GetAccuracy()",
  "ped.GetAlertness()",
  "ped.GetArmour()",
  "ped.GetBoneCoords(boneId, offsetX, offsetY, offsetZ)",
  "ped.GetBoneIndex(boneId)",
  "ped.GetCauseOfDeath()",
  "ped.GetCombatMovement()",
  "ped.GetCombatRange()",
  "ped.GetConfigFlag(flagId, p2)",
  "ped.GetDecorationsState()",
  "ped.GetDefensiveAreaPosition(p1)",
  "ped.GetDrawableVariation(componentId)",
  "ped.GetEnveffScale()",
  "ped.GetExtractedDisplacement(worldSpace)",
  "ped.GetGroupIndex()",
  "ped.GetHeadBlendData(int)",
  "ped.GetHeadOverlayValue(overlayID)",
  "ped.GetLastDamageBone(int)",
  "ped.GetMaxHealth()",
  "ped.ExplodeProjectiles(weaponHash, p2)",
  "ped.GetAmmoInClip(weaponHash, int)",
  "ped.GetAmmoInWeapon(weaponhash)",
  "ped.GetBestWeapon(p1)",
  "ped.GetCurrentVehicleWeapon(int)",
  "ped.GetCurrentWeapon(int, p2)",
  "ped.GetCurrentWeaponEntityIndex()",
  "ped.GetIsGadgetEquipped(gadgetHash)",
  "ped.GetLockonRangeOfCurrentWeapon()",
  "ped.GetMaxAmmo(weaponHash, int)",
  "ped.GetMaxAmmoInClip(weaponHash, p2)",
  "ped.GetMaxRangeOfCurrentWeapon()",
  "ped.GetAmmoByType(ammoType)",
  "ped.GetAmmoTypeFromWeapon(weaponHash)",
  "ped.GetLastWeaponImpactCoord(coords)",
  "ped.GetAmmoTypeFromWeapon2(weaponHash)",
  "ped.GetNavmeshRouteDistanceRemaining(int, int)",
  "ped.GetNavmeshRouteResult()",
  "ped.GetPhoneGestureAnimCurrentTime()",
  "ped.GetPhoneGestureAnimTotalTime()",
  "ped.GetSequenceProgress()",
  "ped.HasUseScenarioTask()",
  "ped.GiveToPauseMenu(p1)",
  "ped.GetMount()",
  "ped.GetNumberOfDrawableVariations(componentId)",
  "ped.GetNumberOfPropDrawableVariations(propId)",
  "ped.GetNumberOfPropTextureVariations(propId, drawableId)",
  "ped.GetNumberOfTextureVariations(componentId, drawableId)",
  "ped.GetsJacker()",
  "ped.GetMoney()",
  "ped.GetNearbyPeds(int, ignore)",
  "ped.GetNearbyVehicles(int)",
  "ped.GetParachuteLandingType()",
  "ped.GetParachuteState()",
  "ped.GetParachuteTintIndex(int)",
  "ped.GetPropIndex(componentId)",
  "ped.GetPropTextureIndex(componentId)",
  "ped.GetRagdollBoneIndex(bone)",
  "ped.GetRelationshipGroupDefaultHash()",
  "ped.GetRelationshipGroupHash()",
  "ped.GetResetFlag(flagId)",
  "ped.GetSourceOfDeath()",
  "ped.GetStealthMovement()",
  "ped.GetTextureVariation(componentId)",
  "ped.GetTimeOfDeath()",
  "ped.GetType()",
  "ped.GetPlayerIsFollowing()",
  "ped.GetSeatIsTryingToEnter()",
  "ped.GetVehicleIsEntering()",
  "ped.GetVehicleIsIn(lastVehicle)",
  "ped.GetVehicleIsTryingToEnter()",
  "ped.GetVehicleIsUsing()",
  "ped.GiveHelmet(cannotRemove, helmetFlag, textureIndex)",
  "ped.GiveNmMessage()",
  "ped.HasHeadBlendFinished()",
  "ped.HasGotWeaponComponent(weaponHash, componentHash)",
  "ped.HasGotWeapon(weaponHash, p2)",
  "ped.GetWeapontypeInSlot(weaponSlot)",
  "ped.GetWeaponTintIndex(weaponHash)",
  "ped.GetSelectedWeapon()",
  "ped.GetWeaponObjectFrom(p1)",
  "ped.GiveDelayedWeaponTo(weaponHash, time, equipNow)",
  "ped.GiveWeaponComponentTo(weaponHash, componentHash)",
  "ped.GiveWeaponTo(weaponHash, ammoCount, isHidden, equipNow)",
  "ped.HasBeenDamagedByWeapon(weaponHash, weaponType)",
  "ped.IsAmbientSpeechDisabled()",
  "ped.IsAnySpeechPlaying()",
  "ped.IsBeingArrested()",
  "ped.IsDrivebyTaskUnderneathDrivingTask()",
  "ped.IsGettingUp()",
  "ped.IsCuffed()",
  "ped.IsActiveInScenario()",
  "ped.HideBloodDamageByZone(p1, p2)",
  "ped.IsConversationDead()",
  "ped.IsAimingFromCover()",
  "ped.IsAPlayer()",
  "ped.IsBeingJacked()",
  "ped.IsBeingStealthKilled()",
  "ped.IsBeingStunned(p1)",
  "ped.IsBlushColorValid()",
  "ped.IsClimbing()",
  "ped.IsComponentVariationValid(componentId, drawableId, textureId)",
  "ped.IsDeadOrDying(p1)",
  "ped.IsDiving()",
  "ped.IsDoingDriveby()",
  "ped.IsDucking()",
  "ped.IsEvasiveDiving(int)",
  "ped.IsFacingPed(otherPed, angle)",
  "ped.IsFalling()",
  "ped.IsFatallyInjured()",
  "ped.IsFleeing()",
  "ped.IsGettingIntoAVehicle()",
  "ped.IsGoingIntoCover()",
  "ped.IsGroupMember(groupId)",
  "ped.IsHairColorValid()",
  "ped.IsHangingOnToVehicle()",
  "ped.IsHeadtrackingEntity(entity)",
  "ped.IsHeadtrackingPed(ped2)",
  "ped.IsHuman()",
  "ped.IsInAnyBoat()",
  "ped.IsHurt()",
  "ped.IsInAnyHeli()",
  "ped.IsInAnyPlane()",
  "ped.IsInAnyPoliceVehicle()",
  "ped.IsInAnySub()",
  "ped.IsInAnyTaxi()",
  "ped.IsInAnyTrain()",
  "ped.IsInAnyVehicle(atGetIn)",
  "ped.IsInCombat(target)",
  "ped.IsInCover(p1)",
  "ped.IsCurrentWeaponSilenced()",
  "ped.IsArmed(p1)",
  "ped.IsFlashLightOn()",
  "ped.HideWeaponForScriptedCutscene(toggle)",
  "ped.IsInCurrentConversation()",
  "ped.IsRingtonePlaying()",
  "ped.IsMountedWeaponTaskUnderneathDrivingTask()",
  "ped.IsMoveBlendRatioRunning()",
  "ped.IsMoveBlendRatioSprinting()",
  "ped.IsMoveBlendRatioStill()",
  "ped.IsMoveBlendRatioWalking()",
  "ped.IsRunningArrestTask()",
  "ped.IsSprinting()",
  "ped.IsStill()",
  "ped.IsStrafing()",
  "ped.IsPlayingPhoneGestureAnim()",
  "ped.IsRunning()",
  "ped.IsInWrithe()",
  "ped.IsOnMount()",
  "ped.IsInjured()",
  "ped.IsInCoverFacingLeft()",
  "ped.IsInFlyingVehicle()",
  "ped.IsInGroup()",
  "ped.IsStandingInCover()",
  "ped.IsInMeleeCombat()",
  "ped.IsInModel(modelHash)",
  "ped.IsInParachuteFreeFall()",
  "ped.IsInVehicle(vehicle, atGetIn)",
  "ped.IsJacking()",
  "ped.IsJumping()",
  "ped.IsJumpingOutOfVehicle()",
  "ped.IsLipstickColorValid()",
  "ped.IsMale()",
  "ped.IsModel(modelHash)",
  "ped.IsOnAnyBike()",
  "ped.IsOnFoot()",
  "ped.IsOnSpecificVehicle(vehicle)",
  "ped.IsOnVehicle()",
  "ped.IsPerformingStealthKill()",
  "ped.IsPlantingBomb()",
  "ped.IsProne()",
  "ped.IsRagdoll()",
  "ped.IsReloading()",
  "ped.IsRespondingToEvent(eventId)",
  "ped.IsRunningMobilePhoneTask()",
  "ped.IsRunningRagdollTask()",
  "ped.IsShooting()",
  "ped.IsShootingInArea(x1, y1, z1, x2, y2, z2, p7, p8)",
  "ped.IsSittingInAnyVehicle()",
  "ped.IsSittingInVehicle(vehicle)",
  "ped.IsStopped()",
  "ped.IsSwimming()",
  "ped.IsScriptedScenarioUsingConditionalAnim(animDict, anim)",
  "ped.IsPropValid(componentId, drawableId, TextureId)",
  "ped.PlayPain(painID, p1, p3)",
  "ped.PlayAmbientSpeech2(speechName, speechParam, p3)",
  "ped.PlayAmbientSpeech1(speechName, speechParam, p3)",
  "ped.PlayStreamFrom()",
  "ped.IsWalking()",
  "ped.PlayAnimOnRunningScenario(animDict, animName)",
  "ped.SetAiBlipMaxDistance(distance)",
  "ped.IsTennisMode()",
  "ped.NetworkAddToSynchronisedScene(netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9)",
  "ped.NetworkGetPlayerIndexFrom()",
  "ped.ResetRagdollBlockingFlags(flags)",
  "ped.IsheadshotReady()",
  "ped.IsheadshotValid()",
  "ped.RemoveWeaponFrom(weaponHash)",
  "ped.RemoveWeaponComponentFrom(weaponHash, componentHash)",
  "ped.RemoveAllWeapons(p1)",
  "ped.MakeReload()",
  "ped.IsWeaponReadyToShoot()",
  "ped.IsWeaponComponentActive(weaponHash, componentHash)",
  "ped.IsSwimmingUnderWater()",
  "ped.IsTracked()",
  "ped.IsTryingToEnterALockedVehicle()",
  "ped.IsUsingActionMode()",
  "ped.IsUsingAnyScenario()",
  "ped.IsUsingScenario(scenario)",
  "ped.IsVaulting()",
  "ped.IsWearingHelmet()",
  "ped.IsTrackedVisible()",
  "ped.KnockOffProp(p1, p2, p3, p4)",
  "ped.KnockOffVehicle()",
  "ped.PlayFacialAnim(animName, animDict)",
  "ped.RegisterHatedTargetsAround(radius)",
  "ped.RegisterTarget(target)",
  "ped.RemoveDefensiveArea(toggle)",
  "ped.RemoveFromGroup()",
  "ped.RemoveHelmet(instantly)",
  "ped.RemovePreferredCoverSet()",
  "ped.ResetInVehicleContext()",
  "ped.ResetLastVehicle()",
  "ped.ResetMovementClipset(p1)",
  "ped.ResetRagdollTimer()",
  "ped.ResetStrafeClipset()",
  "ped.ResetVisibleDamage()",
  "ped.ResetWeaponMovementClipset()",
  "ped.Resurrect()",
  "ped.ReviveInjured()",
  "ped.SetAccuracy(accuracy)",
  "ped.SetAlertness(value)",
  "ped.Registerheadshot()",
  "ped.SetAllowVehiclesOverride(toggle)",
  "ped.SetAmbientVoiceName(name)",
  "ped.SetChanceOfFiringBlanks(xBias, yBias)",
  "ped.SetAmmoToDrop(p1)",
  "ped.SetAmmoByType(ammoType, ammo)",
  "ped.SetAmmo(weaponHash, ammo, p3)",
  "ped.SetAmmoInClip(weaponHash, ammo)",
  "ped.SetBlockingOfNonTemporaryEvents(toggle)",
  "ped.SetCanAttackFriendly(toggle, p2)",
  "ped.SetCombatFloat(combatType, p2)",
  "ped.SetAllowedToDuck(toggle)",
  "ped.SetAlternateMovementAnim(stance, animDictionary, animationName, p4, p5)",
  "ped.SetAlternateWalkAnim(animDict, animName, p3, p4)",
  "ped.SetAngledDefensiveArea(p1, p2, p3, p4, p5, p6, p7, p8, p9)",
  "ped.SetArmour(amount)",
  "ped.SetAsCop(toggle)",
  "ped.SetAsEnemy(toggle)",
  "ped.SetAsGroupLeader(groupId)",
  "ped.SetAsGroupMember(groupId)",
  "ped.SetBlendFromParents(p1, p2, p3, p4)",
  "ped.SetBoundsOrientation(p1, p2, p3, p4, p5)",
  "ped.SetCanArmIk(toggle)",
  "ped.SetCanBeDraggedOut(toggle)",
  "ped.SetCanBeKnockedOffVehicle(state)",
  "ped.SetCanBeShotInVehicle(toggle)",
  "ped.SetCanBeTargetedWhenInjured(toggle)",
  "ped.SetCanBeTargetedWithoutLos(toggle)",
  "ped.SetCanBeTargetted(toggle)",
  "ped.SetCanBeTargettedByPlayer(player, toggle)",
  "ped.SetCanBeTargettedByTeam(team, toggle)",
  "ped.SetCanCowerInCover(toggle)",
  "ped.SetCanEvasiveDive(toggle)",
  "ped.SetCanHeadIk(toggle)",
  "ped.SetCanLegIk(toggle)",
  "ped.SetCanPeekInCover(toggle)",
  "ped.SetCanPlayAmbientAnims(toggle)",
  "ped.SetCanPlayAmbientBaseAnims(toggle)",
  "ped.SetCanPlayGestureAnims(toggle)",
  "ped.SetCanPlayVisemeAnims(toggle, p2)",
  "ped.SetCanRagdoll(toggle)",
  "ped.SetCanSmashGlass(p1, p2)",
  "ped.SetCanSwitchWeapon(toggle)",
  "ped.SetCanTeleportToGroupLeader(groupHandle, toggle)",
  "ped.SetCanTorsoIk(toggle)",
  "ped.SetCanRagdollFromPlayerImpact(toggle)",
  "ped.SetCanUseAutoConversationLookat(toggle)",
  "ped.SetCapsule(value)",
  "ped.SetClothProne(p1)",
  "ped.SetCombatAbility(p1)",
  "ped.SetCombatAttributes(attributeIndex, enabled)",
  "ped.SetCombatMovement(combatMovement)",
  "ped.SetDriveTaskDrivingStyle(drivingStyle)",
  "ped.SetDesiredMoveBlendRatio(p1)",
  "ped.SetDecisionMaker(name)",
  "ped.SetEnemyAiBlip(showViewCones)",
  "ped.SetDecoration(collection, overlay)",
  "ped.SetFacialDecoration(collection, overlay)",
  "ped.SetGadget(gadgetHash, p2)",
  "ped.SetDropsWeaponsWhenDead(toggle)",
  "ped.SetDropsWeapon()",
  "ped.SetDropsInventoryWeapon(weaponHash, xOffset, yOffset, zOffset, p5)",
  "ped.SetCurrentWeaponVisible(visible, deselectWeapon, p3, p4)",
  "ped.SetCurrentWeapon(weaponHash, equipNow)",
  "ped.SetCurrentVehicleWeapon(weaponHash)",
  "ped.SetEnableBoundAnkles(toggle)",
  "ped.SetEnableHandcuffs(toggle)",
  "ped.SetEnableEnveffScale(toggle)",
  "ped.SetEnableScuba(toggle)",
  "ped.SetFacialIdleAnimOverride(animName, animDict)",
  "ped.SetEyeColor(index)",
  "ped.SetCombatRange(p1)",
  "ped.SetConfigFlag(flagId, value)",
  "ped.SetCoordsKeepVehicle(posX, posY, posZ)",
  "ped.SetCoordsNoGang(posX, posY, posZ)",
  "ped.SetCowerHash(p1)",
  "ped.SetDefaultComponentVariation()",
  "ped.SetDefensiveAreaAttachedToPed(attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10)",
  "ped.SetDefensiveAreaDirection(p1, p2, p3, p4)",
  "ped.SetDefensiveSphereAttachedToPed(target, xOffset, yOffset, zOffset, radius, p6)",
  "ped.SetDesiredHeading(heading)",
  "ped.SetDiesInstantlyInWater(toggle)",
  "ped.SetDiesInSinkingVehicle(toggle)",
  "ped.SetDiesInVehicle(toggle)",
  "ped.SetDiesInWater(toggle)",
  "ped.SetDiesWhenInjured(toggle)",
  "ped.SetDriveByClipsetOverride(clipset)",
  "ped.SetDucking(toggle)",
  "ped.SetEnableWeaponBlocking(toggle)",
  "ped.SetEnveffScale(value)",
  "ped.SetFiringPattern(patternHash)",
  "ped.SetFleeAttributes(attributes, p2)",
  "ped.SetGeneratesDeadBodyEvents(toggle)",
  "ped.SetGestureGroup(animGroupGesture)",
  "ped.SetGetOutUpsideDownVehicle(toggle)",
  "ped.SetGravity(toggle)",
  "ped.SetGroupMemberPassengerIndex(index)",
  "ped.SetHairColor(colorID, highlightColorID)",
  "ped.SetHeadBlendData(shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent)",
  "ped.SetHeadOverlay(overlayID, index, opacity)",
  "ped.SetFaceFeature(index, scale)",
  "ped.SetIsDrunk(toggle)",
  "ped.SetMute()",
  "ped.SetHighFallTask(p1, p2, p3)",
  "ped.SetParachuteTaskTarget(x, y, z)",
  "ped.SetParachuteTaskThrust(thrust)",
  "ped.SetPathAvoidFire(avoidFire)",
  "ped.SetPathCanDropFromHeight(Toggle)",
  "ped.SetPathCanUseClimbovers(Toggle)",
  "ped.SetPathCanUseLadders(Toggle)",
  "ped.SetPathMayEnterWater(mayEnterWater)",
  "ped.SetPathPreferToAvoidWater(avoidWater)",
  "ped.SetPathsBackToOriginal(p1, p2, p3, p4, p5, p6)",
  "ped.SetInfiniteAmmoClip(toggle)",
  "ped.SetInfiniteAmmo(toggle, weaponHash)",
  "ped.SetIkTarget(p1, targetPed, boneLookAt, x, y, z, p7, duration, duration1)",
  "ped.SetHeadOverlayColor(overlayID, colorType, colorID, secondColorID)",
  "ped.SetHearingRange(value)",
  "ped.SetHelmet(canWearHelmet)",
  "ped.SetHelmetFlag(helmetFlag)",
  "ped.SetHelmetPropIndex(propIndex, p2)",
  "ped.SetHelmetTextureIndex(textureIndex)",
  "ped.SetIdRange(value)",
  "ped.SetIntoVehicle(vehicle, seatIndex)",
  "ped.SetInVehicleContext(context)",
  "ped.SetKeepTask(toggle)",
  "ped.SetLegIkMode(mode)",
  "ped.SetLodMultiplier(multiplier)",
  "ped.SetMaxHealth(value)",
  "ped.SetMaxMoveBlendRatio(value)",
  "ped.SetMaxTimeInWater(value)",
  "ped.SetMaxTimeUnderwater(value)",
  "ped.SetMinGroundTimeForStungun(ms)",
  "ped.SetMinMoveBlendRatio(value)",
  "ped.SetModelIsSuppressed(toggle)",
  "ped.SetMoney(amount)",
  "ped.SetMotionBlur(toggle)",
  "ped.SetMovementClipset(clipSet, p2)",
  "ped.SetMoveAnimsBlendOut()",
  "ped.SetMoveRateOverride(value)",
  "ped.SetNeverLeavesGroup(toggle)",
  "ped.SetParachuteTintIndex(tintIndex)",
  "ped.SetPinnedDown(pinned, i)",
  "ped.SetPreferredCoverSet(itemSet)",
  "ped.SetPrimaryLookat(lookAt)",
  "ped.SetPropIndex(componentId, drawableId, TextureId, attach)",
  "ped.SetRagdollForceFall()",
  "ped.SetRagdollBlockingFlags(flags)",
  "ped.SetNameDebug(name)",
  "ped.SetPlaysHeadOnHornAnimWhenDiesInVehicle(toggle)",
  "ped.SetPopulationBudget()",
  "ped.SetTalk()",
  "ped.SetScream()",
  "ped.StopCurrentPlayingAmbientSpeech()",
  "ped.StopRingtone()",
  "ped.StopSpeaking(shaking)",
  "ped.SetWaypointRouteOffset(p1, p2, p3)",
  "ped.SetTaskVehicleChaseBehaviorFlag(flag, set)",
  "ped.SetTaskVehicleChaseIdealPursuitDistance(distance)",
  "ped.StopAnimPlayback(p1, p2)",
  "ped.StopAnimTask(animDictionary, animationName, p3)",
  "ped.SetWeaponAnimationOverride(animStyle)",
  "ped.SetWeaponTintIndex(weaponHash, tintIndex)",
  "ped.SkipNextReloading()",
  "ped.SetRagdollOnCollision(toggle)",
  "ped.SetRandomComponentVariation(p1)",
  "ped.SetRandomProps()",
  "ped.SetRelationshipGroupDefaultHash(hash)",
  "ped.SetRelationshipGroupHash(hash)",
  "ped.SetReserveParachuteTintIndex(p1)",
  "ped.SetResetFlag(flagId, doReset)",
  "ped.SetSeeingRange(value)",
  "ped.SetShootsAtCoord(x, y, z, toggle)",
  "ped.SetShootRate(shootRate)",
  "ped.SetSphereDefensiveArea(x, y, z, radius, p5, p6)",
  "ped.SetStayInVehicleWhenJacked(toggle)",
  "ped.SetStealthMovement(p1, action)",
  "ped.SetSteersAroundObjects(toggle)",
  "ped.SetSteersAroundPeds(toggle)",
  "ped.SetSteersAroundVehicles(toggle)",
  "ped.SetStrafeClipset(clipSet)",
  "ped.SetSuffersCriticalHits(toggle)",
  "ped.SetSweat(sweat)",
  "ped.SetTargetLossResponse(responseType)",
  "ped.SetToInformRespectedFriends(radius, maxFriends)",
  "ped.SetToLoadCover(toggle)",
  "ped.SetToRagdoll(time1, time2, ragdollType, p4, p5, p6)",
  "ped.SetToRagdollWithFall(time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13)",
  "ped.SetUsingActionMode(p1, p2, action)",
  "ped.SetVisualFieldCenterAngle(angle)",
  "ped.SetVisualFieldMaxAngle(value)",
  "ped.SetVisualFieldMaxElevationAngle(angle)",
  "ped.SetVisualFieldMinAngle(value)",
  "ped.SetVisualFieldMinElevationAngle(angle)",
  "ped.SetVisualFieldPeripheralRange(range)",
  "ped.SetWeaponMovementClipset(clipSet)",
  "ped.SetWetnessEnabledThisFrame()",
  "ped.SetScriptedAnimSeatOffset(p1)",
  "ped.SetTargettableVehicleDestroy(vehicleComponent, destroyType)",
  "ped.StopWeaponFiringWhenDropped()",
  "ped.SetWetnessHeight(height)",
  "ped.TaskGoTo(target, duration, distance, speed, p5, p6)",
  "ped.TaskLookAtCoord(x, y, z, duration, p5, p6)",
  "ped.TaskAchieveHeading(heading, timeout)",
  "ped.TaskAimGunAtCoord(x, y, z, time, p5, p6)",
  "ped.TaskAimGunAtEntity(entity, duration, p3)",
  "ped.TaskAimGunScripted(scriptTask, p2, p3)",
  "ped.TaskArrest(target)",
  "ped.TaskChatTo(target, p2, p3, p4, p5, p6, p7)",
  "ped.TaskClearLookAt()",
  "ped.TaskClimb(unused)",
  "ped.TaskClimbLadder(p1)",
  "ped.TaskCombatHatedTargetsAround(radius, p2)",
  "ped.TaskCombatHatedTargetsInArea(x, y, z, radius, p5)",
  "ped.TaskCombat(targetPed, p2, p3)",
  "ped.TaskCower(duration)",
  "ped.TaskEnterVehicle(vehicle, timeout, seat, speed, p5, p6)",
  "ped.TaskFollowNavMeshToCoord(x, y, z, speed, timeout, stoppingRange, persistFollowing, unk)",
  "ped.TaskFollowPointRoute(speed, unknown)",
  "ped.TaskFollowToOffsetOfEntity(entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing)",
  "ped.TaskForceMotionState(state, p2)",
  "ped.TaskGetOffBoat(boat)",
  "ped.TaskGotoEntityAiming(target, distanceToStopAt, StartAimingDist)",
  "ped.TaskGotoEntityOffset(p1, p2, x, y, z, duration)",
  "ped.TaskGoStraightToCoord(x, y, z, speed, timeout, targetHeading, distanceToSlide)",
  "ped.TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12, p13)",
  "ped.TaskGoToCoordWhileAimingAtCoord(x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern)",
  "ped.TaskGoToCoordAnyMeansExtraParams(x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12)",
  "ped.TaskGoToCoordAnyMeans(x, y, z, speed, p5, p6, walkingStyle, p8)",
  "ped.TaskGoToEntityWhileAimingAtEntity(entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern)",
  "ped.TaskHandsUp(duration, facingPed, p3, p4)",
  "ped.TaskJump(unused, p2, p3)",
  "ped.TaskLeaveAnyVehicle(p1, p2)",
  "ped.TaskLeaveVehicle(vehicle, flags)",
  "ped.TaskLookAtEntity(lookAt, duration, unknown1, unknown2)",
  "ped.TaskMoveNetworkAdvanced(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags)",
  "ped.TaskMoveNetwork(task, multiplier, p3, animDict, flags)",
  "ped.TaskOpenVehicleDoor(vehicle, timeOut, doorIndex, speed)",
  "ped.TaskParachute(p1, p2)",
  "ped.TaskParachuteToTarget(x, y, z)",
  "ped.TaskPatrol(p1, p2, p3, p4)",
  "ped.TaskPause(ms)",
  "ped.TaskPerformSequence(taskSequence)",
  "ped.TaskPlantBomb(x, y, z, heading)",
  "ped.TaskPlayAnim(animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, lockX, lockY, lockZ)",
  "ped.TaskPlayAnimAdvanced(animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, speed, speedMultiplier, duration, flag, animTime, p14, p15)",
  "ped.TaskPlayPhoneGestureAnimation(animDict, animation, boneMaskType, p4, p5, p6, p7)",
  "ped.TaskPutDirectlyIntoCover(x, y, z, timeout, p5, p6, p7, p8, p9, p10)",
  "ped.TaskPutDirectlyIntoMelee(meleeTarget, p2, p3, p4, p5)",
  "ped.TaskFollowNavMeshToCoordAdvanced(x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f)",
  "ped.SwitchOutPlayer(flags, unknown)",
  "ped.TaskShootAt(target, duration, firingPattern)",
  "ped.TaskSlideToCoord(x, y, z, heading, p5)",
  "ped.TaskSlideToCoordHdgRate(x, y, z, heading, p5, p6)",
  "ped.TaskRappelFromHeli(unused)",
  "ped.TaskReactAndFlee(fleeTarget)",
  "ped.TaskReloadWeapon(unused)",
  "ped.TaskScriptedAnimation(int, int, int, p4, p5)",
  "ped.TaskSeekCoverFrom(target, duration, p3)",
  "ped.TaskSeekCoverFromPos(x, y, z, duration, p5)",
  "ped.TaskSeekCoverToCoords(x1, y1, z1, x2, y2, z2, p7, p8)",
  "ped.TaskSetBlockingOfNonTemporaryEvents(toggle)",
  "ped.TaskShockingEventReact(eventHandle)",
  "ped.TaskShootAtCoord(x, y, z, duration, firingPattern)",
  "ped.TaskShuffleToNextVehicleSeat(vehicle, p2)",
  "ped.TaskSkyDive(p1)",
  "ped.TaskSmartFleeCoord(x, y, z, distance, time, p6, p7)",
  "ped.TaskSmartFlee(fleeTarget, distance, fleeTime, p4, p5)",
  "ped.TaskStandGuard(x, y, z, heading, scenarioName)",
  "ped.TaskStandStill(time)",
  "ped.TaskStartScenarioAtPosition(scenarioName, x, y, z, heading, duration, sittingScenario, teleport)",
  "ped.TaskStartScenarioInPlace(scenarioName, unkDelay, playEnterAnim)",
  "ped.TaskStayInCover()",
  "ped.TaskStopPhoneGestureAnimation(p1)",
  "ped.TaskSwapWeapon(p1)",
  "ped.TaskSweepAimEntity(anim, p2, p3, p4, p5, vehicle, p7, p8)",
  "ped.TaskSynchronizedScene(scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9)",
  "ped.TaskThrowProjectile(x, y, z, p4, p5)",
  "ped.TaskTurnToFaceCoord(x, y, z, duration)",
  "ped.TaskTurnToFaceEntity(entity, duration)",
  "ped.TaskUseMobilePhone(p1, p2)",
  "ped.TaskUseMobilePhoneTimed(duration)",
  "ped.TaskUseNearestScenarioToCoord(x, y, z, distance, duration)",
  "ped.TaskUseNearestScenarioToCoordWarp(x, y, z, radius, p5)",
  "ped.TaskVehicleAimAtCoord(x, y, z)",
  "ped.TaskVehicleAimAt(target)",
  "ped.TaskVehicleDriveToCoord(vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10)",
  "ped.TaskVehicleDriveToCoordLongrange(vehicle, x, y, z, speed, driveMode, stopRange)",
  "ped.TaskVehicleDriveWander(vehicle, speed, drivingStyle)",
  "ped.TaskVehicleEscort(vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance)",
  "ped.TaskVehicleFollowWaypointRecording(vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9)",
  "ped.TaskVehicleGotoNavmesh(vehicle, x, y, z, speed, behaviorFlag, stoppingRange)",
  "ped.TaskVehicleMissionCoorsTarget(vehicle, x, y, z, p5, p6, p7, p8, p9, p10)",
  "ped.TaskVehiclePark(vehicle, x, y, z, heading, mode, radius, keepEngineOn)",
  "ped.TaskVehicleShootAtCoord(x, y, z, p4)",
  "ped.TaskVehicleShootAt(target, p2)",
  "ped.TaskWanderInArea(x, y, z, radius, minimalLength, timeBetweenWalks)",
  "ped.TaskWanderStandard(p1, p2)",
  "ped.TaskWarpIntoVehicle(vehicle, seat)",
  "ped.TaskWrithe(target, time, p3, p4, p5)",
  "ped.TaskVehicleMissionTarget(vehicle, pedTarget, mode, maxSpeed, drivingStyle, minDistance, p7, p8)",
  "ped.Uncuff()",
  "ped.UpdateTaskHandsUpDuration(duration)",
  "ped.UpdateTaskSweepAimEntity(entity)",
  "ped.ToNet()",
  "ped.UpdateHeadBlendData(shapeMix, skinMix, thirdMix)",
  "ped.WasKilledByStealth()",
  "ped.WasKilledByTakedown()",
  "vehicle.BlipSiren()",
  "vehicle.AddClanDecalTo(ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha)",
  "vehicle.DoesHaveDecal(p1)",
  "vehicle.CreatePedInside(pedType, modelHash, seat, isNetwork, p5)",
  "vehicle.CreateRandomPedAsDriver(returnHandle)",
  "vehicle.AddUpsidedownCheck()",
  "vehicle.AreAllWindowsIntact()",
  "vehicle.AreAnySeatsFree()",
  "vehicle.ArePropellersUndamaged()",
  "vehicle.AreWingsIntact()",
  "vehicle.AttachToCargobob(cargobob, p2, x, y, z)",
  "vehicle.AttachToTrailer(trailer, radius)",
  "vehicle.GetBoatAnchor()",
  "vehicle.CanShuffleSeat(p1)",
  "vehicle.ClearCustomPrimaryColour()",
  "vehicle.ClearCustomSecondaryColour()",
  "vehicle.CloseBombBayDoors()",
  "vehicle.ControlLandingGear(state)",
  "vehicle.DetachFromAnyCargobob()",
  "vehicle.DetachFromAnyTowTruck()",
  "vehicle.DetachFromCargobob(cargobob)",
  "vehicle.DetachFromTrailer()",
  "vehicle.DisablePlaneAileron(p1, p2)",
  "vehicle.DoesExtraExist(extraId)",
  "vehicle.DoesHaveRoof()",
  "vehicle.DoesHaveStuckVehicleCheck()",
  "vehicle.Explode(isAudible, isInvisible)",
  "vehicle.ExplodeInCutscene(p1)",
  "vehicle.DoesHaveWeapons()",
  "vehicle.FixWindow(index)",
  "vehicle.DoesHaveDoor(doorIndex)",
  "vehicle.GetAcceleration()",
  "vehicle.GetBodyHealth()",
  "vehicle.CanParachuteBeActivated()",
  "vehicle.GetCauseOfDestruction()",
  "vehicle.GetBodyHealth2(p1, p2, p3, p4, p5, p6)",
  "vehicle.AnyPassengersRappeling()",
  "vehicle.EjectJb700Roof(x, y, z)",
  "vehicle.DetachWindscreen()",
  "new RAGE.Elements.Vehicle(hash, position, heading, numberPlate, alpha, locked, primColor, secColor, dimension);",
  "vehicle.Controller();",
  "vehicle.Gear();",
  "vehicle.GetDefaultHorn()",
  "vehicle.GetHornHash()",
  "vehicle.GetConvertibleRoofState()",
  "vehicle.GetEntryPositionOfDoor(doorIndex)",
  "vehicle.GetHasLowerableWheels()",
  "vehicle.GetHeliMainRotorHealth()",
  "vehicle.GetHeliEngineHealth()",
  "vehicle.GetHeliTailRotorHealth()",
  "vehicle.GetIsLeftHeadlightDamaged()",
  "vehicle.GetIsRightHeadlightDamaged()",
  "vehicle.GetIsEngineRunning()",
  "vehicle.GetIsPrimaryColourCustom()",
  "vehicle.GetIsSecondaryColourCustom()",
  "vehicle.GetLandingGearState()",
  "vehicle.GetLastPedInSeat(seatIndex)",
  "vehicle.GetLiveryName(liveryIndex)",
  "vehicle.GetClass()",
  "vehicle.GetColor(int, int, int)",
  "vehicle.GetColours(int, int)",
  "vehicle.GetColourCombination()",
  "vehicle.GetCustomPrimaryColour(int, int, int)",
  "vehicle.GetCustomSecondaryColour(int, int, int)",
  "vehicle.GetDeformationAtPos(offsetX, offsetY, offsetZ)",
  "vehicle.GetDirtLevel()",
  "vehicle.GetDoorsLockedForPlayer(player)",
  "vehicle.GetDoorAngleRatio(door)",
  "vehicle.GetDoorLockStatus()",
  "vehicle.GetEngineHealth()",
  "vehicle.GetEnveffScale()",
  "vehicle.GetExtraColours(int, int)",
  "vehicle.GetInteriorColour(int)",
  "vehicle.GetDashboardColour(int)",
  "vehicle.GetLayoutHash()",
  "vehicle.GetLightsState(int, int)",
  "vehicle.GetLivery()",
  "vehicle.GetLiveryCount()",
  "vehicle.GetMaxBraking()",
  "vehicle.GetMaxNumberOfPassengers()",
  "vehicle.GetMaxTraction()",
  "vehicle.GetMod(modType)",
  "vehicle.GetModColor1(int, int, int)",
  "vehicle.GetModColor1Name(p1)",
  "vehicle.GetModColor2(int, int)",
  "vehicle.GetHandlingFloat(key)",
  "vehicle.GetHandlingInt(key)",
  "vehicle.GetHandlingVector(key)",
  "vehicle.GetDefaultHandlingFloat(key)",
  "vehicle.GetDefaultHandlingInt(key)",
  "vehicle.GetDefaultHandlingVector(key)",
  "vehicle.IsHornActive()",
  "vehicle.HasJumpingAbility()",
  "vehicle.IsDamaged()",
  "vehicle.GetSuspensionHeight()",
  "vehicle.HasRocketBoost()",
  "vehicle.GetModSlotName(modType)",
  "vehicle.GetModTextLabel(modType, modValue)",
  "vehicle.GetNumberOfColours()",
  "vehicle.GetNumberOfDoors()",
  "vehicle.GetNumModKits()",
  "vehicle.GetNumMods(modType)",
  "vehicle.GetPedInSeat(index, p2)",
  "vehicle.GetPedUsingDoor(doorIndex)",
  "vehicle.HasParachute()",
  "vehicle.GetOwner(int)",
  "vehicle.GetModColor2Name()",
  "vehicle.GetModData(modType, modIndex)",
  "vehicle.GetModKit()",
  "vehicle.GetModKitType()",
  "vehicle.GetModModifierValue(modType, modIndex)",
  "vehicle.GetModVariation(modType)",
  "vehicle.GetNeonLightsColour(int, int, int)",
  "vehicle.GetNumberOfPassengers()",
  "vehicle.GetNumberPlateText()",
  "vehicle.GetNumberPlateTextIndex()",
  "vehicle.GetPetrolTankHealth()",
  "vehicle.GetPlateType()",
  "vehicle.GetTyresCanBurst()",
  "vehicle.GetTyreSmokeColor(int, int, int)",
  "vehicle.GetWheelType()",
  "vehicle.GetWindowTint()",
  "vehicle.IsModLoadDone()",
  "vehicle.GetTrailerVehicle(int)",
  "vehicle.IsBig()",
  "vehicle.IsNearEntity(entity)",
  "vehicle.IsHeliPartBroken(p1, p2, p3)",
  "vehicle.HasLandingGear()",
  "vehicle.IsAlarmActivated()",
  "vehicle.IsAttachedToCargobob(vehicleAttached)",
  "vehicle.IsAttachedToTowTruck(vehicle)",
  "vehicle.IsAttachedToTrailer()",
  "vehicle.IsAConvertible(p1)",
  "vehicle.IsBumperBrokenOff(front)",
  "vehicle.IsDoorDamaged(doorID)",
  "vehicle.IsDoorFullyOpen(doorIndex)",
  "vehicle.IsDriveable(isOnFireCheck)",
  "vehicle.IsExtraTurnedOn(extraId)",
  "vehicle.IsHighDetail()",
  "vehicle.IsInBurnout()",
  "vehicle.IsModel(model)",
  "vehicle.IsRadioLoud()",
  "vehicle.SetAudio(audioName)",
  "vehicle.OverrideVehHorn(mute, p2)",
  "vehicle.PlayStreamFrom()",
  "vehicle.PlayDoorCloseSound(p1)",
  "vehicle.PlayDoorOpenSound(p1)",
  "vehicle.SetAudioPriority(p1)",
  "vehicle.RemoveDecalsFrom()",
  "vehicle.NetworkExplode(isAudible, isInvisible, p3)",
  "vehicle.IsNodeIdValid()",
  "vehicle.IsNeonLightEnabled(index)",
  "vehicle.IsRocketBoostActive()",
  "vehicle.IsTaxiLightOn()",
  "vehicle.IsToggleModOn(modType)",
  "vehicle.IsOnAllWheels()",
  "vehicle.IsSearchlightOn()",
  "vehicle.IsSeatFree(seatIndex, p2)",
  "vehicle.IsSirenSoundOn()",
  "vehicle.IsSirenOn()",
  "vehicle.IsShopResprayAllowed()",
  "vehicle.IsStolen()",
  "vehicle.IsStopped()",
  "vehicle.IsStoppedAtTrafficLights()",
  "vehicle.IsStuckOnRoof()",
  "vehicle.IsStuckTimerUp(p1, p2)",
  "vehicle.IsVisible()",
  "vehicle.IsWindowIntact(windowIndex)",
  "vehicle.LowerConvertibleRoof(instantlyLower)",
  "vehicle.OpenBombBayDoors()",
  "vehicle.RaiseConvertibleRoof(instantlyRaise)",
  "vehicle.ReleasePreloadMods()",
  "vehicle.RemoveHighDetailModel()",
  "vehicle.RemoveMod(modType)",
  "vehicle.RemoveStuckCheck()",
  "vehicle.RemoveUpsidedownCheck()",
  "vehicle.RemoveWindow(windowIndex)",
  "vehicle.RequestHighDetailModel()",
  "vehicle.ResetStuckTimer(nullAttributes)",
  "vehicle.ResetWheels(toggle)",
  "vehicle.RollDownWindow(windowIndex)",
  "vehicle.RollDownWindows()",
  "vehicle.RollUpWindow(windowIndex)",
  "vehicle.SetBikeLeanAngle(x, y)",
  "vehicle.Jitter(p1, yaw, pitch, roll)",
  "vehicle.SetAlarm(state)",
  "vehicle.SetAllowNoPassengersLockon(toggle)",
  "vehicle.SetAutomaticallyAttaches(p1, p2)",
  "vehicle.RaiseLowerableWheels()",
  "vehicle.Rpm();",
  "vehicle.SetBoostActive(Toggle)",
  "vehicle.SetBombs(amount)",
  "vehicle.SetEnginePowerMultiplier(value)",
  "vehicle.SetBoatAnchor(toggle)",
  "vehicle.SetCanRespray(state)",
  "vehicle.SetConvertibleRoof(p1)",
  "vehicle.SetDisablePetrolTankDamage(toggle)",
  "vehicle.SetDisablePetrolTankFires(toggle)",
  "vehicle.SetDoorCanBreak(doorIndex, isBreakable)",
  "vehicle.SetExclusiveDriver(p1)",
  "vehicle.SetBodyHealth(value)",
  "vehicle.SetBrakeLights(toggle)",
  "vehicle.SetBurnout(toggle)",
  "vehicle.SetCanBeTargetted(state)",
  "vehicle.SetCanBeUsedByFleeingPeds(toggle)",
  "vehicle.SetCanBeVisiblyDamaged(state)",
  "vehicle.SetCanBreak(toggle)",
  "vehicle.SetCeilingHeight(p1)",
  "vehicle.SetEngineTorqueMultiplier(value)",
  "vehicle.SetColours(colorPrimary, colorSecondary)",
  "vehicle.SetColourCombination(colorCombination)",
  "vehicle.SetCountermeasures(amount)",
  "vehicle.SetCustomPrimaryColour(r, g, b)",
  "vehicle.SetCustomSecondaryColour(r, g, b)",
  "vehicle.SetDamage(xOffset, yOffset, zOffset, damage, radius, p6)",
  "vehicle.SetDeformationFixed()",
  "vehicle.SetDirtLevel(dirtLevel)",
  "vehicle.SetDoorsLocked(doorLockStatus)",
  "vehicle.SetDoorsLockedForAllPlayers(toggle)",
  "vehicle.SetDoorsLockedForPlayer(player, toggle)",
  "vehicle.SetDoorsLockedForTeam(team, toggle)",
  "vehicle.SetDoorsShut(closeInstantly)",
  "vehicle.SetDoorControl(doorIndex, speed, angle)",
  "vehicle.SetDoorLatched(doorIndex, p2, p3, p4)",
  "vehicle.SetDoorOpen(doorIndex, loose, openInstantly)",
  "vehicle.SetDoorShut(doorIndex, closeInstantly)",
  "vehicle.SetCreatesMoneyPickupsWhenExploded(toggle)",
  "vehicle.SetEngineCanDegrade(toggle)",
  "vehicle.SetEngineHealth(health)",
  "vehicle.SetEngineOn(value, instantly, otherwise)",
  "vehicle.SetEnveffScale(fade)",
  "vehicle.SetExclusiveDriver2(ped, p2)",
  "vehicle.SetExplodesOnHighExplosionDamage(toggle)",
  "vehicle.SetExtra(extraId, toggle)",
  "vehicle.SetExtraColours(pearlescentColor, wheelColor)",
  "vehicle.SetDashboardColour(color)",
  "vehicle.SetFixed()",
  "vehicle.SetCustomParachuteModel(parachuteModel)",
  "vehicle.SetCustomParachuteTexture(colorIndex)",
  "vehicle.SetHornEnabled(toggle)",
  "vehicle.SetRadioEnabled(toggle)",
  "vehicle.SetRadioLoud(toggle)",
  "vehicle.SetNetworkNonContact(toggle)",
  "vehicle.SetPopulationBudget()",
  "vehicle.SetHalt(distance, killEngine, unknown)",
  "vehicle.SetForceHd(toggle)",
  "vehicle.SetHeliBladesFullSpeed()",
  "vehicle.SetHeliBladesSpeed(speed)",
  "vehicle.SetLastDriven()",
  "vehicle.SetPlaybackSpeed(speed)",
  "vehicle.SetPlaybackToUseAi(flag)",
  "vehicle.SetPlayersLast()",
  "vehicle.SetInteriorColour(color)",
  "vehicle.SetForwardSpeed(speed)",
  "vehicle.SetFrictionOverride(friction)",
  "vehicle.SetFullbeam(toggle)",
  "vehicle.SetGravity(toggle)",
  "vehicle.SetHandbrake(toggle)",
  "vehicle.SetHasBeenOwnedByPlayer(owned)",
  "vehicle.SetHasStrongAxles(toggle)",
  "vehicle.SetLightsMode(p1)",
  "vehicle.SetPedTargettableDestroy(vehicleComponent, destroyType)",
  "vehicle.SetInteriorlight(toggle)",
  "vehicle.SetIndicatorLights(turnSignal, toggle)",
  "vehicle.SetIsConsideredByPlayer(toggle)",
  "vehicle.SetIsStolen(isStolen)",
  "vehicle.SetIsWanted(state)",
  "vehicle.SetJetEngineOn(toggle)",
  "vehicle.SetHudSpecialAbilityBarActive(active)",
  "vehicle.SetLights(state)",
  "vehicle.SetLightMultiplier(multiplier)",
  "vehicle.SetLivery(livery)",
  "vehicle.SetLodMultiplier(multiplier)",
  "vehicle.SetModColor1(paintType, color, p3)",
  "vehicle.SetMod(modType, modIndex, customTires)",
  "vehicle.SetModColor2(paintType, color)",
  "vehicle.SetModKit(modKit)",
  "vehicle.SetNeedsToBeHotwired(toggle)",
  "vehicle.SetNeonLightsColour(r, g, b)",
  "vehicle.SetNeonLightEnabled(index, toggle)",
  "vehicle.SetNumberPlateText(plateText)",
  "vehicle.SetNumberPlateTextIndex(plateIndex)",
  "vehicle.SetOnGroundProperly(p1)",
  "vehicle.SetOutOfControl(killDriver, explodeOnImpact)",
  "vehicle.SetPetrolTankHealth(health)",
  "vehicle.SetProvidesCover(toggle)",
  "vehicle.SetParachuteActive(active)",
  "vehicle.SetNameDebug(name)",
  "vehicle.SetHandling(key, val)",
  "vehicle.SoundHornThisFrame()",
  "vehicle.SetSirenWithNoDriver(toggle)",
  "vehicle.SetVehRadioStation(radioStation)",
  "vehicle.UseSirenAsHorn(toggle)",
  "vehicle.TaskEveryoneLeave()",
  "vehicle.TaskPlayAnim(animation_set, animation_name)",
  "vehicle.WashDecalsFrom(p1)",
  "vehicle.VehToNet()",
  "vehicle.SetRocketBoostActive(active)",
  "vehicle.SetRocketBoostPercentage(percentage)",
  "vehicle.SetRocketBoostRefillTime(time)",
  "vehicle.SetTaxiLights(state)",
  "vehicle.SetSirenSound(toggle)",
  "vehicle.SetSilent(toggle)",
  "vehicle.SetReduceGrip(toggle)",
  "vehicle.SetRudderBroken(p1)",
  "vehicle.SetSearchlight(toggle, canBeUsedByAI)",
  "vehicle.SetShootAtTarget(entity, xTarget, yTarget, zTarget)",
  "vehicle.SetSiren(toggle)",
  "vehicle.SetSteerBias(value)",
  "vehicle.SetStrong(toggle)",
  "vehicle.SetTimedExplosion(ped, toggle)",
  "vehicle.SetTyresCanBurst(toggle)",
  "vehicle.SetTyreBurst(index, onRim, p3)",
  "vehicle.SetTyreFixed(tyreIndex)",
  "vehicle.SetTyreSmokeColor(r, g, b)",
  "vehicle.SetUndriveable(toggle)",
  "vehicle.SetWheelsCanBreak(enabled)",
  "vehicle.SetWheelsCanBreakOffWhenBlowUp(toggle)",
  "vehicle.SetWheelType(WheelType)",
  "vehicle.SetWindowTint(tint)",
  "vehicle.SmashWindow(index)",
  "vehicle.StartPlaybackRecorded(p1, playback, p3)",
  "vehicle.StartPlaybackRecordedWithFlags(p1, playback, p3, p4, p5)",
  "vehicle.StartAlarm()",
  "vehicle.StartHorn(duration, mode, forever)",
  "vehicle.ToggleMod(modType, toggle)",
  "vehicle.TrackVisibility()",
  "vehicle.SetRampReceivesRampDamage(receivesDamage)",
  "RAGE.Game.Ai.AddCoverBlockingArea(playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9)",
  "RAGE.Game.Ai.AddCoverPoint(p0, p1, p2, p3, p4, p5, p6, p7)",
  "RAGE.Game.Ai.AddPatrolRouteLink(p0, p1)",
  "RAGE.Game.Ai.AddPatrolRouteNode(p0, p1, x1, y1, z1, x2, y2, z2, p8)",
  "RAGE.Game.Ai.AddVehicleSubtaskAttackCoord(ped, x, y, z)",
  "RAGE.Game.Ai.AddVehicleSubtaskAttackPed(ped, ped2)",
  "RAGE.Game.Ai.AssistedMovementIsRouteLoaded(route)",
  "RAGE.Game.Ai.AssistedMovementOverrideLoadDistanceThisFrame(dist)",
  "RAGE.Game.Ai.AssistedMovementRemoveRoute(route)",
  "RAGE.Game.Ai.IsPedBeingArrested(ped)",
  "RAGE.Game.Ai.AssistedMovementRequestRoute(route)",
  "RAGE.Game.Ai.AssistedMovementSetRouteProperties(route, props)",
  "RAGE.Game.Ai.ClearDrivebyTaskUnderneathDrivingTask(ped)",
  "RAGE.Game.Ai.ClearPedSecondaryTask(ped)",
  "RAGE.Game.Ai.ClearPedTasks(ped)",
  "RAGE.Game.Ai.ClearPedTasksImmediately(ped)",
  "RAGE.Game.Ai.ClearSequenceTask(taskSequence)",
  "RAGE.Game.Ai.ClosePatrolRoute()",
  "RAGE.Game.Ai.CloseSequenceTask(taskSequence)",
  "RAGE.Game.Ai.ControlMountedWeapon(ped)",
  "RAGE.Game.Ai.CreatePatrolRoute()",
  "RAGE.Game.Ai.DoesScenarioExistInArea(x, y, z, radius, b)",
  "RAGE.Game.Ai.DoesScenarioGroupExist(scenarioGroup)",
  "RAGE.Game.Ai.DoesScenarioOfTypeExistInArea(p0, p1, p2, p3, p4, p5)",
  "RAGE.Game.Ai.DoesScriptedCoverPointExistAtCoords(x, y, z)",
  "RAGE.Game.Ai.GetActiveVehicleMissionType(veh)",
  "RAGE.Game.Ai.GetClipSetForScriptedGunTask(p0)",
  "RAGE.Game.Ai.GetIsTaskActive(ped, taskNumber)",
  "RAGE.Game.Ai.GetIsWaypointRecordingLoaded(name)",
  "RAGE.Game.Ai.GetNavmeshRouteDistanceRemaining(ped, p1, p2)",
  "RAGE.Game.Ai.GetNavmeshRouteResult(ped)",
  "RAGE.Game.Ai.GetPedDesiredMoveBlendRatio(ped)",
  "RAGE.Game.Ai.GetPedWaypointDistance(p0)",
  "RAGE.Game.Ai.GetPedWaypointProgress(p0)",
  "RAGE.Game.Ai.GetPhoneGestureAnimCurrentTime(ped)",
  "RAGE.Game.Ai.GetPhoneGestureAnimTotalTime(ped)",
  "RAGE.Game.Ai.GetScriptedCoverPointCoords(coverpoint)",
  "RAGE.Game.Ai.GetScriptTaskStatus(targetPed, taskHash)",
  "RAGE.Game.Ai.GetSequenceProgress(ped)",
  "RAGE.Game.Ai.GetVehicleWaypointProgress(p0)",
  "RAGE.Game.Ai.GetVehicleWaypointTargetPoint(p0)",
  "RAGE.Game.Ai.GetWaypointDistanceAlongRoute(p0, p1)",
  "RAGE.Game.Ai.IsDrivebyTaskUnderneathDrivingTask(ped)",
  "RAGE.Game.Ai.IsMountedWeaponTaskUnderneathDrivingTask(ped)",
  "RAGE.Game.Ai.IsMoveBlendRatioRunning(ped)",
  "RAGE.Game.Ai.IsMoveBlendRatioSprinting(ped)",
  "RAGE.Game.Ai.IsMoveBlendRatioStill(ped)",
  "RAGE.Game.Ai.IsMoveBlendRatioWalking(ped)",
  "RAGE.Game.Ai.IsPedActiveInScenario(ped)",
  "RAGE.Game.Ai.IsPedCuffed(ped)",
  "RAGE.Game.Ai.IsPedGettingUp(ped)",
  "RAGE.Game.Ai.IsPedInWrithe(ped)",
  "RAGE.Game.Ai.IsPedRunning(ped)",
  "RAGE.Game.Ai.IsPedRunningArrestTask(ped)",
  "RAGE.Game.Ai.IsPedSprinting(ped)",
  "RAGE.Game.Ai.IsPedStill(ped)",
  "RAGE.Game.Ai.IsPedStrafing(ped)",
  "RAGE.Game.Ai.IsPedWalking(ped)",
  "RAGE.Game.Ai.ResetExclusiveScenarioGroup()",
  "RAGE.Game.Ai.IsPlayingPhoneGestureAnim(ped)",
  "RAGE.Game.Ai.IsScenarioGroupEnabled(scenarioGroup)",
  "RAGE.Game.Ai.IsScenarioOccupied(p0, p1, p2, p3, p4)",
  "RAGE.Game.Ai.IsScenarioTypeEnabled(scenarioType)",
  "RAGE.Game.Ai.IsWaypointPlaybackGoingOnForPed(p0)",
  "RAGE.Game.Ai.IsWaypointPlaybackGoingOnForVehicle(p0)",
  "RAGE.Game.Ai.OpenPatrolRoute(patrolRoute)",
  "RAGE.Game.Ai.OpenSequenceTask(taskSequence)",
  "RAGE.Game.Ai.PedHasUseScenarioTask(ped)",
  "RAGE.Game.Ai.PlayAnimOnRunningScenario(ped, animDict, animName)",
  "RAGE.Game.Ai.PlayEntityScriptedAnim(p0, p1, p2, p3, p4, p5)",
  "RAGE.Game.Ai.RemoveAllCoverBlockingAreas()",
  "RAGE.Game.Ai.RemoveCoverPoint(coverpoint)",
  "RAGE.Game.Ai.RemoveWaypointRecording(name)",
  "RAGE.Game.Ai.RequestWaypointRecording(name)",
  "RAGE.Game.Ai.ResetScenarioGroupsEnabled()",
  "RAGE.Game.Ai.ResetScenarioTypesEnabled()",
  "RAGE.Game.Ai.SetAnimLooped(p0, p1, p2, p3)",
  "RAGE.Game.Ai.SetAnimRate(p0, p1, p2, p3)",
  "RAGE.Game.Ai.SetDrivebyTaskTarget(shootingPed, targetPed, targetVehicle, x, y, z)",
  "RAGE.Game.Ai.SetAnimWeight(p0, p1, p2, p3, p4)",
  "RAGE.Game.Ai.SetDriveTaskCruiseSpeed(driver, cruiseSpeed)",
  "RAGE.Game.Ai.SetDriveTaskDrivingStyle(ped, drivingStyle)",
  "RAGE.Game.Ai.SetDriveTaskMaxCruiseSpeed(p0, p1)",
  "RAGE.Game.Ai.SetExclusiveScenarioGroup(scenarioGroup)",
  "RAGE.Game.Ai.SetGlobalMinBirdFlightHeight(height)",
  "RAGE.Game.Ai.SetHighFallTask(ped, p1, p2, p3)",
  "RAGE.Game.Ai.SetMountedWeaponTarget(shootingPed, targetPed, targetVehicle, x, y, z, p6)",
  "RAGE.Game.Ai.SetParachuteTaskTarget(ped, x, y, z)",
  "RAGE.Game.Ai.SetParachuteTaskThrust(ped, thrust)",
  "RAGE.Game.Ai.SetPedDesiredMoveBlendRatio(ped, p1)",
  "RAGE.Game.Ai.SetPedPathAvoidFire(ped, avoidFire)",
  "RAGE.Game.Ai.SetPedPathCanDropFromHeight(ped, Toggle)",
  "RAGE.Game.Ai.SetPedPathCanUseClimbovers(ped, Toggle)",
  "RAGE.Game.Ai.SetPedPathCanUseLadders(ped, Toggle)",
  "RAGE.Game.Ai.SetPedPathMayEnterWater(ped, mayEnterWater)",
  "RAGE.Game.Ai.SetPedPathPreferToAvoidWater(ped, avoidWater)",
  "RAGE.Game.Ai.SetPedWaypointRouteOffset(p0, p1, p2, p3)",
  "RAGE.Game.Ai.SetScenarioGroupEnabled(scenarioGroup, p1)",
  "RAGE.Game.Ai.SetScenarioTypeEnabled(scenarioType, toggle)",
  "RAGE.Game.Ai.SetSequenceToRepeat(taskSequence, repeat)",
  "RAGE.Game.Ai.SetTaskVehicleChaseBehaviorFlag(ped, flag, set)",
  "RAGE.Game.Ai.SetTaskVehicleChaseIdealPursuitDistance(ped, distance)",
  "RAGE.Game.Ai.StopAnimPlayback(ped, p1, p2)",
  "RAGE.Game.Ai.StopAnimTask(ped, animDictionary, animationName, p3)",
  "RAGE.Game.Ai.TaskAchieveHeading(ped, heading, timeout)",
  "RAGE.Game.Ai.TaskAimGunAtCoord(ped, x, y, z, time, p5, p6)",
  "RAGE.Game.Ai.TaskAimGunAtEntity(ped, entity, duration, p3)",
  "RAGE.Game.Ai.SetNextDesiredMoveState(p0)",
  "RAGE.Game.Ai.TaskAimGunScripted(ped, scriptTask, p2, p3)",
  "RAGE.Game.Ai.TaskAimGunScriptedWithTarget(p0, p1, p2, p3, p4, p5, p6, p7)",
  "RAGE.Game.Ai.TaskArrestPed(ped, target)",
  "RAGE.Game.Ai.TaskBoatMission(pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11)",
  "RAGE.Game.Ai.TaskChatToPed(ped, target, p2, p3, p4, p5, p6, p7)",
  "RAGE.Game.Ai.TaskClearDefensiveArea(p0)",
  "RAGE.Game.Ai.TaskClearLookAt(ped)",
  "RAGE.Game.Ai.TaskClimb(ped, unused)",
  "RAGE.Game.Ai.TaskClimbLadder(ped, p1)",
  "RAGE.Game.Ai.TaskCombatHatedTargetsAroundPed(ped, radius, p2)",
  "RAGE.Game.Ai.TaskCombatHatedTargetsAroundPedTimed(p0, p1, p2, p3)",
  "RAGE.Game.Ai.TaskCombatHatedTargetsInArea(ped, x, y, z, radius, p5)",
  "RAGE.Game.Ai.TaskCombatPed(ped, targetPed, p2, p3)",
  "RAGE.Game.Ai.TaskCombatPedTimed(p0, ped, p2, p3)",
  "RAGE.Game.Ai.TaskCower(ped, duration)",
  "RAGE.Game.Ai.TaskDriveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern)",
  "RAGE.Game.Ai.TaskEnterVehicle(ped, vehicle, timeout, seat, speed, p5, p6)",
  "RAGE.Game.Ai.TaskEveryoneLeaveVehicle(vehicle)",
  "RAGE.Game.Ai.TaskExitCover(p0, p1, p2, p3, p4)",
  "RAGE.Game.Ai.TaskExtendRoute(x, y, z)",
  "RAGE.Game.Ai.TaskFlushRoute()",
  "RAGE.Game.Ai.TaskFollowNavMeshToCoord(ped, x, y, z, speed, timeout, stoppingRange, persistFollowing, unk)",
  "RAGE.Game.Ai.TaskFollowPointRoute(ped, speed, unknown)",
  "RAGE.Game.Ai.TaskFollowToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing)",
  "RAGE.Game.Ai.TaskFollowWaypointRecording(p0, p1, p2, p3, p4)",
  "RAGE.Game.Ai.TaskForceMotionState(ped, state, p2)",
  "RAGE.Game.Ai.TaskGetOffBoat(ped, boat)",
  "RAGE.Game.Ai.TaskGotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist)",
  "RAGE.Game.Ai.TaskGotoEntityOffset(ped, p1, p2, x, y, z, duration)",
  "RAGE.Game.Ai.TaskGotoEntityOffsetXy(p0, p1, p2, p3, p4, p5, p6, p7)",
  "RAGE.Game.Ai.TaskGoStraightToCoord(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide)",
  "RAGE.Game.Ai.TaskGoStraightToCoordRelativeToEntity(entity1, entity2, p2, p3, p4, p5, p6)",
  "RAGE.Game.Ai.TaskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern)",
  "RAGE.Game.Ai.TaskGoToCoordAnyMeans(ped, x, y, z, speed, p5, p6, walkingStyle, p8)",
  "RAGE.Game.Ai.TaskGoToCoordAnyMeansExtraParams(ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12)",
  "RAGE.Game.Ai.TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12, p13)",
  "RAGE.Game.Ai.TaskGoToCoordWhileAimingAtCoord(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern)",
  "RAGE.Game.Ai.TaskGoToCoordWhileAimingAtEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)",
  "RAGE.Game.Ai.TaskGoToEntity(entity, target, duration, distance, speed, p5, p6)",
  "RAGE.Game.Ai.TaskGoToEntityWhileAimingAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)",
  "RAGE.Game.Ai.TaskGoToEntityWhileAimingAtEntity(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern)",
  "RAGE.Game.Ai.TaskGuardAssignedDefensiveArea(p0, p1, p2, p3, p4, p5, p6)",
  "RAGE.Game.Ai.TaskGuardCurrentPosition(p0, p1, p2, p3)",
  "RAGE.Game.Ai.TaskGuardSphereDefensiveArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)",
  "RAGE.Game.Ai.TaskHandsUp(ped, duration, facingPed, p3, p4)",
  "RAGE.Game.Ai.TaskHeliChase(pilot, entityToFollow, x, y, z)",
  "RAGE.Game.Ai.TaskHeliMission(pilot, vehicle, vehicleToFollow, pedToFollow, posX, posY, posZ, mode, speed, radius, angle, p11, height, p13, p14)",
  "RAGE.Game.Ai.TaskJump(ped, unused, p2, p3)",
  "RAGE.Game.Ai.TaskLeaveAnyVehicle(ped, p1, p2)",
  "RAGE.Game.Ai.TaskFollowNavMeshToCoordAdvanced(ped, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f)void)",
  "RAGE.Game.Ai.TaskLeaveVehicle(ped, vehicle, flags)",
  "RAGE.Game.Ai.TaskLookAtCoord(entity, x, y, z, duration, p5, p6)",
  "RAGE.Game.Ai.TaskLookAtEntity(ped, lookAt, duration, unknown1, unknown2)",
  "RAGE.Game.Ai.TaskMoveNetworkAdvanced(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags)",
  "RAGE.Game.Ai.TaskMoveNetwork(ped, task, multiplier, p3, animDict, flags)",
  "RAGE.Game.Ai.TaskOpenVehicleDoor(ped, vehicle, timeOut, doorIndex, speed)",
  "RAGE.Game.Ai.TaskParachute(ped, p1, p2)",
  "RAGE.Game.Ai.TaskParachuteToTarget(ped, x, y, z)",
  "RAGE.Game.Ai.TaskPatrol(ped, p1, p2, p3, p4)",
  "RAGE.Game.Ai.TaskPause(ped, ms)",
  "RAGE.Game.Ai.TaskPedSlideToCoordHdgRate(ped, x, y, z, heading, p5, p6)",
  "RAGE.Game.Ai.TaskPerformSequence(ped, taskSequence)",
  "RAGE.Game.Ai.TaskPerformSequenceFromProgress(p0, p1, p2, p3)",
  "RAGE.Game.Ai.TaskPlaneChase(pilot, entityToFollow, x, y, z)",
  "RAGE.Game.Ai.TaskPlaneLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ)",
  "RAGE.Game.Ai.TaskPlaneMission(pilot, plane, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionType, vehicleSpeed, p9, heading, maxAltitude, minAltitude, p13)",
  "RAGE.Game.Ai.TaskPlantBomb(ped, x, y, z, heading)",
  "RAGE.Game.Ai.TaskPlayAnim(ped, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, lockX, lockY, lockZ)",
  "RAGE.Game.Ai.TaskPlayAnimAdvanced(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, speed, speedMultiplier, duration, flag, animTime, p14, p15)",
  "RAGE.Game.Ai.TaskPlayPhoneGestureAnimation(ped, animDict, animation, boneMaskType, p4, p5, p6, p7)",
  "RAGE.Game.Ai.TaskPutPedDirectlyIntoCover(ped, x, y, z, timeout, p5, p6, p7, p8, p9, p10)",
  "RAGE.Game.Ai.TaskPutPedDirectlyIntoMelee(ped, meleeTarget, p2, p3, p4, p5)",
  "RAGE.Game.Ai.TaskRappelFromHeli(ped, unused)",
  "RAGE.Game.Ai.TaskPedSlideToCoord(ped, x, y, z, heading, p5)",
  "RAGE.Game.Ai.TaskReactAndFleePed(ped, fleeTarget)",
  "RAGE.Game.Ai.TaskScriptedAnimation(ped, p1, p2, p3, p4, p5)",
  "RAGE.Game.Ai.TaskSeekCoverFromPed(ped, target, duration, p3)",
  "RAGE.Game.Ai.TaskSeekCoverFromPos(ped, x, y, z, duration, p5)",
  "RAGE.Game.Ai.TaskSeekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, p7, p8)",
  "RAGE.Game.Ai.TaskSeekCoverToCoverPoint(p0, p1, p2, p3, p4, p5, p6)",
  "RAGE.Game.Ai.TaskSetBlockingOfNonTemporaryEvents(ped, toggle)",
  "RAGE.Game.Ai.TaskSetDecisionMaker(p0, p1)",
  "RAGE.Game.Ai.TaskSetSphereDefensiveArea(p0, p1, p2, p3, p4)",
  "RAGE.Game.Ai.TaskShockingEventReact(ped, eventHandle)",
  "RAGE.Game.Ai.TaskReloadWeapon(ped, unused)",
  "RAGE.Game.Ai.TaskShootAtCoord(ped, x, y, z, duration, firingPattern)",
  "RAGE.Game.Ai.TaskShootAtEntity(entity, target, duration, firingPattern)",
  "RAGE.Game.Ai.TaskShuffleToNextVehicleSeat(ped, vehicle, p2)",
  "RAGE.Game.Ai.TaskSkyDive(ped, p1)",
  "RAGE.Game.Ai.TaskSmartFleeCoord(ped, x, y, z, distance, time, p6, p7)",
  "RAGE.Game.Ai.TaskSmartFleePed(ped, fleeTarget, distance, fleeTime, p4, p5)",
  "RAGE.Game.Ai.TaskStandGuard(ped, x, y, z, heading, scenarioName)",
  "RAGE.Game.Ai.TaskStandStill(ped, time)",
  "RAGE.Game.Ai.TaskStartScenarioAtPosition(ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport)",
  "RAGE.Game.Ai.TaskStartScenarioInPlace(ped, scenarioName, unkDelay, playEnterAnim)",
  "RAGE.Game.Ai.TaskStayInCover(ped)",
  "RAGE.Game.Ai.TaskStealthKill(killer, target, killType, p3, p4)",
  "RAGE.Game.Ai.TaskStopPhoneGestureAnimation(ped, p1)",
  "RAGE.Game.Ai.TaskSwapWeapon(ped, p1)",
  "RAGE.Game.Ai.TaskSweepAimEntity(ped, anim, p2, p3, p4, p5, vehicle, p7, p8)",
  "RAGE.Game.Ai.WaypointPlaybackResume(p0, p1, p2, p3)",
  "RAGE.Game.Ai.WaypointPlaybackPause(p0, p1, p2)",
  "RAGE.Game.Ai.WaypointPlaybackOverrideSpeed(p0, p1, p2)",
  "RAGE.Game.Ai.WaypointPlaybackGetIsPaused(p0)",
  "RAGE.Game.Ai.VehicleWaypointPlaybackUseDefaultSpeed(p0)",
  "RAGE.Game.Ai.VehicleWaypointPlaybackResume(p0)",
  "RAGE.Game.Ai.TaskSweepAimPosition(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)",
  "RAGE.Game.Ai.TaskSynchronizedScene(ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9)",
  "RAGE.Game.Ai.TaskThrowProjectile(ped, x, y, z, p4, p5)",
  "RAGE.Game.Ai.TaskToggleDuck(p0, p1)",
  "RAGE.Game.Ai.TaskTurnPedToFaceCoord(ped, x, y, z, duration)",
  "RAGE.Game.Ai.TaskTurnPedToFaceEntity(ped, entity, duration)",
  "RAGE.Game.Ai.TaskUseMobilePhone(ped, p1, p2)",
  "RAGE.Game.Ai.TaskUseMobilePhoneTimed(ped, duration)",
  "RAGE.Game.Ai.TaskUseNearestScenarioChainToCoord(p0, p1, p2, p3, p4, p5)",
  "RAGE.Game.Ai.TaskUseNearestScenarioChainToCoordWarp(p0, p1, p2, p3, p4, p5)",
  "RAGE.Game.Ai.TaskUseNearestScenarioToCoord(ped, x, y, z, distance, duration)",
  "RAGE.Game.Ai.TaskUseNearestScenarioToCoordWarp(ped, x, y, z, radius, p5)",
  "RAGE.Game.Ai.TaskVehicleAimAtCoord(ped, x, y, z)",
  "RAGE.Game.Ai.TaskVehicleAimAtPed(ped, target)",
  "RAGE.Game.Ai.TaskVehicleChase(driver, targetEnt)",
  "RAGE.Game.Ai.TaskVehicleDriveToCoord(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10)",
  "RAGE.Game.Ai.TaskVehicleDriveToCoordLongrange(ped, vehicle, x, y, z, speed, driveMode, stopRange)",
  "RAGE.Game.Ai.TaskVehicleDriveWander(ped, vehicle, speed, drivingStyle)",
  "RAGE.Game.Ai.TaskVehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance)",
  "RAGE.Game.Ai.TaskVehicleFollow(driver, vehicle, targetEntity, drivingStyle, speed, minDistance)",
  "RAGE.Game.Ai.TaskVehicleFollowWaypointRecording(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9)",
  "RAGE.Game.Ai.TaskVehicleGotoNavmesh(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange)",
  "RAGE.Game.Ai.TaskVehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7)",
  "RAGE.Game.Ai.TaskVehicleMission(p0, p1, p2, p3, p4, p5, p6, p7, p8)",
  "RAGE.Game.Ai.TaskVehicleMissionCoorsTarget(ped, vehicle, x, y, z, p5, p6, p7, p8, p9, p10)",
  "RAGE.Game.Ai.TaskVehicleMissionPedTarget(ped, vehicle, pedTarget, mode, maxSpeed, drivingStyle, minDistance, p7, p8)",
  "RAGE.Game.Ai.TaskVehiclePark(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn)",
  "RAGE.Game.Ai.TaskVehiclePlayAnim(vehicle, animation_set, animation_name)",
  "RAGE.Game.Ai.TaskVehicleShootAtCoord(ped, x, y, z, p4)",
  "RAGE.Game.Ai.TaskVehicleShootAtPed(ped, target, p2)",
  "RAGE.Game.Ai.TaskVehicleTempAction(driver, vehicle, action, time)",
  "RAGE.Game.Ai.TaskWanderInArea(ped, x, y, z, radius, minimalLength, timeBetweenWalks)",
  "RAGE.Game.Ai.TaskWanderStandard(ped, p1, p2)",
  "RAGE.Game.Ai.TaskWarpPedIntoVehicle(ped, vehicle, seat)",
  "RAGE.Game.Ai.TaskWrithe(ped, target, time, p3, p4, p5)",
  "RAGE.Game.Ai.UncuffPed(ped)",
  "RAGE.Game.Ai.UpdateTaskAimGunScriptedTarget(p0, p1, p2, p3, p4, p5)",
  "RAGE.Game.Ai.UpdateTaskHandsUpDuration(ped, duration)",
  "RAGE.Game.Ai.UpdateTaskSweepAimEntity(ped, entity)",
  "RAGE.Game.Ai.UpdateTaskSweepAimPosition(p0, p1, p2, p3)",
  "RAGE.Game.Ai.UseWaypointRecordingAsAssistedMovementRoute(p0, p1, p2, p3)",
  "RAGE.Game.Ai.VehicleWaypointPlaybackOverrideSpeed(p0, p1)",
  "RAGE.Game.Ai.VehicleWaypointPlaybackPause(p0)",
  "RAGE.Game.Pad.DisableAllActions(0);",
  "RAGE.Game.Pathfind.GetStreetNameAtCoord(x, y, z, ref streetName, ref crossingRoad);",
  "RAGE.Game.Ui.GetStreetNameFromHashKey((uint) hash);",
  "RAGE.Game.Pad.EnableAllControlActions(0);",
  "RAGE.Game.Ai.WaypointRecordingGetSpeedAtPoint(name, point)",
  "RAGE.Game.Ai.WaypointRecordingGetNumPoints(name, points)",
  "RAGE.Game.Ai.WaypointRecordingGetCoord(name, point, coord)",
  "RAGE.Game.Ai.WaypointRecordingGetClosestWaypoint(name, x, y, z, point)",
  "RAGE.Game.Ai.WaypointPlaybackUseDefaultSpeed(p0)",
  "RAGE.Game.Ai.WaypointPlaybackStopAimingOrShooting(p0)",
  "RAGE.Game.Ai.WaypointPlaybackStartShootingAtPed(p0, p1, p2, p3)",
  "RAGE.Game.Ai.WaypointPlaybackStartShootingAtCoord(p0, p1, p2, p3, p4, p5)",
  "RAGE.Game.Ai.WaypointPlaybackStartAimingAtCoord(p0, p1, p2, p3, p4)",
  "RAGE.Game.Ai.WaypointPlaybackStartAimingAtPed(p0, p1, p2)",
  "RAGE.Game.App.AppClearBlock()",
  "RAGE.Game.App.AppCloseApp()",
  "RAGE.Game.App.AppCloseBlock()",
  "RAGE.Game.App.AppDataValid()",
  "RAGE.Game.App.AppGetFloat(property)",
  "RAGE.Game.App.AppGetInt(property)",
  "RAGE.Game.App.AppGetString(property)",
  "RAGE.Game.App.AppHasLinkedSocialClubAccount()",
  "RAGE.Game.App.AppHasSyncedData(appName)",
  "RAGE.Game.App.AppSaveData()",
  "RAGE.Game.App.AppSetApp(appName)",
  "RAGE.Game.App.AppSetBlock(blockName)",
  "RAGE.Game.App.AppSetFloat(property, value)",
  "RAGE.Game.App.AppSetInt(property, value)",
  "RAGE.Game.App.AppSetString(property, value)",
  "mp.game.rope.loadRopeData(rope, rope_preset);",
  "mp.game.rope.getRopeLastVertexCoord(rope);",
  "mp.game.rope.getRopeVertexCoord(rope, vertex);",
  "mp.game.rope.ropeDrawShadowEnabled(rope, toggle);",
  "mp.game.rope.getCgoffset(rope);",
  "mp.game.rope.ropeConvertToSimple(rope);",
  "mp.game.rope.pinRopeVertex(rope, vertex, x, y, z);",
  "mp.game.rope.breakEntityGlass(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);",
  "mp.game.rope.getRopeVertexCount(rope);",
  "mp.game.rope.attachEntitiesToRope(rope, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, p12, p13);",
  "mp.game.rope.attachRopeToEntity(rope, entity, x, y, z, p5);",
  "mp.game.rope.getRopeLength(rope);",
  "mp.game.rope.detachRopeFromEntity(rope, entity);",
  "mp.game.rope.ropeResetLength(rope, length);",
  "mp.game.rope.ropeForceLength(rope, length);",
  "mp.game.rope.applyImpulseToCloth(posX, posY, posZ, vecX, vecY, vecZ, impulse);",
  "mp.game.rope.doesRopeExist(rope);",
  "mp.events.addCommand(\"command\", (player, args, args1, args2)",
  "mp.game.replay.isEditorAvailable()",
  "mp.game.replay.continueTransition()",
  "mp.game.replay.activateRockstarEditor()",
  "mp.game.replay.resetEditorValues()",
  "mp.game.replay.isInteriorRenderingDisabled()",
  "mp.game.script.setStreamedScriptAsNoLongerNeeded(scriptHash);",
  "mp.game.script.isStreamedScriptRunning(scriptHash);",
  "mp.game.script.getThreadName(threadId);",
  "mp.game.rope.stopRopeWinding(rope);",
  "mp.game.script.terminateThread(threadId);",
  "mp.game.script.hasStreamedScriptLoaded(scriptHash);",
  "mp.game.rope.setDisableFragDamage(object, toggle);",
  "mp.game.script.hasScriptLoaded(scriptName);",
  "mp.game.rope.startRopeWinding(rope);",
  "mp.game.script.getEventData(eventGroup, eventIndex, eventData, eventDataSize);",
  "mp.game.rope.setDisableBreaking(rope, enabled);",
  "mp.game.rope.setCgAtBoundcenter(rope);",
  "mp.game.script.setNoLoadingScreen(toggle);",
  "mp.game.script.requestStreamedScript(scriptHash);",
  "mp.game.script.getNumberOfInstancesOfStreamedScript(scriptHash);",
  "mp.game.rope.unpinRopeVertex(rope, vertex);",
  "mp.game.rope.startRopeUnwindingFront(rope);",
  "mp.game.rope.ropeSetUpdatePinverts(rope);",
  "mp.game.rope.setCgoffset(rope, x, y, z);",
  "mp.game.rope.setDamping(rope, vertex, value);",
  "mp.game.rope.stopRopeUnwindingFront(rope);",
  "mp.game.script.isThreadActive(threadId);",
  "mp.game.script.triggerScriptEvent(p0, argsStruct, argsStructSize, bitset);",
  "mp.game.script.getNumberOfEvents(eventGroup);",
  "mp.game.script.requestScript(scriptName);",
  "mp.game.script.getEventExists(eventGroup, eventIndex);",
  "mp.game.script.setScriptAsNoLongerNeeded(scriptName);",
  "mp.game.script.getEventAtIndex(eventGroup, eventIndex);",
  "mp.game.script.doesScriptExist(scriptName);",
  "mp.game.stats.leaderboards2ReadByRadius(p0, p1, p2);",
  "mp.game.stats.leaderboards2ReadByRow(p0, p1, p2, p3, p4, p5, p6);",
  "mp.game.stats.leaderboards2ReadByRank(p0, p1, p2);",
  "mp.game.stats.leaderboards2ReadByHandle(p0, p1);",
  "mp.game.stats.statGetPos(p0, p1, p2, p3, p4);",
  "mp.game.stats.statGetLicensePlate(statName);",
  "mp.game.stats.playstatsNpcInvite(p0);",
  "mp.game.stats.statGetMaskedInt(p0, p1, p2, p3, p4);",
  "mp.game.stats.leaderboardsGetColumnId(p0, p1, p2);",
  "mp.game.stats.leaderboardsGetCacheTime(p0);",
  "mp.game.stats.statIncrement(statName, value);",
  "mp.game.stats.leaderboardsReadPending(p0, p1, p2);",
  "mp.game.stats.statGetFloat(statHash, outValue, p2);",
  "mp.game.stats.playstatsRaceCheckpoint(p0, p1, p2, p3, p4);",
  "mp.game.stats.playstatsOddjobDone(p0, p1, p2);",
  "mp.game.stats.statLoadPending(p0);",
  "mp.game.stats.playstatsCheatApplied(cheat);",
  "mp.game.stats.playstatsMatchStarted(p0, p1, p2, p3, p4, p5, p6);",
  "mp.game.stats.leaderboardsGetColumnType(p0, p1, p2);",
  "mp.game.stats.leaderboardsGetNumberOfColumns(p0, p1);",
  "mp.game.stats.leaderboards2WriteData(p0);",
  "mp.game.stats.statLoad(p0);",
  "mp.game.stats.leaderboards2ReadFriendsByRow(p0, p1, p2, p3, p4, p5);",
  "mp.game.stats.statGetNumberOfHours(statName);",
  "mp.game.stats.statGetString(statHash, p1);",
  "mp.game.stats.playstatsAwardXp(p0, p1, p2);",
  "mp.game.stats.playstatsFriendActivity(p0, p1);",
  "mp.game.stats.statGetBoolMasked(statName, mask, p2);",
  "mp.game.stats.statGetBool(statHash, outValue, p2);",
  "mp.game.stats.playstatsShopItem(p0, p1, p2, p3, p4);",
  "mp.game.stats.statGetUserId(p0);",
  "mp.game.stats.statGetNumberOfSeconds(statName);",
  "mp.game.stats.leaderboardsReadSuccessful(p0, p1, p2);",
  "mp.game.stats.playstatsClothChange(p0, p1, p2, p3, p4);",
  "mp.game.stats.statSetBool(statName, value, save);",
  "mp.game.stats.statGetNumberOfMinutes(statName);",
  "mp.game.stats.statGetInt(statHash, outValue, p2);",
  "mp.game.stats.playstatsMissionOver(p0, p1, p2, p3, p4, p5);",
  "mp.game.stats.leaderboardsReadClear(p0, p1, p2);",
  "mp.game.stats.leaderboards2ReadByScoreInt(p0, p1, p2);",
  "mp.game.stats.statGetDate(statHash, p1, p2, p3);",
  "mp.game.stats.leaderboardsGetCacheDataRow(p0, p1, p2);",
  "mp.game.stats.leaderboardsGetCacheExists(p0);",
  "mp.game.stats.leaderboardsCacheDataRow(p0);",
  "mp.game.stats.playstatsPropChange(p0, p1, p2, p3);",
  "mp.game.stats.playstatsMissionStarted(p0, p1, p2, p3);",
  "mp.game.stats.playstatsRankUp(p0);",
  "mp.game.stats.playstatsMissionCheckpoint(p0, p1, p2, p3);",
  "mp.game.stats.playstatsWebsiteVisited(scaleformHash, p1);",
  "mp.game.stats.statSave(p0, p1, p2);",
  "mp.game.stats.statGetNumberOfDays(statName);",
  "mp.game.stats.leaderboards2ReadByScoreFloat(p0, p1, p2);",
  "mp.game.stats.statClearSlotForReload(statSlot);",
  "mp.game.streaming.doesAnimDictExist(animDict);",
  "mp.game.stats.statSetPos(statName, x, y, z, save);",
  "mp.game.streaming.hasModelLoaded(model);",
  "mp.game.stats.statSetCurrentPosixTime(statName, p1);",
  "mp.game.stats.statSetMaskedInt(statName, p1, p2, p3, save);",
  "mp.game.stats.statSetDate(statName, value, numFields, save);",
  "mp.game.stats.statSlotIsLoaded(p0);",
  "mp.game.stats.statSetGxtLabel(statName, value, save);",
  "mp.game.stats.statSetFloat(statName, value, save);",
  "mp.game.stats.statSetBoolMasked(statName, value, mask, save);",
  "mp.game.stats.statSetProfileSetting(profileSetting, value);",
  "mp.game.stats.statSetLicensePlate(statName, str);",
  "mp.game.stats.statSetUserId(statName, value, save);",
  "mp.game.stats.statSetString(statName, value, save);",
  "mp.game.stats.statSetInt(statName, value, save);",
  "mp.game.stats.statSetInt(mp.game.joaat(\"SP0_TOTAL_CASH\"), 1000, false);",
  "mp.game.streaming.hasCollisionForModelLoaded(model);",
  "mp.game.streaming.hasClipSetLoaded(clipSet);",
  "mp.game.streaming.hasNamedPtfxAssetLoaded(fxName);",
  "mp.game.streaming.getIdealPlayerSwitchType(x1, y1, z1, x2, y2, z2);",
  "mp.game.streaming.hasAnimSetLoaded(animSet);",
  "mp.game.streaming.clearFocus();",
  "mp.game.streaming.getGlobalWaterType()",
  "mp.game.streaming.getNumberOfRequests()",
  "mp.game.streaming.hasPtfxAssetLoaded()",
  "mp.game.streaming.getPlayerSwitchType()",
  "mp.game.streaming.getPlayerSwitchState()",
  "mp.game.streaming.getPlayerShortSwitchState()",
  "mp.game.streaming.getPlayerSwitchJumpCutIndex()",
  "mp.game.streaming.allowPlayerSwitchPan()",
  "mp.game.streaming.allowPlayerSwitchOutro()",
  "mp.game.streaming.allowPlayerSwitchAscent()",
  "mp.game.streaming.allowPlayerSwitchDescent()",
  "mp.game.streaming.enableSwitchPauseBeforeDescent()",
  "mp.game.streaming.disableSwitchOutroFx()",
  "mp.game.streaming.getPlayerSwitchInterpOutDuration()",
  "mp.game.streaming.getPlayerSwitchInterpOutCurrentTime()",
  "mp.game.streaming.getLodscale()",
  "mp.game.streaming.beginSrl()",
  "mp.game.streaming.endSrl()",
  "mp.game.streaming.clearHdArea()",
  "mp.game.streaming.initCreatorBudget()",
  "mp.game.streaming.addModelToCreatorBudget(modelHash)",
  "mp.game.streaming.getUsedCreatorModelMemoryPercentage()",
  "mp.game.streaming.removeClipSet(clipSet);",
  "mp.game.streaming.isModelAVehicle(model);",
  "mp.game.streaming.setFocusPosAndVel(x, y, z, velocityX, velocityY, velocityZ);",
  "mp.game.streaming.newLoadSceneStart(p0, p1, p2, p3, p4, p5, p6, p7);",
  "mp.game.streaming.requestCollisionAtCoord(x, y, z);",
  "mp.game.streaming.removeAnimSet(animSet);",
  "mp.game.streaming.isModelValid(model);",
  "mp.game.streaming.requestCollisionForModel(model);",
  "mp.game.streaming.requestAdditionalCollisionAtCoord(p0, p1, p2);",
  "mp.game.streaming.prefetchSrl(p0);",
  "mp.game.streaming.removeAnimDict(animDict);",
  "mp.game.streaming.requestModel2(model);",
  "mp.game.streaming.removeIpl(iplName);",
  "mp.game.streaming.removeNamedPtfxAsset(fxName);",
  "mp.game.streaming.requestModel(modelHash);",
  "mp.game.streaming.requestModel(mp.game.joaat('a_f_y_juggalo_01'));",
  "mp.game.streaming.requestClipSet(clipSet);",
  "mp.game.streaming.isIplActive(iplName);",
  "mp.game.streaming.isModelInCdimage(model);",
  "mp.game.streaming.setDitchPoliceModels(toggle);",
  "mp.game.streaming.loadScene(x, y, z)",
  "mp.game.streaming.requestAnimSet(animSet);",
  "mp.game.streaming.newLoadSceneStartSafe(p0, p1, p2, p3, p4);",
  "mp.game.streaming.requestNamedPtfxAsset(fxName);",
  "mp.game.streaming.loadAllObjectsNow()",
  "mp.game.streaming.isNetworkLoadingScene()",
  "mp.game.streaming.networkUpdateLoadScene()",
  "mp.game.streaming.requestMenuPedModel(number)",
  "mp.game.streaming.requestModelsInRoom(number, string)",
  "mp.game.streaming.isModelAPed(number)",
  "mp.game.streaming.set(boolean)",
  "mp.game.streaming.setGamePausesFor(toggle)",
  "mp.game.streaming.loadGlobalWaterType(waterType)",
  "mp.game.streaming.requestPtfxAsset()",
  "mp.game.streaming.removePtfxAsset()",
  "mp.game.streaming.setFocusEntity(entity)",
  "mp.game.streaming.isEntityFocus(entity)",
  "mp.game.streaming.isStreamvolActive()",
  "mp.game.streaming.newLoadSceneStartSphere(x, y, z, radius, p4)",
  "mp.game.streaming.newLoadSceneStop()",
  "mp.game.streaming.isNewLoadSceneActive()",
  "mp.game.streaming.isNewLoadSceneLoaded()",
  "mp.game.streaming.isPlayerSwitchInProgress()",
  "mp.game.streaming.isSwitchReadyForDescent()",
  "mp.game.streaming.isSwitchSkippingDescent()",
  "mp.game.streaming.overrideLodscaleThisFrame(scaling)",
  "mp.game.streaming.isSrlLoaded()",
  "mp.game.streaming.removeModelFromCreatorBudget(modelHash)",
  "mp.game.streaming.setPlayerSwitchLocation(p0, p1, p2, p3, p4, p5, p6, p7, p8);",
  "mp.game.system.shiftLeft(value, bitShift);",
  "mp.game.streaming.setStreaming(toggle);",
  "mp.game.streaming.setModelAsNoLongerNeeded(model);",
  "mp.game.streaming.setHdArea(x, y, z, ground);",
  "mp.game.system.startNewStreamedScript(scriptHash, stackSize);",
  "mp.game.system.floor(value);",
  "mp.game.system.startNewStreamedScriptWithArgs(scriptHash, args, argCount, stackSize);",
  "mp.game.system.settimerb(value);",
  "mp.game.system.startNewScriptWithArgs(scriptName, args, argCount, stackSize);",
  "mp.game.system.toFloat(value);",
  "mp.game.streaming.setReducePedModelBudget(toggle);",
  "mp.game.system.ceil(value);",
  "mp.game.system.cos(value);",
  "mp.game.streaming.setUnkCameraSettings(x, y, z, rad, p4, p5);",
  "mp.game.streaming.setGamePausesForStreaming(toggle);",
  "mp.game.streaming.setReduceVehicleModelBudget(toggle);",
  "mp.game.streaming.setPedPopulationBudget(p0);",
  "mp.game.streaming.setSrlTime(p0);",
  "mp.game.streaming.setVehiclePopulationBudget(p0);",
  "mp.game.streaming.setInteriorActive(interiorID, toggle)",
  "mp.game.streaming.startPlayerSwitch(from, to, flags, switchType);",
  "mp.game.system.sin(value);",
  "mp.game.system.sqrt(value);",
  "mp.game.system.shiftRight(value, bitShift);",
  "mp.game.system.settimera(value);",
  "mp.game.system.pow(base, exponent);",
  "mp.game.system.startNewScript(scriptName, stackSize);",
  "mp.game.system.round(value);",
  "mp.game.streaming.setMapdatacullboxEnabled(name, toggle)",
  "mp.game.streaming.stopPlayerSwitch()",
  "mp.game.streaming.setPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder)",
  "mp.game.streaming.setPlayerSwitchEstablishingShot(name)",
  "mp.game.streaming.switchOutPlayer(ped, flags, switchType)",
  "mp.game.streaming.switchInPlayer(ped)",
  "mp.game.streaming.shutdownCreatorBudget()",
  "mp.game.streaming.setIslandHopperEnabled(name, toggle)",
  "mp.system.isFocused();",
  "mp.system.isFullscreen();",
  "mp.game.system.vmag(p0, p1, p2);",
  "mp.game.system.vdist2(x1, y1, z1, x2, y2, z2);",
  "mp.game.system.vdist(x1, y1, z1, x2, y2, z2);",
  "mp.game.system.wait(ms);",
  "mp.game.system.vmag2(p0, p1, p2);",
  "mp.game.task.cower(ped, duration)",
  "mp.game.task.achieveHeading(ped, heading, timeout)",
  "mp.game.task.clearLookAt(ped)",
  "mp.game.task.closeSequence(taskSequenceId)",
  "mp.game.task.clearSequence()",
  "mp.game.task.aimGunScripted(ped, scriptTask, p2, p3)",
  "mp.game.task.aimGunScriptedWithTarget(p0, p1, p2, p3, p4, p5, p6, p7)",
  "mp.game.task.aimGunAtEntity(ped, entity, duration, p3)",
  "mp.game.task.aimGunAtCoord(ped, x, y, z, time, p5, p6)",
  "mp.game.task.clearPedS(ped)",
  "mp.game.task.clearPedSecondary(ped)",
  "mp.game.task.clearPedSecondaryTask(ped)",
  "mp.game.task.clearVehicleS(vehicle)",
  "mp.game.task.boatMission(pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11)",
  "mp.game.task.clearDrivebyUnderneathDrivingTask(ped)",
  "mp.game.task.controlMountedWeapon(ped)",
  "mp.game.task.chatToPed(ped, target, p2, p3, p4, p5, p6, p7)",
  "mp.game.task.climb(ped, unused)",
  "mp.game.task.climbLadder(ped, p1)",
  "mp.game.task.clearPedTasksImmediately(ped)",
  "mp.game.task.clearDefensiveArea(p0)",
  "mp.game.task.addCoverPoint(p0, p1, p2, p3, p4, p5, p6, p7)",
  "mp.game.task.combatPed(ped, targetPed, p2, p3)",
  "mp.game.task.combatPedTimed(p0, ped, p2, p3)",
  "mp.game.task.addCoverBlockingArea(playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9)",
  "mp.game.task.arrestPed(ped, target)",
  "mp.game.task.agitatedAction(ped, ped2)",
  "mp.game.task.assistedMovementOverrideLoadDistanceThisFrame(dist)",
  "mp.game.task.assistedMovementSetRouteProperties(route, props)",
  "mp.game.task.assistedMovementIsRouteLoaded(route)",
  "mp.game.task.assistedMovementRemoveRoute(route)",
  "mp.game.task.assistedMovementRequestRoute(route)",
  "mp.game.task.addVehicleSubAttackPed(ped, ped2)",
  "mp.game.task.addVehicleSubAttackCoord(ped, x, y, z)",
  "mp.game.task.createPatrolRoute()",
  "mp.game.task.addPatrolRouteLink(p0, p1)",
  "mp.game.task.addPatrolRouteNode(p0, p1, x1, y1, z1, x2, y2, z2, p8)",
  "mp.game.task.closePatrolRoute()",
  "mp.game.task.combatHatedTargetsAroundPedTimed(p0, p1, p2, p3)",
  "mp.game.task.combatHatedTargetsAroundPed(ped, radius, p2)",
  "mp.game.task.combatHatedTargetsInArea(ped, x, y, z, radius, p5)",
  "mp.game.task.doesScenarioGroupExist(scenarioGroup)",
  "mp.game.task.doesScenarioExistInArea(x, y, z, radius, b)",
  "mp.game.task.enterVehicle(ped, vehicle, timeout, seat, speed, flag, p6)",
  "mp.game.task.getOffBoat(ped, boat)",
  "mp.game.task.followToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing)",
  "mp.game.task.goStraightToCoord(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide)",
  "mp.game.task.goStraightToCoordRelativeToEntity(entity1, entity2, p2, p3, p4, p5, p6)",
  "mp.game.task.flushRoute()",
  "mp.game.task.extendRoute(x, y, z)",
  "mp.game.task.followPointRoute(ped, speed, unknown)",
  "mp.game.task.goToEntity(entity, target, duration, distance, speed, p5, p6)",
  "mp.game.task.followNavMeshToCoord(ped, x, y, z, speed, timeout, stoppingRange, persistFollowing, unk)",
  "mp.game.task.followNavMeshToCoordAdvanced(ped, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f)",
  "mp.game.task.getNavmeshRouteDistanceRemaining(ped)",
  "mp.game.task.getNavmeshRouteResult(ped)",
  "mp.game.task.goToCoordAnyMeans(ped, x, y, z, speed, p5, p6, walkingStyle, p8)",
  "mp.game.task.goToCoordAnyMeansExtraParams(ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12)",
  "mp.game.task.goToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12, p13)",
  "mp.game.task.getPhoneGestureAnimCurrentTime(ped)",
  "mp.game.task.getPhoneGestureAnimTotalTime(ped)",
  "mp.game.task.getSequenceProgress(ped)",
  "mp.game.task.getIsActive(ped, taskIndex)",
  "mp.game.task.getIsTaskActive(ped, taskIndex)",
  "mp.game.task.getScriptStatus(ped, taskHash)",
  "mp.game.task.getActiveVehicleMissionType(vehicle)",
  "mp.game.task.getClipSetForScriptedGun(p0)",
  "mp.game.task.everyoneLeaveVehicle(vehicle)",
  "mp.game.task.driveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern)",
  "mp.game.task.getPedDesiredMoveBlendRatio(ped)",
  "mp.game.task.gotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist)",
  "mp.game.task.doesScriptedCoverPointExistAtCoords(x, y, z)",
  "mp.game.task.getScriptedCoverPointCoords(coverpoint)",
  "mp.game.task.exitCover(p0, p1, p2, p3, p4)",
  "mp.game.task.getMoveNetworkEvent(ped, eventName)",
  "mp.game.task.getMoveNetworkSignalBool(ped, signalName)",
  "mp.game.task.getMoveNetworkSignalFloat(ped, signalName)",
  "mp.game.task.getMoveNetworkState(ped)",
  "mp.game.task.forceMotionState(ped, state, p2)",
  "mp.game.task.getVehicleWaypointTargetPoint(vehicle)",
  "mp.game.task.getVehicleWaypointProgress(vehicle)",
  "mp.game.task.getWaypointDistanceAlongRoute(p0, p1)",
  "mp.game.task.getPedWaypointDistance(p0)",
  "mp.game.task.getPedWaypointProgress(ped)",
  "mp.game.task.followWaypointRecording(p0, p1, p2, p3, p4)",
  "mp.game.task.getIsWaypointRecordingLoaded(name)",
  "mp.game.task.goToEntityWhileAimingAtEntity(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern)",
  "mp.game.task.goToEntityWhileAimingAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)",
  "mp.game.task.goToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern)",
  "mp.game.task.goToCoordWhileAimingAtEntity(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)",
  "mp.game.task.goToCoordWhileAimingAtCoord(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern)",
  "mp.game.task.doesScenarioOfTypeExistInArea(p0, p1, p2, p4, p5)",
  "mp.game.task.pause(ped, ms)",
  "mp.game.task.jump(ped, unused, p2, p3)",
  "mp.game.task.handsUp(ped, duration, facingPed, p3, p4)",
  "mp.game.task.openVehicleDoor(ped, vehicle, timeOut, seat, speed)",
  "mp.game.task.leaveVehicle(ped, vehicle, flags)",
  "mp.game.task.parachute(ped, p1, p2)",
  "mp.game.task.parachuteToTarget(ped, x, y, z)",
  "mp.game.task.isPlayingPhoneGestureAnim(ped)",
  "mp.game.task.lookAtCoord(entity, x, y, z, duration, p5, p6)",
  "mp.game.task.lookAtEntity(ped, lookAt, duration, unknown1, unknown2)",
  "mp.game.task.openSequence()",
  "mp.game.task.leaveAnyVehicle(ped, p1, flags)",
  "mp.game.task.gotoEntityOffset(ped, p1, p2, x, y, z, duration)",
  "mp.game.task.gotoEntityOffsetXy(p0, oed, duration, p3, p4, p5, p6, p7)",
  "mp.game.task.heliChase(pilot, entityToFollow, x, y, z)",
  "mp.game.task.heliMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, landingRadius, targetHeading, unk1, unk2, unk3, landingFlags)",
  "mp.game.task.heliEscortHeli(pilot, heli1, heli2, p3, p4, p5)",
  "mp.game.task.isDrivebyUnderneathDrivingTask(ped)",
  "mp.game.task.isMountedWeaponUnderneathDrivingTask(ped)",
  "mp.game.task.guardCurrentPosition(p0, p1, p2, p3)",
  "mp.game.task.guardAssignedDefensiveArea(p0, p1, p2, p3, p4, p5, p6)",
  "mp.game.task.guardSphereDefensiveArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)",
  "mp.game.task.isPedCuffed(ped)",
  "mp.game.task.isPedBeingArrested(ped)",
  "mp.game.task.isPedRunningArrest(ped)",
  "mp.game.task.isPedStrafing(ped)",
  "mp.game.task.isPedSprinting(ped)",
  "mp.game.task.isPedRunning(ped)",
  "mp.game.task.isPedWalking(ped)",
  "mp.game.task.isPedStill(ped)",
  "mp.game.task.isMoveBlendRatioSprinting(ped)",
  "mp.game.task.isMoveBlendRatioRunning(ped)",
  "mp.game.task.isMoveBlendRatioWalking(ped)",
  "mp.game.task.isMoveBlendRatioStill(ped)",
  "mp.game.task.isMoveNetworkReadyForTransition(ped)",
  "mp.game.task.isMoveNetworkActive(ped)",
  "mp.game.task.moveNetworkByNameWithInitParams(ped, p1, p3, p4, animDict, flags)",
  "mp.game.task.moveNetworkAdvancedByName(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags)",
  "mp.game.task.moveNetworkByName(ped, task, multiplier, p3, animDict, flags)",
  "mp.game.task.isWaypointPlaybackGoingOnForVehicle(vehicle)",
  "mp.game.task.isWaypointPlaybackGoingOnForPed(p0)",
  "mp.game.task.patrol(ped, p1, p2, p3, p4)",
  "mp.game.task.openPatrolRoute(patrolRoute)",
  "mp.game.task.isPedInWrithe(ped)",
  "mp.game.task.isPedGettingUp(ped)",
  "mp.game.task.isPedPlayingBaseClipInScenario(ped)",
  "mp.game.task.isPedActiveInScenario(ped)",
  "mp.game.task.isScenarioTypeEnabled(scenarioType)",
  "mp.game.task.isScenarioGroupEnabled(scenarioGroup)",
  "mp.game.task.isScenarioOccupied(p0, p1, p2, p3, p4)",
  "mp.game.task.rappelFromHeli(ped, p1)",
  "mp.game.task.reactAndFleePed(ped, fleeTarget)",
  "mp.game.task.plantBomb(ped, x, y, z, heading)",
  "mp.game.task.setGlobalMinBirdFlightHeight(height)",
  "mp.game.task.playAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ)",
  "mp.game.task.playAnimAdvanced(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, p14, p15)",
  "mp.game.task.playEntityScriptedAnim(p0, p4, p5)",
  "mp.game.task.setAnimWeight(p0, p1, p2, p3, p4)",
  "mp.game.task.setAnimRate(p0, p1, p2, p3)",
  "mp.game.task.setAnimLooped(p0, p1, p2, p3)",
  "mp.game.task.playPhoneGestureAnimation(ped, animDict, animation, boneMaskType, p4, p5, p6, p7)",
  "mp.game.task.performSequence(ped, taskSequenceId)",
  "mp.game.task.performSequenceLocally(ped, taskSequenceId)",
  "mp.game.task.planeChase(pilot, entityToFollow, x, y, z)",
  "mp.game.task.planeLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ)",
  "mp.game.task.planeGotoPreciseVtol(ped, vehicle, p2, p3, p4, p5, p6, p7, p8, p9)",
  "mp.game.task.planeMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ, p13)",
  "mp.game.task.planeTaxi(p0, p1, p2, p3, p4, p5, p6)",
  "mp.game.task.setDrivebyTarget(shootingPed, targetPed, targetVehicle, x, y, z)",
  "mp.game.task.setMountedWeaponTarget(shootingPed, targetPed, targetVehicle, x, y, z, p6, p7)",
  "mp.game.task.rappelDownWall(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)",
  "mp.game.task.performSequenceFromProgress(p0, p1, p2, p3)",
  "mp.game.task.setDecisionMaker(ped, p1)",
  "mp.game.task.pedSlideToCoord(ped, x, y, z, heading, p5)",
  "mp.game.task.pedSlideToCoordHdgRate(ped, x, y, z, heading, p5, p6)",
  "mp.game.task.removeCoverPoint(coverpoint)",
  "mp.game.task.seekCoverFromPos(ped, x, y, z, duration, p5)",
  "mp.game.task.seekCoverFromPed(ped, target, duration, p3)",
  "mp.game.task.seekCoverToCoverPoint(p0, p1, p2, p3, p4, p5, p6)",
  "mp.game.task.seekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, p7, p8)",
  "mp.game.task.putPedDirectlyIntoCover(ped, x, y, z, timeout, p5, p6, p7, p8, p9, p10)",
  "mp.game.task.putPedDirectlyIntoMelee(ped, meleeTarget, p2, p3, p4, p5)",
  "mp.game.task.setDriveCruiseSpeed(driver, cruiseSpeed)",
  "mp.game.task.setDriveMaxCruiseSpeed(p0, p1)",
  "mp.game.task.setDriveDrivingStyle(ped, drivingStyle)",
  "mp.game.task.removeAllCoverBlockingAreas()",
  "mp.game.task.requestMoveNetworkStateTransition(ped, name)",
  "mp.game.task.setBlockingOfNonTemporaryEvents(ped, toggle)",
  "mp.game.task.removeWaypointRecording(name)",
  "mp.game.task.requestWaypointRecording(name)",
  "mp.game.task.setHighFall(ped, p1, p2, p3)",
  "mp.game.task.reloadWeapon(ped, unused)",
  "mp.game.task.resetScenarioTypesEnabled()",
  "mp.game.task.resetExclusiveScenarioGroup()",
  "mp.game.task.setExclusiveScenarioGroup(scenarioGroup)",
  "mp.game.task.resetScenarioGroupsEnabled()",
  "mp.game.task.playAnimOnRunningScenario(ped, animDict, animName)",
  "mp.game.task.pedHasUseScenarioTask(ped)",
  "mp.game.task.pedHasUseScenario(ped)",
  "mp.game.task.setAnimPlaybackTime(ped, phase, priority, secondary);",
  "mp.game.task.taskPause(ped, ms)",
  "mp.game.task.standStill(ped, time)",
  "mp.game.task.taskStandStill(ped, time)",
  "mp.game.task.taskJump(ped, unused, p2, p3)",
  "mp.game.task.skyDive(ped, p1)",
  "mp.game.task.setParachuteTarget(ped, x, y, z)",
  "mp.game.task.setParachuteThrust(ped, thrust)",
  "mp.game.task.smartFleeCoord(ped, x, y, z, distance, time, p6, p7)",
  "mp.game.task.smartFleePed(ped, fleeTarget, distance, fleeTime, p4, p5)",
  "mp.game.task.shockingEventReact(ped, eventHandle)",
  "mp.game.task.stealthKill(killer, target, actionType, p3, p4)",
  "mp.game.task.setPedPathCanUseClimbovers(ped, Toggle)",
  "mp.game.task.setPedPathCanUseLadders(ped, Toggle)",
  "mp.game.task.setPedPathCanDropFromHeight(ped, Toggle)",
  "mp.game.task.setPedPathClimbCostModifier(ped, modifier)",
  "mp.game.task.setPedPathMayEnterWater(ped, mayEnterWater)",
  "mp.game.task.setPedPathPreferToAvoidWater(ped, avoidWater)",
  "mp.game.task.setPedPathAvoidFire(ped, avoidFire)",
  "mp.game.task.stopAnim(ped, animDictionary, animationName, p3)",
  "mp.game.task.stopAnimTask(ped, animDictionary, animationName, p3)",
  "mp.game.task.stopAnimPlayback(ped, p1, p2)",
  "mp.game.task.stopPhoneGestureAnimation(ped, p1)",
  "mp.game.task.setSequenceToRepeat(taskSequenceId, repeat)",
  "mp.game.task.shootAtCoord(ped, x, y, z, duration, firingPattern)",
  "mp.game.task.shuffleToNextVehicleSeat(ped, vehicle, p2)",
  "mp.game.task.turnPedToFaceCoord(ped, x, y, z, duration)",
  "mp.game.task.setVehicleChaseBehaviorFlag(ped, flag, set)",
  "mp.game.task.setVehicleChaseIdealPursuitDistance(ped, distance)",
  "mp.game.task.submarineGotoAndStop(p0, submarine, x, y, z, p5)",
  "mp.game.task.shootAtEntity(entity, target, duration, firingPattern)",
  "mp.game.task.setNextDesiredMoveState(p0)",
  "mp.game.task.setPedDesiredMoveBlendRatio(ped, p1)",
  "mp.game.task.setSphereDefensiveArea(p0, p1, p2, p3, p4)",
  "mp.game.task.toggleDuck(p0, p1)",
  "mp.game.task.standGuard(ped, x, y, z, heading, scenarioName)",
  "mp.game.task.sweepAimPosition(p0, p5, p6, p7, p8, p9, p10)",
  "mp.game.task.sweepAimEntity(ped, anim, p2, p3, p4, p5, vehicle, p7, p8)",
  "mp.game.task.synchronizedScene(ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9)",
  "mp.game.task.setMoveNetworkSignalBool(ped, signalName, value)",
  "mp.game.task.setMoveNetworkSignalFloat2(ped, signalName, value)",
  "mp.game.task.setMoveNetworkSignalFloat(ped, signalName, value)",
  "mp.game.task.setPedWaypointRouteOffset(p0, p1, p2, p3)",
  "mp.game.task.stayInCover(ped)",
  "mp.game.task.swapWeapon(ped, p1)",
  "mp.game.task.throwProjectile(ped, x, y, z, p4, p5)",
  "mp.game.task.setPedCanPlayAmbientIdles(ped, p1, p2)",
  "mp.game.task.setScenarioTypeEnabled(scenarioType, toggle)",
  "mp.game.task.setScenarioGroupEnabled(scenarioGroup, p1)",
  "mp.game.task.startScenarioAtPosition(ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport)",
  "mp.game.task.startScenarioInPlace(ped, scenarioName, unkDelay, playEnterAnim)",
  "mp.game.task.updateHandsUpDuration(ped, duration)",
  "mp.game.task.vehicleDriveToCoord(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10)",
  "mp.game.task.vehicleDriveToCoordLongrange(ped, vehicle, x, y, z, speed, driveMode, stopRange)",
  "mp.game.task.vehicleDriveWander(ped, vehicle, speed, drivingStyle)",
  "mp.game.task.wanderInArea(ped, x, y, z, radius, minimalLength, timeBetweenWalks)",
  "mp.game.task.wanderStandard(ped, p1, p2)",
  "mp.game.task.wanderSpecific(p0, p1, p2, p3)",
  "mp.game.task.vehiclePark(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn)",
  "mp.game.task.vehiclePlayAnim(vehicle, animationSet, animationName)",
  "mp.game.task.updateAimGunScriptedTarget(p0, p1, p2, p3, p4, p5)",
  "mp.game.task.turnPedToFaceEntity(ped, entity, duration)",
  "mp.game.task.vehicleTempAction(driver, vehicle, action, time)",
  "mp.game.task.vehicleMission(driver, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic)",
  "mp.game.task.vehicleMissionPedTarget(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, p7, DriveAgainstTraffic)",
  "mp.game.task.vehicleMissionCoorsTarget(ped, vehicle, x, y, z, p5, p6, p7, p8, p9, DriveAgainstTraffic)",
  "mp.game.task.vehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance)",
  "mp.game.task.vehicleFollow(driver, vehicle, targetEntity, speed, drivingStyle, minDistance)",
  "mp.game.task.vehicleChase(driver, targetEnt)",
  "mp.game.task.vehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7)",
  "mp.game.task.useMobilePhone(ped, p1, p2)",
  "mp.game.task.useMobilePhoneTimed(ped, duration)",
  "mp.game.task.warpPedIntoVehicle(ped, vehicle, seat)",
  "mp.game.task.uncuffPed(ped)",
  "mp.game.task.updateSweepAimPosition(p0, p1, p2, p3)",
  "mp.game.task.updateSweepAimEntity(ped, entity)",
  "mp.game.task.vehicleWaypointPlaybackOverrideSpeed(vehicle, speed)",
  "mp.game.task.vehicleWaypointPlaybackUseDefaultSpeed(vehicle)",
  "mp.game.task.vehicleWaypointPlaybackResume(vehicle)",
  "mp.game.task.vehicleWaypointPlaybackPause(vehicle)",
  "mp.game.task.vehicleFollowWaypointRecording(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9)",
  "mp.game.task.waypointPlaybackStopAimingOrShooting(p0)",
  "mp.game.task.waypointPlaybackStartShootingAtCoord(p0, p1, p2, p3, p4, p5)",
  "mp.game.task.waypointPlaybackStartShootingAtPed(p0, p1, p2, p3)",
  "mp.game.task.waypointPlaybackStartAimingAtCoord(p0, p1, p2, p3, p4)",
  "mp.game.task.waypointPlaybackStartAimingAtPed(p0, p1, p2)",
  "mp.game.task.useWaypointRecordingAsAssistedMovementRoute(name, p1, p2, p3)",
  "mp.game.task.waypointPlaybackOverrideSpeed(p0, p1, p2)",
  "mp.game.task.waypointPlaybackResume(p0, p1, p2, p3)",
  "mp.game.task.waypointPlaybackPause(p0, p1, p2)",
  "mp.game.task.waypointPlaybackGetIsPaused(p0)",
  "mp.game.task.vehicleGotoNavmesh(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange)",
  "mp.game.task.vehicleAimAtCoord(ped, x, y, z)",
  "mp.game.task.vehicleShootAtCoord(ped, x, y, z, p4)",
  "mp.game.task.vehicleAimAtPed(ped, target)",
  "mp.game.task.vehicleShootAtPed(ped, target, p2)",
  "mp.game.task.useNearestScenarioChainToCoordWarp(p0, p1, p2, p3, p4, p5)",
  "mp.game.task.useNearestScenarioChainToCoord(p0, p1, p2, p3, p4, p5)",
  "mp.game.task.useNearestScenarioToCoordWarp(ped, x, y, z, radius, p5)",
  "mp.game.task.useNearestScenarioToCoord(ped, x, y, z, distance, duration)",
  "mp.game.task.updateTaskAimGunScriptedTarget(ped, target, x, y, z, disableBlockingClip);",
  "mp.game.ui.activateFrontendMenu(menuhash, Toggle_Pause, p2);",
  "mp.game.ui.addTextComponentSubstringCash(cashAmount, p1);",
  "mp.game.ui.addTextComponentInteger(value);",
  "mp.game.time.getLocalTime(year, month, day, hour, minute, second);",
  "mp.game.time.getPosixTime(year, month, day, hour, minute, second);",
  "mp.game.time.setClockDate(day, month, year);",
  "mp.game.time.advanceClockTimeTo(hour, minute, second);",
  "mp.game.time.getLocalTimeGmt(year, month, day, hour, minute, second);",
  "mp.game.ui.addTextComponentSubstringLocalized(gxtEntryHash);",
  "mp.game.time.pauseClock(toggle);",
  "mp.game.time.setClockTime(hour, minute, second);",
  "mp.game.time.addToClockTime(hours, minutes, seconds);",
  "mp.game.ui.addBlipForRadius(posX, posY, posZ, radius);",
  "mp.game.ui.addBlipForCoord(x, y, z);",
  "mp.game.ui.addNextMessageToPreviousBriefs(p0);",
  "mp.game.ui.addBlipForPickup(pickup);",
  "mp.game.ui.addTextComponentItemString(labelName);",
  "mp.game.ui.addTextComponentFloat(value, decimalPlaces);",
  "Boolean pool.exists(Number ID)",
  "mp.game.ui.addTextComponentSubstringBlipName(blip)",
  "mp.game.ui.addTextComponentFormattedInteger(value, commaSeparated)",
  "mp.game.ui.addTextComponentSubstringPhoneNumber(p0, p1)",
  "mp.game.ui.addTextComponentSubstringKeyboardDisplay(string)",
  "mp.game.ui.addBlipForArea(x, y, z, width, height)",
  "mp.game.ui.addBlipForEntity(entity)",
  "mp.game.ui.addPointToGpsCustomRoute(x, y, z)",
  "mp.game.ui.addPointToGpsMultiRoute(x, y, z)",
  "mp.game.task.waypointPlaybackUseDefaultSpeed(p0)",
  "mp.game.task.waypointRecordingGetClosestWaypoint(name, x, y, z)",
  "mp.game.task.waypointRecordingGetSpeedAtPoint(name, point)",
  "mp.game.task.waypointRecordingGetCoord(name, point)",
  "mp.game.task.waypointRecordingGetNumPoints(name)",
  "mp.game.task.writhe(ped, target, time, p3, p4, p5)",
  "mp.game.ui.addTextComponentSubstringPlayerName(text);",
  "mp.game.ui.addTrevorRandomModifier(headDisplayId);",
  "mp.game.ui.clearThisPrint(p0);",
  "mp.game.ui.clearHelp(toggle);",
  "mp.game.ui.beginTextCommandSetBlipName(gxtentry);",
  "mp.game.ui.addTextComponentSubstringTime(timestamp, flags);",
  "mp.game.ui.clearAdditionalText(p0, p1);",
  "mp.game.ui.clearFloatingHelp(p0, p1);",
  "mp.game.ui.addTextComponentSubstringWebsite(website);",
  "mp.game.ui.beginTextCommandBusyspinnerOn(text)",
  "mp.game.ui.busyspinnerOff()",
  "mp.game.ui.busyspinnerIsOn()",
  "mp.game.ui.busyspinnerIsDisplaying()",
  "mp.game.ui.beginTextCommandThefeedPost(text)",
  "mp.game.ui.beginTextCommandPrint(GxtEntry)",
  "mp.game.ui.beginTextCommandIsMessageDisplayed(text)",
  "mp.game.ui.beginTextCommandGetWidth(text)",
  "mp.game.ui.beginTextCommandDisplayText(text)",
  "mp.game.ui.beginTextCommandLineCount(entry)",
  "mp.game.ui.beginTextCommandDisplayHelp(inputType)",
  "mp.game.ui.beginTextCommandIsThisHelpMessageBeingDisplayed(labelName)",
  "mp.game.ui.beginTextCommandObjective(p0)",
  "mp.game.ui.beginTextCommandClearPrint(text)",
  "mp.game.ui.beginTextCommandOverrideButtonText(gxtEntry)",
  "mp.game.ui.addTextComponentSubstringTextLabel(labelName)",
  "mp.game.ui.addTextComponentSubstringTextLabelHashKey(gxtEntryHash)",
  "mp.game.ui.clearPrints()",
  "mp.game.ui.clearBrief()",
  "mp.game.ui.clearAllHelpMessages()",
  "mp.game.ui.clearSmallPrints()",
  "mp.game.ui.clearAllBlipRoutes()",
  "mp.game.ui.allowSonarBlips(toggle)",
  "mp.game.ui.clearGpsFlags()",
  "mp.game.ui.clearGpsRaceTrack()",
  "mp.game.ui.clearGpsCustomRoute()",
  "mp.game.ui.clearGpsMultiRoute()",
  "mp.game.ui.clearGpsPlayerWaypoint()",
  "mp.game.ui.clearReminderMessage()",
  "mp.game.ui.createMpGamerTagWithCrewColor(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b)",
  "mp.game.ui.createFakeMpGamerTag(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag)",
  "mp.game.ui.clearDynamicPauseMenuErrorMessage()",
  "mp.game.ui.customMinimapSetActive(lock)",
  "mp.game.ui.customMinimapSetBlipObject(spriteId)",
  "mp.game.ui.customMinimapCreateBlip(x, y, z)",
  "mp.game.ui.customMinimapClearBlips()",
  "mp.game.ui.allowPauseMenuWhenDeadThisFrame()",
  "mp.game.ui.clearPedInPauseMenu()",
  "mp.game.ui.closeSocialClubMenu()",
  "mp.game.ui.closeMultiplayerChat()",
  "mp.game.ui.displayAreaName(toggle);",
  "mp.game.ui.displayHud(toggle);",
  "mp.game.ui.drawNotification3(blink, p1);",
  "mp.game.ui.displayAmmoThisFrame(display);",
  "mp.game.ui.doesTextLabelExist(gxt);",
  "mp.game.ui.drawNotification4(blink, p1);",
  "mp.game.ui.displayCash(toggle);",
  "mp.game.ui.displayRadar(Toggle);",
  "RAGE.Game.Ui.DisplayRadar(Toggle);",
  "mp.game.ui.displayHelpTextFromStringLabel(p0, loop, beep, duration);",
  "mp.game.ui.drawSubtitleTimed(time, drawImmediately);",
  "mp.game.ui.doesTextBlockExist(gxt);",
  "mp.game.ui.drawNotification(blink, p1);",
  "mp.game.ui.drawNotification2(blink, p1);",
  "mp.game.ui.enableDeathbloodSeethrough(p0);",
  "mp.game.ui.displayHelpTextThisFrame(message, p1);",
  "mp.game.ui.drawText(x, y);",
  "mp.game.ui.endTextCommandBusyspinnerOn(busySpinnerType)",
  "mp.game.ui.endTextCommandThefeedPostMessagetext(txdName, textureName, flash, iconType, sender, subject)",
  "mp.game.ui.endTextCommandThefeedPostMessagetextGxtEntry(txdName, textureName, flash, iconType, sender, subject)",
  "mp.game.ui.endTextCommandThefeedPostMessagetextTu(txdName, textureName, flash, iconType, sender, subject, duration)",
  "mp.game.ui.endTextCommandThefeedPostMessagetextWithCrewTag(txdName, textureName, flash, iconType, sender, subject, duration, clanTag)",
  "mp.game.ui.endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9)",
  "mp.game.ui.endTextCommandThefeedPostAward(textureDict, textureName, rpBonus, colorOverlay, titleLabel)",
  "mp.game.ui.endTextCommandThefeedPostCrewtag(p0, p1, p3, isLeader, unk0, clanDesc, R, G, B)",
  "mp.game.ui.endTextCommandThefeedPostCrewtagWithGameName(p0, p1, p3, isLeader, unk0, clanDesc, playerName, R, G, B)",
  "mp.game.ui.endTextCommandThefeedPostMpticker(blink, p1)",
  "mp.game.ui.endTextCommandThefeedPostCrewRankup(p0, p1, p2, p3, p4)",
  "mp.game.ui.endTextCommandPrint(duration, drawImmediately)",
  "mp.game.ui.endTextCommandDisplayText(x, y, p2)",
  "mp.game.ui.endTextCommandIsMessageDisplayed()",
  "mp.game.ui.endTextCommandGetWidth(p0)",
  "mp.game.ui.endTextCommandLineCount(x, y)",
  "mp.game.ui.endTextCommandIsThisHelpMessageBeingDisplayed(p0)",
  "mp.game.ui.endTextCommandSetBlipName(blip)",
  "mp.game.ui.endTextCommandObjective(p0)",
  "mp.game.ui.endTextCommandClearPrint()",
  "mp.game.ui.endTextCommandOverrideButtonText(p0)",
  "mp.game.ui.endTextCommandDisplayHelp(helpid, loop, beep, shape)",
  "mp.game.ui.display(toggle)",
  "mp.game.ui.displayWhenDeadThisFrame()",
  "mp.game.ui.displayWhenPausedThisFrame()",
  "mp.game.ui.doesBlipHaveGpsRoute(blip)",
  "mp.game.ui.doesBlipExist(blip)",
  "mp.game.ui.dontTiltMinimapThisFrame()",
  "mp.game.ui.displaySniperScopeThisFrame()",
  "mp.game.ui.displayLoadingScreenTips()",
  "mp.game.ui.displayPlayerNameTagsOnBlips(toggle)",
  "mp.game.ui.disableFrontendThisFrame()",
  "mp.game.ui.doesPedHaveAiBlip(ped)",
  "mp.game.ui.flashAbilityBar(p0);",
  "mp.game.ui.flashWantedDisplay(p0);",
  "mp.game.ui.getBlipInfoIdCoord(p0);",
  "mp.game.ui.getHudComponentPosition(componentIndex);",
  "mp.game.ui.getHudColour(hudIndex, r, g, b, a);",
  "mp.game.ui.endTextCommandThefeedPostStats(statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName)",
  "mp.game.ui.endTextCommandThefeedPostTicker(isImportant, cacheMessage)",
  "mp.game.ui.endTextCommandThefeedPostTickerForced(isImportant, cacheMessage)",
  "mp.game.ui.endTextCommandThefeedPostTickerWithTokens(isImportant, cacheMessage)",
  "mp.game.ui.endTextCommandThefeedPostUnlock(p0, p1, p2)",
  "mp.game.ui.endTextCommandThefeedPostUnlockTu(p0, p1, p2, p3)",
  "mp.game.ui.endTextCommandThefeedPostUnlockTuWithColor(p0, p1, p2, p3, p4, p5)",
  "mp.game.ui.endTextCommandThefeedPostVersusTu(p2, p5, p6, p7)",
  "mp.game.ui.endTextCommandThefeedPostReplayIcon(type, image, text)",
  "mp.game.ui.endTextCommandThefeedPostReplayInput(type, button, text)",
  "mp.game.ui.getColour(hudColorIndex)",
  "mp.game.ui.getDefaultScriptRendertargetRenderId()",
  "mp.game.ui.getFirstBlipInfoId(blipSprite)",
  "mp.game.ui.getClosestBlipOfType(blipSprite)",
  "mp.game.ui.getBlipInfoIdDisplay(blip)",
  "mp.game.ui.getBlipInfoIdType(blip)",
  "mp.game.ui.getBlipInfoIdEntityIndex(blip)",
  "mp.game.ui.getBlipInfoIdPickupIndex(blip)",
  "mp.game.ui.getBlipFromEntity(entity)",
  "mp.game.ui.getBlipCoords(blip)",
  "mp.game.ui.getBlipSprite(blip)",
  "mp.game.ui.getBlipAlpha(blip)",
  "mp.game.ui.getBlipFadeStatus(blip)",
  "mp.game.ui.getBlipRotation(blip)",
  "mp.game.ui.getBlipColour(blip)",
  "mp.game.ui.forceWeaponWheel(show)",
  "mp.game.ui.flashMinimapDisplay()",
  "mp.game.ui.flashMinimapDisplayWithColor(hudColorIndex)",
  "mp.game.ui.getComponentPosition(id)",
  "mp.game.ui.forceCloseReportugcMenu()",
  "mp.game.ui.getCurrentWebpageId()",
  "mp.game.ui.getCurrentWebsiteId()",
  "mp.game.ui.getGlobalActionscriptFlag(flagIndex)",
  "mp.game.ui.forceSonarBlipsThisFrame()",
  "mp.game.ui.getCurrentFrontendMenuVersion()",
  "mp.game.ui.forceCloseTextInputBox()",
  "mp.game.ui.flagPlayerContextInTournament(toggle)",
  "mp.game.ui.getAiBlip2(ped)",
  "mp.game.ui.getAiBlip(ped)",
  "mp.game.ui.endTextComponent()",
  "mp.game.ui.getLengthOfLiteralString(string);",
  "mp.game.ui.getLabelText(labelName);",
  "mp.game.ui.hasThisAdditionalTextLoaded(gxt, slot);",
  "mp.game.ui.getStreetNameFromHashKey(hash);",
  "mp.game.ui.getTextScaleHeight(size, font);",
  "mp.game.ui.hideSpecialAbilityLockonOperation(p0, p1);",
  "mp.game.ui.hasAdditionalTextLoaded(slot);",
  "mp.game.ui.getTextSubstring(text, position, length);",
  "mp.game.ui.getNamedRendertargetRenderId(p0);",
  "mp.game.ui.hasHeadDisplayLoaded(headDisplayId);",
  "mp.game.ui.hideHudComponentThisFrame(componentIndex);",
  "mp.game.ui.getLengthOfStringWithThisTextLabel(gxt);",
  "mp.game.ui.getTextScreenWidth(p0);",
  "mp.game.ui.getTextSubstringSafe(text, position, length, maxLength);",
  "mp.game.ui.getTextSubstringSlice(text, startPosition, endPosition);",
  "mp.game.ui.hideScriptedHudComponentThisFrame(componentIndex);",
  "mp.game.ui.getLengthOfLiteralStringInBytes(string)",
  "mp.game.ui.getRenderedCharacterHeight(size, font)",
  "mp.game.ui.getStandardBlipEnumId()",
  "mp.game.ui.getWaypointBlipEnumId()",
  "mp.game.ui.getNumberOfActiveBlips()",
  "mp.game.ui.getNextBlipInfoId(blipSprite)",
  "mp.game.ui.getNewSelectedMissionCreatorBlip()",
  "mp.game.ui.isBlipFlashing(blip)",
  "mp.game.ui.hideNumberOnBlip(blip)",
  "mp.game.ui.getMainPlayerBlipId()",
  "mp.game.ui.hideLoadingOnFadeThisFrame()",
  "mp.game.ui.hideMinimapExteriorMapThisFrame()",
  "mp.game.ui.hideMinimapInteriorMapThisFrame()",
  "mp.game.ui.hideAndRadarThisFrame()",
  "mp.game.ui.hideHelpTextThisFrame()",
  "mp.game.ui.getMinimapFowDiscoveryRatio()",
  "mp.game.ui.getMinimapFowCoordinateIsRevealed(x, y, z)",
  "mp.game.ui.hideScriptedComponentThisFrame(id)",
  "mp.game.ui.hideComponentThisFrame(id)",
  "mp.game.ui.hideAreaAndVehicleNameThisFrame()",
  "mp.game.ui.getScreenPositionFromWorldPosition(worldX, worldY, worldZ)",
  "mp.game.ui.getWarningMessageTitleHash()",
  "mp.game.ui.getNorthRadarBlip()",
  "mp.game.ui.getPauseMenuState()",
  "mp.game.ui.getPauseMenuSelection()",
  "mp.game.ui.getPauseMenuSelectionData()",
  "mp.game.ui.getMenuPedIntStat(p0)",
  "mp.game.ui.getMenuPedMaskedIntStat(p0, p2, p3)",
  "mp.game.ui.getMenuPedFloatStat(p0)",
  "mp.game.ui.getMenuPedBoolStat(p0)",
  "mp.game.ui.givePedToPauseMenu(ped, position /* 0 = left, 1 = center, 2 = right */)",
  "mp.game.ui.hasDirectorModeBeenTriggered()",
  "mp.game.ui.getMinimapComponentValues(componentName)",
  "mp.game.ui.isMinimapAreaRevealed(x, y, radius);",
  "mp.game.ui.isHudComponentActive(componentIndex);",
  "mp.game.ui.keyHudColour(p0, p1);",
  "mp.game.ui.linkNamedRendertarget(hash);",
  "mp.game.ui.isScriptedHudComponentActive(componentIndex);",
  "mp.game.ui.lockMinimapAngle(angle);",
  "mp.game.ui.isStreamingAdditionalText(p0);",
  "mp.game.ui.isNamedRendertargetLinked(hash);",
  "mp.game.ui.lockMinimapPosition(x, y);",
  "mp.game.ui.objectDecalToggle(hash);",
  "mp.game.ui.isNamedRendertargetRegistered(p0);",
  "mp.game.ui.isMessageBeingDisplayed()",
  "mp.game.ui.isPreferenceSwitchedOn()",
  "mp.game.ui.isRadarPreferenceSwitchedOn()",
  "mp.game.ui.isSubtitlePreferenceSwitchedOn()",
  "mp.game.ui.isHidden()",
  "mp.game.ui.isRadarHidden()",
  "mp.game.ui.isMinimapRendering()",
  "mp.game.ui.isHelpMessageOnScreen()",
  "mp.game.ui.isHelpMessageBeingDisplayed()",
  "mp.game.ui.isHelpMessageFadingOut()",
  "mp.game.ui.isBlipShortRange(blip)",
  "mp.game.ui.isBlipOnMinimap(blip)",
  "mp.game.ui.isMissionCreatorBlip(blip)",
  "mp.game.ui.isHoveringOverMissionCreatorBlip()",
  "mp.game.ui.isWaypointActive()",
  "mp.game.ui.isMinimapInInterior()",
  "mp.game.ui.isComponentActive(id)",
  "mp.game.ui.isScriptedComponentActive(id)",
  "mp.game.ui.isScriptedComponentHiddenThisFrame(id)",
  "mp.game.ui.openReportugcMenu()",
  "mp.game.ui.isReportugcMenuOpen()",
  "mp.game.ui.isFloatingHelpTextOnScreen(hudIndex)",
  "mp.game.ui.isMpGamerTagMovieActive()",
  "mp.game.ui.isMpGamerTagActive(gamerTagId)",
  "mp.game.ui.isMpGamerTagFree(gamerTagId)",
  "mp.game.ui.isValidMpGamerTagMovie(gamerTagId)",
  "mp.game.ui.isWarningMessageActive2()",
  "mp.game.ui.isWarningMessageActive()",
  "mp.game.ui.isPauseMenuRestarting()",
  "mp.game.ui.logDebugInfo(p0)",
  "mp.game.ui.isFrontendReadyForControl()",
  "mp.game.ui.isNavigatingMenuContent()",
  "mp.game.ui.openOnlinePoliciesMenu()",
  "mp.game.ui.isOnlinePoliciesMenuActive()",
  "mp.game.ui.openSocialClubMenu()",
  "mp.game.ui.isSocialClubActive()",
  "mp.game.ui.isMultiplayerChatActive()",
  "mp.game.ui.overrideMultiplayerChatColour(p0, hudColor)",
  "mp.game.ui.releaseNamedRendertarget(p0);",
  "mp.game.ui.requestAdditionalText(gxt, slot);",
  "mp.game.ui.removeBlip(blip);",
  "mp.game.ui.resetHudComponentValues(componentIndex);",
  "mp.game.ui.removeNotification(notifactionId);",
  "mp.game.ui.registerNamedRendertarget(p0, p1);",
  "mp.game.ui.restartFrontendMenu(menuHash, p1);",
  "mp.game.ui.requestAdditionalText2(gxt, slot);",
  "mp.game.ui.setAbilityBarValue(p0, p1);",
  "mp.game.ui.respondingAsTemp(p0);",
  "mp.game.ui.preloadBusyspinner()",
  "mp.game.ui.requestAdditionalTextForDlc(gxt, slot)",
  "mp.game.ui.replaceColour(hudColorIndex, hudColorIndex2)",
  "mp.game.ui.replaceColourWithRgba(hudColorIndex, r, g, b, a)",
  "mp.game.ui.setAbilityBarVisibilityInMultiplayer(visible)",
  "mp.game.ui.setAllowAbilityBarInMultiplayer(toggle)",
  "mp.game.ui.setBlipCoords(blip, posX, posY, posZ)",
  "mp.game.ui.setBlipAlpha(blip, alpha)",
  "mp.game.ui.setBlipFade(blip, opacity, duration)",
  "mp.game.ui.setBlipFlashInterval(blip, ms)",
  "mp.game.ui.setBlipColour(blip, color)",
  "mp.game.ui.setBlipAsMissionCreatorBlip(blip, toggle)",
  "mp.game.ui.setBlipAsShortRange(blip, toggle)",
  "mp.game.ui.setBlipDisplay(blip, displayId)",
  "mp.game.ui.setBlipCategory(blip, index)",
  "mp.game.ui.setBlipAsFriendly(blip, toggle)",
  "mp.game.ui.pulseBlip(blip)",
  "mp.game.ui.setBlipDisplayIndicatorOnBlip(blip, toggle)",
  "mp.game.ui.setBlipAsMinimalOnEdge(blip, p1)",
  "mp.game.ui.refreshWaypoint()",
  "mp.game.ui.setBlipBright(blip, toggle)",
  "mp.game.ui.removeMultiplayerBankCash()",
  "mp.game.ui.removeMultiplayerCash()",
  "mp.game.ui.setBigmapActive(toggleBigMap, showFullMap)",
  "mp.game.ui.resetReticuleValues()",
  "mp.game.ui.resetComponentValues(id)",
  "mp.game.ui.removeMpGamerTag(gamerTagId)",
  "mp.game.ui.resetGlobalActionscriptFlag(flagIndex)",
  "mp.game.ui.removeWarningMessageListItems()",
  "mp.game.ui.pauseMenuActivateContext(contextHash)",
  "mp.game.ui.pauseMenuDeactivateContext(contextHash)",
  "mp.game.ui.pauseMenuIsContextActive(contextHash)",
  "mp.game.ui.pauseMenuIsContextMenuActive()",
  "mp.game.ui.pauseMenuSetBusySpinner(p0, p1, p2)",
  "mp.game.ui.releaseControlOfFrontend()",
  "mp.game.ui.overrideMultiplayerChatPrefix(gxtEntryHash)",
  "mp.game.ui.resetMinimapComponentValues(names)",
  "mp.game.ui.setBlipCategoryGrouped(category, placeIn);",
  "mp.game.ui.setBlipCategoryPriority(category, priority);",
  "mp.game.ui.setMinimapAttitudeIndicatorLevel(altitude, p1);",
  "mp.game.ui.setMinimapComponent(p0, p1, p2);",
  "mp.game.ui.setMinimapBlockWaypoint(toggle);",
  "mp.game.ui.setHudComponentPosition(componentIndex, x, y);",
  "mp.game.ui.setFrontendActive(active);",
  "mp.game.ui.setHudColour(hudIndex, r, g, b, a);",
  "mp.game.ui.setCursorSprite(spriteId);",
  "mp.game.ui.setGpsFlashes(toggle);",
  "mp.game.ui.setGpsFlags(p0, p1);",
  "mp.game.ui.setHeadDisplayFlag(headDisplayId, sprite, toggle);",
  "mp.game.ui.setHeadDisplayWanted(headDisplayId, wantedlvl);",
  "mp.game.ui.setHeadDisplayString(headDisplayId, string);",
  "mp.game.ui.setColourOfNextTextComponent(hudColor)",
  "mp.game.ui.setBlipRoute(blip, enabled)",
  "mp.game.ui.setBlipRouteColour(blip, colour)",
  "mp.game.ui.setHelpMessageTextStyle(style, hudColor, alpha, direction, offset)",
  "mp.game.ui.setBlipNameFromTextFile(blip, gxtEntry)",
  "mp.game.ui.setBlipNameToPlayerName(blip, player)",
  "mp.game.ui.setBlipSprite(blip, spriteId)",
  "mp.game.ui.setBlipRotation(blip, rotation)",
  "mp.game.ui.setBlipSquaredRotation(blip, heading)",
  "mp.game.ui.setBlipFlashTimer(blip, duration)",
  "mp.game.ui.setBlipSecondaryColour(blip, r, g, b)",
  "mp.game.ui.setBlipHiddenOnLegend(blip, toggle)",
  "mp.game.ui.setBlipHighDetail(blip, toggle)",
  "mp.game.ui.setBlipFlashes(blip, toggle)",
  "mp.game.ui.setBlipFlashesAlternate(blip, toggle)",
  "mp.game.ui.setBlipScale(blip, scale)",
  "mp.game.ui.setBlipScaleTransformation(blip, xScale, yScale)",
  "mp.game.ui.setBlipPriority(blip, priority)",
  "mp.game.ui.setBlipShowCone(blip, toggle, hudColor?)",
  "mp.game.ui.setInteriorZoomLevelIncreased(toggle)",
  "mp.game.ui.setInteriorZoomLevelDecreased(toggle)",
  "mp.game.ui.setGpsCustomRouteRender(toggle, radarThickness, mapThickness)",
  "mp.game.ui.setGpsMultiRouteRender(toggle)",
  "mp.game.ui.setMainPlayerBlipColour(color)",
  "mp.game.ui.setMinimapFowRevealCoordinate(x, y, z)",
  "mp.game.ui.setMinimapGolfCourse(hole)",
  "mp.game.ui.setMinimapAltitudeIndicatorLevel(altitude, p1, p2)",
  "mp.game.ui.setHealthDisplayValues(health, capacity, wasAdded)",
  "mp.game.ui.setMaxHealthDisplay(maximumValue)",
  "mp.game.ui.setMaxArmourDisplay(maximumValue)",
  "mp.game.ui.setComponentPosition(id, x, y)",
  "mp.game.ui.setFloatingHelpTextScreenPosition(hudIndex, x, y)",
  "mp.game.ui.setFloatingHelpTextWorldPosition(hudIndex, x, y, z)",
  "mp.game.ui.setFloatingHelpTextToEntity(hudIndex, entity, offsetX, offsetY)",
  "mp.game.ui.setFloatingHelpTextStyle(helpIndex, style, color, alpha, direction, offset)",
  "mp.game.ui.setDirectorModeClearTriggeredFlag()",
  "mp.game.ui.setMinimapComponentValues(name, alignX, alignY, posX, posY, sizeX, sizeY)",
  "mp.game.ui.setRadarAsInteriorThisFrame(interior, x, y, z, p4);",
  "mp.game.ui.setNotificationTextEntry(type);",
  "mp.game.ui.setPauseMenuActive(toggle);",
  "mp.game.ui.setNotificationMessage(textureDict, textureName, flash, iconType, sender, subject);",
  "mp.game.ui.setMissionName(p0, name);",
  "mp.game.ui.setNewWaypoint(x, y);",
  "mp.game.ui.setNotificationFlashColor(red, green, blue, alpha);",
  "mp.game.ui.setMultiplayerHudCash(p0, p1);",
  "mp.game.ui.setPlayerCashChange(cash, bank);",
  "mp.game.ui.setNotificationMessageClanTag2(picName1, picName2, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9);",
  "mp.game.ui.setNotificationMessageClanTag(picName1, picName2, flash, iconType, sender, subject, duration, clanTag);",
  "mp.game.ui.setPlayerBlipPositionThisFrame(x, y);",
  "mp.game.ui.setMinimapVisible(toggle);",
  "mp.game.ui.setMinimapRevealed(toggle);",
  "mp.game.ui.setMouseCursorActiveThisFrame()",
  "mp.game.ui.setMouseCursorSprite(spriteId)",
  "mp.game.ui.setMouseCursorVisibleInMenus(toggle)",
  "mp.game.ui.setMinimapSonarEnabled(toggle)",
  "mp.game.ui.setRadarAsExteriorThisFrame()",
  "mp.game.ui.setMultiplayerBankCash()",
  "mp.game.ui.setMultiplayerCash(p0, p1)",
  "mp.game.ui.setRaceTrackRender(toggle)",
  "mp.game.ui.setMinimapInSpectatorMode(toggle, ped)",
  "mp.game.ui.setMissionName2(p0, name)",
  "mp.game.ui.setMinimapInPrologue(toggle)",
  "mp.game.ui.setMinimapHideFow(toggle)",
  "mp.game.ui.setMinimapGolfCourseOff()",
  "mp.game.ui.setMpGamerTagVisibility(gamerTagId, component, toggle, p3)",
  "mp.game.ui.setMpGamerTagEnabled(gamerTagId, toggle)",
  "mp.game.ui.setMpGamerTagIcons(gamerTagId, toggle)",
  "mp.game.ui.setMpGamerHealthBarDisplay(gamerTagId, toggle)",
  "mp.game.ui.setMpGamerHealthBarMax(gamerTagId, value, maximumValue)",
  "mp.game.ui.setMpGamerTagColour(gamerTagId, component, hudColorIndex)",
  "mp.game.ui.setMpGamerTagHealthBarColour(gamerTagId, hudColorIndex)",
  "mp.game.ui.setMpGamerTagAlpha(gamerTagId, component, alpha)",
  "mp.game.ui.setMpGamerTagWantedLevel(gamerTagId, wantedlvl)",
  "mp.game.ui.setMpGamerTagUnk(gamerTagId, p1)",
  "mp.game.ui.setMpGamerTagName(gamerTagId, string)",
  "mp.game.ui.setMpGamerTagBigText(gamerTagId, string)",
  "mp.game.ui.setPauseMenuPedLighting(state)",
  "mp.game.ui.setPauseMenuPedSleepState(state)",
  "mp.game.ui.setPedHasAiBlip(ped, hasCone)",
  "mp.game.ui.setPedHasAiBlipWithColor(ped, hasCone, color)",
  "mp.game.ui.setPedAiBlipGangId(ped, gangId)",
  "mp.game.ui.setPedAiBlipHasCone(ped, toggle)",
  "mp.game.ui.setPedAiBlipForcedOn(ped, toggle)",
  "mp.game.ui.setPedAiBlipNoticeRange(ped, range)",
  "mp.game.ui.setPedAiBlipSprite(ped, spriteId)",
  "mp.game.ui.setPlayerIsInDirectorMode(toggle)",
  "mp.game.ui.setWarningMessage3(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p6, p7, p8, p9);",
  "mp.game.ui.setTextScale(sizex, sizey);",
  "mp.game.ui.setTextProportional(p0);",
  "mp.game.ui.setTextDropshadow(distance, r, g, b, a);",
  "mp.game.ui.setTextEntry(text);",
  "mp.game.ui.setTextRenderId(renderId);",
  "mp.game.ui.setTextColour(red, green, blue, alpha);",
  "mp.game.ui.setTextEntry2(p0);",
  "mp.game.ui.setTextLeading(p0);",
  "mp.game.ui.setUseridsUihidden(p0, p1);",
  "mp.game.ui.setTextJustification(justifyType);",
  "mp.game.ui.setTextRightJustify(toggle);",
  "mp.game.ui.setRadarZoom(zoomLevel);",
  "mp.game.ui.showHudComponentThisFrame(componentIndex);",
  "mp.game.ui.setTextChatUnk(p0);",
  "mp.game.ui.setRadarBigmapEnabled(toggleBigMap, showFullMap);",
  "mp.game.ui.setTextEdge(p0, r, g, b, a);",
  "mp.game.ui.setTextGxtEntry(entry);",
  "mp.game.ui.setTextEntryForWidth(text);",
  "mp.game.ui.setTextWrap(start, end);",
  "mp.game.ui.setTextFont(fontType);",
  "mp.game.ui.setWarningMessage(entryLine1, instructionalKey, entryLine2, p3, p4, p5, p6, background);",
  "mp.game.ui.setTextComponentFormat(inputType);",
  "mp.game.ui.setTextCentre(align);",
  "mp.game.ui.setWidescreenFormat(p0);",
  "mp.game.ui.setRadarZoomLevelThisFrame(zoomLevel);",
  "mp.game.ui.setWarningMessage2(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p6, p7, background);",
  "mp.game.ui.setRadarZoomPrecise(zoom)",
  "mp.game.ui.setRadarZoomToBlip(blip, zoom)",
  "mp.game.ui.setRadarZoomToDistance(zoom)",
  "mp.game.ui.setScriptVariableColour(r, g, b, a)",
  "mp.game.ui.setScriptVariable2Colour(r, g, b, a)",
  "mp.game.ui.setTextDropshadow(distance, r, g, b, a)",
  "mp.game.ui.setTextOutline()",
  "mp.game.ui.showHeightOnBlip(blip, toggle)",
  "mp.game.ui.showHeadingIndicatorOnBlip(blip, toggle)",
  "mp.game.ui.showFriendIndicatorOnBlip(blip, toggle)",
  "mp.game.ui.showCrewIndicatorOnBlip(blip, toggle)",
  "mp.game.ui.setRadiusBlipEdge(blip, toggle)",
  "mp.game.ui.setWaypointOff()",
  "mp.game.ui.setToggleMinimapHeistIsland(toggle)",
  "mp.game.ui.setWeaponWheelTopSlot(weaponHash)",
  "mp.game.ui.showComponentThisFrame(id)",
  "mp.game.ui.setWarningMessageWithHeader(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p8, p9)",
  "mp.game.ui.setWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p6, p9, p10)",
  "mp.game.ui.setWarningMessageWithHeaderUnk(entryHeader, entryLine1, flags, entryLine2, p4, p5, showBg, p9, p10)",
  "mp.game.ui.setWarningMessageWithAlert(labelTitle, labelMessage, p2, p3, labelMessage2, p5, p6, p7, p8, p9, background, errorCode)",
  "mp.game.ui.setWarningMessageListRow(index, name, cash, rp, lvl, colour)",
  "mp.game.ui.setSocialClubTour(name)",
  "mp.game.ui.toggleStealthRadar(toggle);",
  "mp.game.unk1.startRecording(mode);",
  "mp.game.ui.showLoadingPrompt(busySpinnerType);",
  "mp.game.ui.showWeaponWheel(forcedShow);",
  "mp.game.unk3.networkShopBasketAddItem(p0, p1);",
  "mp.game.ui.thefeedOnlyShowTooltips(toggle)",
  "mp.game.ui.thefeedSetScriptedMenuHeight(pos)",
  "mp.game.ui.thefeedHideThisFrame()",
  "mp.game.ui.thefeedDisableLoadingScreenTips()",
  "mp.game.ui.thefeedDisplayLoadingScreenTips()",
  "mp.game.ui.thefeedFlushQueue()",
  "mp.game.ui.thefeedRemoveItem(notificationId)",
  "mp.game.ui.thefeedForceRenderOn()",
  "mp.game.ui.thefeedForceRenderOff()",
  "mp.game.ui.thefeedPause()",
  "mp.game.ui.thefeedResume()",
  "mp.game.ui.thefeedIsPaused()",
  "mp.game.ui.thefeedSpsExtendWidescreenOn()",
  "mp.game.ui.thefeedSpsExtendWidescreenOff()",
  "mp.game.ui.thefeedCommentTeleportPoolOn()",
  "mp.game.ui.thefeedCommentTeleportPoolOff()",
  "mp.game.ui.thefeedSetNextPostBackgroundColor(hudColorIndex)",
  "mp.game.ui.thefeedSetAnimpostfxColor(red, green, blue, alpha)",
  "mp.game.ui.thefeedAddTxdRef()",
  "mp.game.ui.thefeedSetFlushAnimpostfx(p0)",
  "mp.game.ui.thefeedClearFrozenPost()",
  "mp.game.ui.thefeedFreezeNextPost()",
  "mp.game.ui.thefeedResetAllParameters()",
  "mp.game.ui.thefeedSetAnimpostfxSound(toggle)",
  "mp.game.ui.thefeedSetAnimpostfxCount(count)",
  "mp.game.ui.triggerSonarBlip(posX, posY, posZ, radius, p4)",
  "mp.game.ui.showStartMissionInstructionalButton(p0)",
  "mp.game.ui.showNumberOnBlip(blip, number)",
  "mp.game.ui.showTickOnBlip(blip, toggle)",
  "mp.game.ui.showOutlineIndicatorOnBlip(blip, toggle)",
  "mp.game.ui.showSigninUi()",
  "mp.game.ui.weaponWheelIgnoreSelection()",
  "mp.game.ui.weaponWheelGetSelectedHash()",
  "mp.game.ui.weaponWheelGetSlotHash(weaponTypeIndex)",
  "mp.game.ui.weaponWheelIgnoreControlInput(toggle)",
  "mp.game.ui.startGpsCustomRoute(hudColor, displayOnFoot, followPlayer)",
  "mp.game.ui.startGpsMultiRoute(hudColor, routeFromPlayer, displayOnFoot)",
  "mp.game.ui.unlockMinimapAngle()",
  "mp.game.ui.unlockMinimapPosition()",
  "mp.game.ui.showScriptedComponentThisFrame(id)",
  "mp.game.ui.suppressFrontendRenderingThisFrame()",
  "mp.game.ui.takeControlOfFrontend()",
  "mp.game.unk3.networkShopSetTelemetryNonceSeed(p0);",
  "mp.game.unk3.networkShopGetPrice(hash, hash2, p2);",
  "mp.game.unk3.networkShopBasketStart(p0, p1, p2, p3);",
  "mp.game.unk3.networkShopSessionApplyReceivedData(p0);",
  "mp.game.unk.getBroadcastFinshedLosSound(p0);",
  "mp.game.unk3.networkShopBasketApplyServerData(p0, p1);",
  "mp.game.unk3.networkShopCheckoutStart(p0);",
  "mp.game.unk3.networkShopBeginService(p0, p1, p2, p3, p4, p5);",
  "mp.game.unk3.networkShopStartSession(p0);",
  "mp.game.unk3.networkShopEndService(p0);",
  "mp.game.vehicle.addVehicleStuckCheckWithWarp(p0, p1, p2, p3, p4, p5, p6);",
  "vehicle.areAllWindowsIntact();",
  "vehicle.attachToCargobob(cargobob, p2, x, y, z);",
  "vehicle.addUpsidedownCheck();",
  "mp.game.vehicle.addPhoneExplosiveDevice(vehicle)",
  "mp.game.vehicle.attachOnToTrailer(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions)",
  "mp.game.vehicle.areHeliStubWingsDeployed(vehicle)",
  "mp.game.vehicle.attachEntityToCargobob(cargoHandle, vehicleHandle, boneIndex, x, y, z)",
  "mp.game.vehicle.arePlaneWingsIntact(plane)",
  "mp.game.vehicle.arePlanePropellersIntact(plane)",
  "mp.game.vehicle.addCombatAngledAvoidanceArea(startX, startY, startZ, endX, endY, endZ, width)",
  "mp.game.vehicle.areBombBayDoorsOpen(aircraft)",
  "mp.game.vehicle.addRoadNodeSpeedZone(x, y, z, radius, speed, p5)",
  "mp.game.vehicle.areAnySeatsFree(vehicle)",
  "mp.game.vehicle.addStuckCheckWithWarp(vehicle, minMoveDist, checkFreq, wrapIfstuckFlag, wrapIfUpsideDown, wrapIfInWater, wrapMethod)",
  "mp.game.vehicle.addModelOverride(source, target)",
  "vehicle.destroy()",
  "mp.game.vehicle.createVehicle(modelHash, x, y, z, heading, networkHandle, vehiclehandle);",
  "mp.game.vehicle.createMissionTrain(variation, x, y, z, direction);",
  "mp.game.vehicle.createScriptVehicleGenerator(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);",
  "vehicle.detachFromCargobob(cargobob);",
  "vehicle.disablePlaneAileron(p1, p2);",
  "vehicle.attachToTowTruck(vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ);",
  "vehicle.canShuffleSeat(p1);",
  "vehicle.closeBombBayDoors();",
  "vehicle.attachToTrailer(trailer, radius);",
  "vehicle.clearCustomPrimaryColour();",
  "vehicle.clearCustomSecondaryColour();",
  "vehicle.detachWindscreen();",
  "vehicle.detachFromTrailer();",
  "vehicle.cargobobMagnetGrab(toggle);",
  "vehicle.detachFromAnyCargobob();",
  "vehicle.detachFromTowTruck(vehicle);",
  "vehicle.detachFromAnyTowTruck();",
  "vehicle.setSirenSound(toggle);",
  "vehicle.disableImpactExplosionActivation(toggle);",
  "mp.game.vehicle.create(modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7)",
  "mp.game.vehicle.createScriptGenerator(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16)",
  "mp.game.vehicle.clearPhoneExplosiveDevice()",
  "mp.game.vehicle.detonatePhoneExplosiveDevice()",
  "mp.game.vehicle.canAnchorBoatHere(vehicle)",
  "mp.game.vehicle.canAnchorBoatHere2(vehicle)",
  "mp.game.vehicle.bringToHalt(vehicle, distance, duration, unknown)",
  "mp.game.vehicle.detachContainerFromHandlerFrame(vehicle)",
  "mp.game.vehicle.disableNeonLights(vehicle, toggle)",
  "mp.game.vehicle.disableIndividualPlanePropeller(handle, index)",
  "mp.game.vehicle.clearRouteHistory(vehicle)",
  "mp.game.vehicle.createPickUpRopeForCargobob(cargobob, state)",
  "mp.game.vehicle.detachEntityFromCargobob(cargobob, entity)",
  "mp.game.vehicle.copyDamages(sourceVehicle, targetVehicle)",
  "mp.game.vehicle.clearLastDriven()",
  "mp.game.vehicle.controlLandingGear(vehicle, state)",
  "mp.game.vehicle.clearModelOverrides()",
  "mp.game.vehicle.doesVehicleExistWithDecorator(decorator);",
  "mp.game.vehicle.disableVehicleWeapon(disabled, weaponHash, vehicle, owner);",
  "mp.game.vehicle.doesScriptVehicleGeneratorExist(vehicleGenerator);",
  "mp.game.vehicle.displayDistantVehicles(toggle);",
  "vehicle.doesExtraExist(extraId);",
  "vehicle.doesHaveWeapons();",
  "vehicle.getBoatAnchor();",
  "vehicle.getClass();",
  "vehicle.doesHaveStuckVehicleCheck();",
  "vehicle.getAcceleration();",
  "vehicle.fixWindow(index);",
  "vehicle.explodeInCutscene(p1);",
  "vehicle.enableCargobobHook(state);",
  "vehicle.getAttachedToCargobob();",
  "vehicle.doesHaveRoof();",
  "vehicle.getBodyHealth2();",
  "vehicle.getCargobobHookPosition();",
  "vehicle.ejectJb700Roof(x, y, z);",
  "vehicle.getCauseOfDestruction();",
  "vehicle.getAttachedToTowTruck();",
  "vehicle.getBodyHealth();",
  "vehicle.doesAllowRappel();",
  "vehicle.forceSubmarineSurfaceMode(toggle);",
  "mp.game.vehicle.doesScriptGeneratorExist(vehicleGenerator)",
  "mp.game.vehicle.findCarryingThisEntity(entity)",
  "mp.game.vehicle.findRandomPointInSpace(ped)",
  "mp.game.vehicle.getBombCount(vehicle)",
  "mp.game.vehicle.disableWorldCollision(vehicle)",
  "mp.game.vehicle.getAllS()",
  "mp.game.vehicle.getCanActivateParachute(vehicle)",
  "mp.game.vehicle.getCanJump(vehicle)",
  "mp.game.vehicle.doesExistWithDecorator(decorator)",
  "mp.game.vehicle.disableWeapon(disabled, weaponHash, vehicle, owner)",
  "mp.game.vehicle.doesCargobobHavePickupMagnet(cargobob)",
  "mp.game.vehicle.doesCargobobHavePickUpRope(cargobob)",
  "mp.game.vehicle.getBoatBoomPositionRatio(vehicle)",
  "mp.game.vehicle.getBoatBoomPositionRatio3(vehicle, p1)",
  "mp.game.vehicle.getBoatBoomPositionRatio2(vehicle, p1)",
  "mp.game.vehicle.doesHaveSearchlight(vehicle)",
  "mp.game.vehicle.getClassEstimatedMaxSpeed(vehicleClass)",
  "mp.game.vehicle.disableTurretMovementThisFrame(vehicle)",
  "mp.game.vehicle.doesHaveLandingGear(vehicle)",
  "mp.game.vehicle.doesTyreExist(vehicle, tyreIndex)",
  "mp.game.vehicle.forcePlaybackRecordedUpdate(vehicle, p1)",
  "mp.game.vehicle.getCurrentPlaybackForVehicle(p0);",
  "mp.game.vehicle.getClosestVehicle(x, y, z, radius, modelHash, flags);",
  "mp.game.vehicle.getDisplayNameFromVehicleModel(modelHash);",
  "vehicle.getDoorLockStatus();",
  "vehicle.getExtraColours(pearlescentColor, wheelColor);",
  "vehicle.getDeformationAtPos(offsetX, offsetY, offsetZ);",
  "vehicle.getColourCombination();",
  "vehicle.getCustomSecondaryColour(r, g, b);",
  "vehicle.getDirtLevel();",
  "vehicle.getColours(colorPrimary, colorSecondary);",
  "vehicle.getHeliEngineHealth();",
  "vehicle.getCustomPrimaryColour(r, g, b);",
  "vehicle.getHeliMainRotorHealth();",
  "vehicle.getDoorsLockedForPlayer(player);",
  "vehicle.getDoorAngleRatio(door);",
  "Array vehicle.getColorRGB(int slot);",
  "vehicle.getExtra(extraId);",
  "vehicle.getEntryPositionOfDoor(doorindex: number);",
  "mp.game.vehicle.getDriftTyresEnabled(handle);",
  "mp.game.vehicle.getEnveffScale(vehicle)",
  "mp.game.vehicle.getDoesHaveTombstone(vehicle)",
  "mp.game.vehicle.getCountermeasureCount(vehicle)",
  "mp.game.vehicle.getHasParachute(vehicle)",
  "mp.game.vehicle.getHasRetractableWheels(vehicle)",
  "mp.game.vehicle.getHasRocketBoost(vehicle)",
  "mp.game.vehicle.getHasKers(vehicle)",
  "mp.game.vehicle.getClassFromName(modelHash)",
  "mp.game.vehicle.getEntityAttachedToCargobob(cargobob)",
  "mp.game.vehicle.getCurrentSlipstreamDraft(vehicle)",
  "mp.game.vehicle.getClassMaxBraking(vehicleClass)",
  "mp.game.vehicle.getClassMaxAcceleration(vehicleClass)",
  "mp.game.vehicle.getClassMaxAgility(vehicleClass)",
  "mp.game.vehicle.getClassMaxTraction(vehicleClass)",
  "mp.game.vehicle.getEstimatedMaxSpeed(vehicle)",
  "mp.game.vehicle.getFlightNozzlePosition(plane)",
  "mp.game.vehicle.getEntityAttachedToTowTruck(towTruck)",
  "mp.game.vehicle.getHeliTailBoomHealth(vehicle)",
  "mp.game.vehicle.getDisplayNameFromModel(modelHash)",
  "mp.game.vehicle.getDashboardColor(vehicle)",
  "mp.game.vehicle.getDoorDestroyType(vehicle, doorIndex)",
  "mp.game.vehicle.getClosest(x, y, z, radius, modelHash, flags)",
  "mp.game.vehicle.getCurrentPlaybackFor(vehicle)",
  "vehicle.getDefaultHandling(type);",
  "vehicle.getHandling(type);",
  "vehicle.getLayoutHash();",
  "vehicle.getLivery();",
  "vehicle.getModColor2TextLabel();",
  "vehicle.getModSlotName(modType);",
  "vehicle.getIsLeftHeadlightDamaged();",
  "vehicle.getModKit();",
  "vehicle.getModColor2(paintType, color);",
  "vehicle.getLastPedInSeat(seatIndex);",
  "vehicle.getLiveryCount();",
  "vehicle.getModTextLabel(modType, modIndex);",
  "vehicle.getModModifierValue(modType, modIndex);",
  "vehicle.getIsSecondaryColourCustom();",
  "vehicle.getLandingGearState();",
  "vehicle.getMaxTraction();",
  "vehicle.getMaxNumberOfPassengers();",
  "vehicle.getIsRightHeadlightDamaged();",
  "vehicle.getMaxBraking();",
  "vehicle.getIsEngineRunning();",
  "vehicle.getHeliTailRotorHealth();",
  "vehicle.getModVariation(modType);",
  "vehicle.getModColor1TextLabel(p1);",
  "vehicle.getLiveryName(liveryIndex);",
  "vehicle.getModColor1(paintType, color, pearlescentColor);",
  "vehicle.getIsPrimaryColourCustom();",
  "vehicle.getModKitType();",
  "vehicle.getIsSubmarineTransformed();",
  "mp.game.vehicle.getHomingLockonState(vehicle)",
  "mp.game.vehicle.getIsEmpDisabled(vehicle)",
  "mp.game.vehicle.getLastRammed(vehicle)",
  "mp.game.vehicle.getIsShuntBoostActive(vehicle)",
  "mp.game.vehicle.getIsWheelsLoweredStateActive(vehicle)",
  "mp.game.vehicle.getIsDoorValid(vehicle, doorIndex)",
  "mp.game.vehicle.getHydraulicWheelValue(handle, wheelIndex)",
  "mp.game.vehicle.getLockOnTarget(vehicle)",
  "mp.game.vehicle.getLastDriven()",
  "mp.game.vehicle.getModIdentifierHash(vehicle, modType, modIndex)",
  "mp.game.vehicle.getModColor2Name(vehicle)",
  "mp.game.vehicle.getModColor1Name(vehicle, spec)",
  "mp.game.vehicle.getModelMaxKnots(modelHash)",
  "mp.game.vehicle.getModelEstimatedAgility(modelHash)",
  "mp.game.vehicle.getModelAcceleration(modelHash)",
  "mp.game.vehicle.getModelMaxTraction(modelHash)",
  "mp.game.vehicle.getModelMaxBrakingMaxMods(modelHash)",
  "mp.game.vehicle.getModelMaxBraking(modelHash)",
  "mp.game.vehicle.getModelEstimatedMaxSpeed(modelHash)",
  "mp.game.vehicle.getMakeNameFromModel(modelHash)",
  "mp.game.vehicle.getInteriorColor(vehicle)",
  "mp.game.vehicle.getModelMonetaryValue(vehicleModel)",
  "mp.game.vehicle.getRandomVehicleModelInMemory(p0, modelHash, p2);",
  "mp.game.vehicle.getRotationOfVehicleRecordingAtTime(p0, p1, p2);",
  "mp.game.vehicle.getPositionOfVehicleRecordingAtTime(p0, p1, p2);",
  "mp.game.vehicle.getRandomVehicleBackBumperInSphere(p0, p1, p2, p3, p4, p5, p6);",
  "mp.game.vehicle.getRandomVehicleFrontBumperInSphere(p0, p1, p2, p3, p4, p5, p6);",
  "mp.game.vehicle.getPositionInRecording(p0);",
  "mp.game.vehicle.getRandomVehicleInSphere(x, y, z, radius, modelHash, flags);",
  "mp.game.vehicle.getTimePositionInRecording(p0);",
  "mp.game.vehicle.getNumModColors(paintType, p1);",
  "vehicle.getPedUsingDoor(doorIndex);",
  "vehicle.getNumberOfPassengers();",
  "vehicle.getNumModKits();",
  "vehicle.getNumberOfColours();",
  "vehicle.getSuspensionHeight();",
  "vehicle.getNumberPlateText();",
  "vehicle.getPetrolTankHealth();",
  "vehicle.getOwner(entity);",
  "vehicle.getPlateType();",
  "vehicle.getPaintFade();",
  "vehicle.getPedInSeat(index);",
  "vehicle.getNumMods(modType);",
  "vehicle.getNumberPlateTextIndex();",
  "vehicle.getOccupant(seatIndex);",
  "vehicle.getOccupants();",
  "vehicle.getNeonColor()",
  "vehicle.getNumberOfDoors();",
  "mp.game.vehicle.getModelNumberOfSeats(modelHash)",
  "mp.game.vehicle.getSubmarineIsBelowFirstCrushDepth(submarine)",
  "mp.game.vehicle.getSubmarineCrushDepthWarningState(submarine)",
  "mp.game.vehicle.getNumberOfNumberPlates()",
  "mp.game.vehicle.getSuspensionBounds(vehicle)",
  "mp.game.vehicle.getNumberOfBrokenBones(vehicle)",
  "mp.game.vehicle.getNumberOfBrokenOffBones(vehicle)",
  "mp.game.vehicle.getNumWindowTints()",
  "mp.game.vehicle.getModelMoveResistance(modelHash)",
  "mp.game.vehicle.getRoofLiveryCount(vehicle)",
  "mp.game.vehicle.getRoofLivery(vehicle)",
  "mp.game.vehicle.getRandomModelInMemory(normalCars)",
  "mp.game.vehicle.getRandomBackBumperInSphere(x, y, z, radius, model, searchFlag, ignoreVehicle)",
  "mp.game.vehicle.getRandomFrontBumperInSphere(x, y, z, radius, model, searchFlag, ignoreVehicle)",
  "mp.game.vehicle.getRandomInSphere(x, y, z, radius, modelHash, flags)",
  "mp.game.vehicle.getRotationOfRecordingAtTime(recording, time, script)",
  "mp.game.vehicle.getRotationOfRecordingIdAtTime(id, time)",
  "mp.game.vehicle.getPositionOfRecordingAtTime(recording, time, script)",
  "mp.game.vehicle.getPositionOfRecordingIdAtTime(id, time)",
  "mp.game.vehicle.getRecordingId(recording, script)",
  "vehicle.getRimRadius(wheelIndex);",
  "mp.game.vehicle.getVehicleModelAcceleration(modelHash);",
  "mp.game.vehicle.getVehicleClassFromName(modelHash);",
  "mp.game.vehicle.getTotalDurationOfVehicleRecording(p0, p1);",
  "mp.game.vehicle.hasVehicleAssetLoaded(vehicleAsset);",
  "mp.game.vehicle.getVehicleClassMaxAgility(p0);",
  "mp.game.vehicle.getVehicleClassMaxBraking(p0);",
  "mp.game.vehicle.getVehicleModelMaxSpeed(modelHash);",
  "mp.game.vehicle.getVehicleModelMaxTraction(modelHash);",
  "mp.game.vehicle.getTotalDurationOfVehicleRecordingId(p0);",
  "mp.game.vehicle.getVehicleClassMaxTraction(p0);",
  "mp.game.vehicle.getVehicleClassMaxAcceleration(p0);",
  "mp.game.vehicle.getVehicleModelMaxNumberOfPassengers(modelHash);",
  "mp.game.vehicle.hasPreloadModsFinished(p0);",
  "mp.game.vehicle.getVehicleRecordingId(p0, p1);",
  "mp.game.vehicle.hasVehicleRecordingBeenLoaded(p0, p1);",
  "mp.game.vehicle.getVehicleModelMaxBraking(modelHash);",
  "vehicle.getTrainCarriage(carriage);",
  "vehicle.getWindowTint();",
  "vehicle.isAlarmActivated();",
  "vehicle.isAConvertible(extraRoofCheck)",
  "vehicle.getTyresCanBurst();",
  "vehicle.getWheelType();",
  "vehicle.getTyreSmokeColor(r, g, b);",
  "mp.game.vehicle.hasPhoneExplosiveDevice()",
  "mp.game.vehicle.getTyreWearMultiplier(vehicle, wheelIndex)",
  "mp.game.vehicle.getTyreHealth(vehicle, wheelIndex)",
  "mp.game.vehicle.hideTombstone(vehicle, toggle)",
  "mp.game.vehicle.getWeaponCapacity(vehicle, weaponIndex)",
  "mp.game.vehicle.getVehicleClass(vehicle)",
  "mp.game.vehicle.getVehicleMod(vehicle, modType)",
  "mp.game.vehicle.haveModsStreamedIn(vehicle)",
  "mp.game.vehicle.hasFilledPopulation()",
  "mp.game.vehicle.instantlyFillPopulation()",
  "mp.game.vehicle.hasAssetLoaded(vehicleAsset)",
  "mp.game.vehicle.getXenonLightsColor(vehicle)",
  "mp.game.vehicle.getTotalDurationOfRecording(recording, script)",
  "mp.game.vehicle.getTotalDurationOfRecordingId(id)",
  "mp.game.vehicle.hasRecordingBeenLoaded(recording, script)",
  "vehicle.getTyreRadius(wheelIndex);",
  "vehicle.getTyreWidth(wheelIndex);",
  "vehicle.getWheelCamber(wheelIndex);",
  "vehicle.getWheelHeight(wheelIndex);",
  "vehicle.getWheelRadius();",
  "vehicle.getWheelTrackWidth(wheelIndex);",
  "vehicle.getWheelWidth();",
  "mp.game.vehicle.isCopVehicleInArea3d(x1, x2, y1, y2, z1, z2);",
  "mp.game.vehicle.isPlaybackGoingOnForVehicle(p0);",
  "mp.game.vehicle.isPlaybackUsingAiGoingOnForVehicle(p0);",
  "mp.game.vehicle.isAnyVehicleNearPoint(x, y, z, radius);",
  "vehicle.isInBurnout();",
  "vehicle.isAttachedToTowTruck(vehicle);",
  "vehicle.isCargobobHookActive();",
  "vehicle.isHighDetail();",
  "vehicle.isSeatFree(seatIndex);",
  "vehicle.isAnySeatEmpty();",
  "vehicle.isDoorFullyOpen(doorIndex);",
  "vehicle.isModel(modelHash);",
  "vehicle.isDriveable(p1);",
  "vehicle.isSirenOn();",
  "vehicle.isCargobobMagnetActive();",
  "vehicle.isNeonLightEnabled(index);",
  "vehicle.isBig();",
  "vehicle.isOnAllWheels();",
  "vehicle.isSirenSoundOn();",
  "vehicle.isDoorDamaged(doorID);",
  "vehicle.isHeliPartBroken(mainRotor, tailRotor, tail);",
  "vehicle.isDamaged();",
  "vehicle.isSearchlightOn();",
  "vehicle.isExtraTurnedOn(extraId);",
  "vehicle.isAttachedToCargobob(vehicleAttached);",
  "vehicle.isAttachedToTrailer();",
  "vehicle.isAnyNearPoint(x, y, z, radius);",
  "vehicle.isEngineOnFire();",
  "vehicle.isSirenAudioOn();",
  "mp.game.vehicle.isSeatWarpOnly(vehicle, seatIndex)",
  "mp.game.vehicle.isInGarageArea(garageName, vehicle)",
  "mp.game.vehicle.isBoatAnchoredAndFrozen(vehicle)",
  "mp.game.vehicle.isBeingHalted(vehicle)",
  "mp.game.vehicle.isEntityAttachedToHandlerFrame(vehicle, entity)",
  "mp.game.vehicle.isAnyEntityAttachedToHandlerFrame(vehicle)",
  "mp.game.vehicle.isHandlerFrameAboveContainer(vehicle, entity)",
  "mp.game.vehicle.isHeliLandingAreaBlocked(vehicle)",
  "mp.game.vehicle.isRocketBoostActive(vehicle)",
  "mp.game.vehicle.isPedExclusiveDriverOf(ped, vehicle)",
  "mp.game.vehicle.isPlaneLandingGearIntact(plane)",
  "mp.game.vehicle.isSprayable(vehicle)",
  "mp.game.vehicle.isSlipstreamLeader(vehicle)",
  "mp.game.vehicle.isAnyPedRappellingFromHeli(vehicle)",
  "mp.game.vehicle.isSeatAccessible(ped, vehicle, seatIndex, side, onEnter)",
  "mp.game.vehicle.isCopInArea3D(x1, x2, y1, y2, z1, z2)",
  "mp.game.vehicle.isBumperBouncing(vehicle, frontBumper)",
  "mp.game.vehicle.isMissionTrain(vehicleHandle)",
  "mp.game.vehicle.isPlaybackUsingAiGoingOnFor(vehicle)",
  "mp.game.vehicle.isPlaybackGoingOnFor(vehicle)",
  "mp.game.vehicle.isThisModelAnEmergencyBoat(model);",
  "mp.game.vehicle.isVehicleInGarageArea(garageName, vehicle);",
  "mp.game.vehicle.isThisModelABicycle(model);",
  "mp.game.vehicle.isThisModelAHeli(model);",
  "mp.game.vehicle.preloadVehicleMod(p0, p1, p2);",
  "mp.game.vehicle.isThisModelACar(model);",
  "mp.game.vehicle.pausePlaybackRecordedVehicle(p0);",
  "mp.game.vehicle.isThisModelABike(model);",
  "mp.game.vehicle.isThisModelATrain(model);",
  "mp.game.vehicle.isThisModelABoat(model);",
  "mp.game.vehicle.isThisModelAQuadbike(model);",
  "mp.game.vehicle.isThisModelAPlane(model);",
  "vehicle.isStoppedAtTrafficLights();",
  "vehicle.isWindowIntact(windowIndex);",
  "vehicle.isStolen();",
  "vehicle.isStopped();",
  "vehicle.isStuckTimerUp(p1, p2);",
  "vehicle.isTaxiLightOn();",
  "vehicle.isToggleModOn(modType);",
  "vehicle.openBombBayDoors();",
  "vehicle.isVisible();",
  "vehicle.isStuckOnRoof();",
  "vehicle.jitter(p1, yaw, pitch, roll);",
  "mp.game.vehicle.isTurretSeat(vehicle, seatIndex)",
  "mp.game.vehicle.popOutWindscreen(vehicle)",
  "mp.game.vehicle.lowerRetractableWheels(vehicle)",
  "mp.game.vehicle.raiseRetractableWheels(vehicle)",
  "mp.game.vehicle.isWeaponDisabled(weaponHash, vehicle, owner)",
  "mp.game.vehicle.modifyTopSpeed(vehicle, value)",
  "mp.game.vehicle.overrideOverheatHealth(handle, value)",
  "mp.game.vehicle.preloadMod(vehicle, modType, modIndex)",
  "mp.game.vehicle.isThisModelAnAmphibiousQuadbike(model)",
  "mp.game.vehicle.isThisModelAnAmphibiousCar(model)",
  "mp.game.vehicle.isThisModelAJetski(model)",
  "mp.game.vehicle.pausePlaybackRecorded(vehicle)",
  "mp.game.vehicle.networkUseHighPrecisionBlending(vehicle, enable)",
  "vehicle.isStreamedFor(player);",
  "vehicle.repair()",
  "mp.game.vehicle.removeVehicleAsset(vehicleAsset);",
  "mp.game.vehicle.removeVehicleRecording(p0, p1);",
  "mp.game.vehicle.requestVehicleAsset(vehicleHash, vehicleAsset);",
  "mp.game.vehicle.removeVehiclesFromGeneratorsInArea(x1, y1, z1, x2, y2, z2, unk);",
  "mp.game.vehicle.setAllLowPriorityVehicleGeneratorsActive(active);",
  "mp.game.vehicle.removeVehicleStuckCheck(p0);",
  "mp.game.vehicle.requestVehicleRecording(p0, p1);",
  "mp.game.vehicle.setAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, p6, p7);",
  "vehicle.removeHighDetailModel();",
  "vehicle.resetWheels(toggle);",
  "vehicle.releasePreloadMods();",
  "vehicle.setAllowNoPassengersLockon(p1);",
  "vehicle.rollUpWindow(windowIndex);",
  "vehicle.setBoatAnchor(toggle);",
  "vehicle.rollDownWindow(windowIndex);",
  "vehicle.rollDownWindows();",
  "vehicle.setAutomaticallyAttaches(p1, p2);",
  "vehicle.removeMod(modType);",
  "vehicle.retractCargobobHook();",
  "vehicle.setBikeLeanAngle(x, y);",
  "vehicle.requestHighDetailModel();",
  "vehicle.removeWindow(windowIndex);",
  "vehicle.removeUpsidedownCheck();",
  "vehicle.setAlarm(state);",
  "vehicle.resetStuckTimer(nullAttributes);",
  "vehicle.setAllsSpawn(p1, p2, p3);",
  "mp.game.vehicle.setAllGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, p6, p7)",
  "mp.game.vehicle.setAllGeneratorsActive()",
  "mp.game.vehicle.setAllVehicleGeneratorsActive()",
  "mp.game.vehicle.setAllLowPriorityGeneratorsActive(active)",
  "mp.game.vehicle.setAmbientRangeMultiplierThisFrame(value)",
  "mp.game.vehicle.removeStuckCheck(vehicle)",
  "mp.game.vehicle.requestDashboardScaleformMovie(vehicle)",
  "mp.game.vehicle.setActiveForPedNavigation(vehicle, toggle)",
  "mp.game.vehicle.removePickUpRopeForCargobob(cargobob)",
  "mp.game.vehicle.removeShadowEffect(vehicle)",
  "mp.game.vehicle.setActiveDuringPlayback(vehicle, forceActive)",
  "mp.game.vehicle.setBikeOnStand(vehicle, x, y)",
  "mp.game.vehicle.setBoatBoomPositionRatio(vehicle, ratio)",
  "mp.game.vehicle.removeCombatAvoidanceArea(index)",
  "mp.game.vehicle.removeRoadNodeSpeedZone(speedzone)",
  "mp.game.vehicle.removeAsset(vehicleAsset)",
  "mp.game.vehicle.requestAsset(vehicleHash, vehicleAsset)",
  "mp.game.vehicle.removeRecording(recording, script)",
  "mp.game.vehicle.requestRecording(recording, script)",
  "mp.game.vehicle.removeModelOverride(source)",
  "mp.game.vehicle.setCargobobHookPosition(p0, p1, p2, p3);",
  "vehicle.setCanBeUsedByFleeingPeds(toggle);",
  "vehicle.setColourCombination(numCombos);",
  "vehicle.setCanBeTargetted(state);",
  "vehicle.setCanBeVisiblyDamaged(state);",
  "vehicle.setColours(colorPrimary, colorSecondary);",
  "vehicle.setCanRespray(state);",
  "vehicle.setCanBreak(toggle);",
  "vehicle.setBrakeLights(toggle);",
  "vehicle.setCeilingHeight(p1);",
  "vehicle.setBodyHealth(value);",
  "vehicle.setConvertibleRoof(p1);",
  "vehicle.setBurnout(toggle);",
  "void vehicle.setColorRGB(int r1, int g1, int b1, int r2, int g2, int b2);",
  "vehicle.setColor(primaryColor, secondaryColor);",
  "mp.game.vehicle.setCanBeLockedOn(vehicle, canBeLockedOn, unk)",
  "mp.game.vehicle.setBoatFrozenWhenAnchored(vehicle, toggle)",
  "mp.game.vehicle.setBoatMovementResistance(vehicle, value)",
  "mp.game.vehicle.setBoatSinksWhenWrecked(vehicle, toggle)",
  "mp.game.vehicle.setBoatIsSinking(boat)",
  "mp.game.vehicle.setBoatDisableAvoidance(vehicle, p1)",
  "mp.game.vehicle.setCarBootOpen(vehicle)",
  "mp.game.vehicle.setCountermeasureCount(vehicle, counterMeasureCount)",
  "mp.game.vehicle.setBombCount(vehicle, bombCount)",
  "mp.game.vehicle.setCargobobHookCanAttach(vehicle, toggle)",
  "mp.game.vehicle.setControlsInverted(vehicle, state)",
  "mp.game.vehicle.setCamberedWheelsDisabled(vehicle, canUse)",
  "mp.game.vehicle.setCarHighSpeedBumpSeverityMultiplier(multiplier)",
  "mp.game.vehicle.setCargobobPickupMagnetReducedStrength(cargoBob, magnetStrength)",
  "mp.game.vehicle.setCargobobPickupMagnetFalloff(vehicle, p1)",
  "mp.game.vehicle.setCargobobPickupMagnetPullStrength(cargobob, p1)",
  "mp.game.vehicle.setCargobobPickupMagnetPullRopeLength(cargobob, p1)",
  "mp.game.vehicle.setCargobobPickupMagnetReducedFalloff(cargobob, magnetFalloff)",
  "mp.game.vehicle.setCargobobPickupMagnetEffectRadius(cargobob, radius)",
  "mp.game.vehicle.setCargobobPickupMagnetStrength(cargobob, strength)",
  "mp.game.vehicle.setCargobobPickupMagnetActive(cargobob, isActive)",
  "mp.game.vehicle.setCargobobPickupRopeType(cargoBob, type)",
  "mp.game.vehicle.setCargobobPickupRopeDampingMultiplier(cargoBob, dampingMultp)",
  "mp.game.vehicle.setCargobobHookCanDetach(cargobob, toggle)",
  "mp.game.vehicle.setCanDeformWheels(vehicle, toggle)",
  "mp.game.vehicle.setCanSaveInGarage(vehicle, toggle)",
  "mp.game.vehicle.setCheatPowerIncrease(vehicle, value)",
  "mp.game.vehicle.setConvertibleRoofLatchState(vehicle, state)",
  "mp.game.vehicle.setBrake(vehicle, toggle)",
  "mp.game.vehicle.setBulldozerArmPosition(vehicle, position, p2)",
  "mp.game.vehicle.setCanLeakPetrol(vehicle, toggle)",
  "mp.game.vehicle.setCanLeakOil(vehicle, toggle)",
  "mp.game.vehicle.setCanEngineOperateOnFire(vehicle, toggle)",
  "vehicle.setCreatesMoneyPickupsWhenExploded(toggle);",
  "vehicle.setEngineOn(toggle, instantly, otherwise);",
  "vehicle.setDoorBreakable(doorIndex, isBreakable);",
  "vehicle.setCustomSecondaryColour(r, g, b);",
  "vehicle.setDisablePetrolTankDamage(toggle);",
  "vehicle.setEngineHealth(health);",
  "vehicle.setDisablePetrolTankFires(toggle);",
  "vehicle.setDoorsLockedForPlayer(player, toggle);",
  "vehicle.setCustomPrimaryColour(r, g, b);",
  "vehicle.setExplodesOnHighExplosionDamage(toggle);",
  "vehicle.setDoorsShut(closeInstantly);",
  "vehicle.setDirtLevel(dirtLevel);",
  "vehicle.setEnginePowerMultiplier(value);",
  "vehicle.setDeformationFixed();",
  "vehicle.setEngineCanDegrade(toggle);",
  "vehicle.setDamage(xOffset, yOffset, zOffset, damage, radius, focusOnModel);",
  "vehicle.setDoorsLockedForAllPlayers(toggle);",
  "vehicle.setDoorLatched(doorIndex, p2, p3, p4);",
  "vehicle.setExclusiveDriver(ped, p2);",
  "vehicle.setDoorsLocked(doorLockStatus);",
  "vehicle.setDoorsLockedForTeam(team, toggle);",
  "vehicle.setDoorBroken(doorIndex, createDoorObject);",
  "vehicle.setDoorControl(doorIndex, p2, angle);",
  "mp.game.vehicle.setExperimentalAttachmentSyncEnabled(enable);",
  "mp.game.vehicle.setExperimentalHornSyncEnabled(enable);",
  "mp.game.vehicle.setDriftTyresEnabled(handle, enable);",
  "mp.game.vehicle.setDensityMultiplierThisFrame(multiplier)",
  "mp.game.vehicle.setDisableRandomTrainsThisFrame(toggle)",
  "mp.game.vehicle.setDoorsLockedForNonScriptPlayers(vehicle, toggle)",
  "mp.game.vehicle.setDoorsLockedForUnk(vehicle, toggle)",
  "mp.game.vehicle.setEnveffScale(vehicle, fade)",
  "mp.game.vehicle.setDisableUnk2(toggle)",
  "mp.game.vehicle.setDisableUnk(toggle)",
  "mp.game.vehicle.setDisableTurretMovementThisFrame(vehicle, turretId)",
  "mp.game.vehicle.setDeployHeliStubWings(vehicle, deploy, p2)",
  "mp.game.vehicle.setDamageModifier(vehicle, p1)",
  "mp.game.vehicle.setDisableSuperdummyMode(vehicle, p1)",
  "mp.game.vehicle.setDistantCarsEnabled(toggle)",
  "mp.game.vehicle.setDisableWindowCollisions(vehicle, toggle)",
  "mp.game.vehicle.setDropsMoneyWhenBlownUp(vehicle, toggle)",
  "mp.game.vehicle.setEnableSlipstreaming(toggle)",
  "mp.game.vehicle.setDisableFlightNozzlePosition(vehicle, toggle)",
  "mp.game.vehicle.setDisableTowing(vehicle, toggle)",
  "mp.game.vehicle.setDisablePretendOccupants(vehicle, toggle)",
  "mp.game.vehicle.setDisableEngineFires(vehicle, toggle)",
  "mp.game.vehicle.setDashboardColor(vehicle, color)",
  "mp.game.vehicle.setDoorCanBreak(vehicle, doorIndex, isBreakable)",
  "mp.game.vehicle.setGarbageTrucks(toggle);",
  "mp.game.vehicle.setFarDrawVehicles(toggle);",
  "vehicle.setFixed();",
  "vehicle.setFrictionOverride(friction);",
  "vehicle.setExtraColours(pearlescentColor, wheelColor);",
  "vehicle.setHalt(distance, killEngine, unknown);",
  "vehicle.setHasBeenOwnedByPlayer(owned);",
  "vehicle.setIsConsideredByPlayer(toggle);",
  "vehicle.setIsStolen(isStolen);",
  "vehicle.setHandbrake(toggle);",
  "vehicle.setHelicopterRollPitchYawMult(multiplier);",
  "vehicle.setExtra(extraId, disabled);",
  "vehicle.setGravity(toggle);",
  "vehicle.setFullbeam(toggle);",
  "vehicle.setHasStrongAxles(toggle);",
  "vehicle.setHeliBladesFullSpeed();",
  "vehicle.setForwardSpeed(speed);",
  "vehicle.setIndicatorLights(turnSignal, toggle);",
  "vehicle.setInteriorlight(toggle);",
  "vehicle.setIsWanted(state);",
  "vehicle.setHeliBladesSpeed(speed);",
  "vehicle.setHandling(type, value);",
  "vehicle.setFarDrawS(toggle);",
  "mp.game.vehicle.setGeneratesEngineShockingEvents(handle, enable);",
  "mp.game.vehicle.setIndividualDoorsLocked(vehicle, doorIndex, destroyType)",
  "mp.game.vehicle.setHasMutedSirens(vehicle, toggle)",
  "mp.game.vehicle.setIsRacing(vehicle, toggle)",
  "mp.game.vehicle.setForkliftForkHeight(vehicle, height)",
  "mp.game.vehicle.setHeliTurbulenceScalar(vehicle, p1)",
  "mp.game.vehicle.setHoverTransformActive(vehicle, toggle)",
  "mp.game.vehicle.setHoverTransformEnabled(vehicle, toggle)",
  "mp.game.vehicle.setHoverTransformPercentage(vehicle, percentage)",
  "mp.game.vehicle.setHoverTransformRatio(vehicle, ratio)",
  "mp.game.vehicle.setHydraulicWheelStateTransition(vehicle, wheelId, state, value, p4)",
  "mp.game.vehicle.setHydraulicWheelState(vehicle, wheelIndex)",
  "mp.game.vehicle.setHydraulicWheelValue(vehicle, wheelId, value)",
  "mp.game.vehicle.setHydraulicRaised(vehicle, raised)",
  "mp.game.vehicle.setForceAfterburner(vehicle, toggle)",
  "mp.game.vehicle.setExtendedRemovalRange(vehicle, range)",
  "mp.game.vehicle.setHandlingHashForAi(vehicle, hash)",
  "mp.game.vehicle.setInactiveDuringPlayback(vehicle, toggle)",
  "mp.game.vehicle.setForceHd(vehicle, toggle)",
  "mp.game.vehicle.setHasBeenDrivenFlag(vehicle, toggle)",
  "mp.game.vehicle.setFlightNozzlePositionImmediate(vehicle, angle)",
  "mp.game.vehicle.setFlightNozzlePosition(vehicle, angleRatio)",
  "mp.game.vehicle.setHeliTailExplodeThrowDashboard(vehicle, p1)",
  "mp.game.vehicle.setHeliTailRotorHealth(vehicle, health)",
  "mp.game.vehicle.setHeliMainRotorHealth(heliHandle, health)",
  "mp.game.vehicle.setInteriorColor(vehicle, color)",
  "mp.game.vehicle.setHasUnbreakableLights(vehicle, p1)",
  "mp.game.vehicle.setMissionTrainAsNoLongerNeeded(train, p1);",
  "mp.game.vehicle.setNumberOfParkedVehicles(value);",
  "mp.game.vehicle.setParkedVehicleDensityMultiplierThisFrame(multiplier);",
  "vehicle.setModKit(modKit);",
  "vehicle.setNeonLightEnabled(index, toggle);",
  "vehicle.setLights(state);",
  "vehicle.setPaintFade(fade);",
  "vehicle.setOnGroundProperly();",
  "vehicle.setPedEnabledBikeRingtone(p1);",
  "vehicle.setMissionTrainCoords(x, y, z);",
  "vehicle.setLivery(livery);",
  "vehicle.setPetrolTankHealth(fix);",
  "vehicle.setNeonLightsColour(r, g, b);",
  "vehicle.setNumberPlateTextIndex(plateIndex);",
  "vehicle.setLodMultiplier(multiplier);",
  "vehicle.setNumberPlateText(plateText);",
  "vehicle.setLightMultiplier(multiplier);",
  "vehicle.setPlaneMinHeightAboveGround(height);",
  "vehicle.setJetEngineOn(toggle);",
  "vehicle.setPedTargettableDestroy(vehicleComponent, destroyType);",
  "vehicle.setNameDebug(name);",
  "vehicle.setLandingGear(state);",
  "vehicle.setOutOfControl(killDriver, explodeOnImpact);",
  "vehicle.setNeedsToBeHotwired(toggle);",
  "vehicle.setNeonColor(int r, int g, int b)",
  "vehicle.setPlaneEngineHealth(health);",
  "mp.game.vehicle.setParachuteTextureVariation(handle, variation);",
  "mp.game.vehicle.setParkedDensityMultiplierThisFrame(multiplier)",
  "mp.game.vehicle.setNumberOfParkedS(value)",
  "mp.game.vehicle.setLightsMode(vehicle, p1)",
  "mp.game.vehicle.setNitroEnabled(vehicle, toggle, level, power, rechargeTime, disableSound)",
  "mp.game.vehicle.setOppressorTransformState(vehicle, state)",
  "mp.game.vehicle.setParachuteModel(vehicle, modelHash)",
  "mp.game.vehicle.setParachuteActive(vehicle, active)",
  "mp.game.vehicle.setKersAllowed(vehicle, toggle)",
  "mp.game.vehicle.setPickupRopeLengthForCargobob(cargobob, length1, length2, p3)",
  "mp.game.vehicle.setLightsCutoffDistanceTweak(distance)",
  "mp.game.vehicle.setLastDriven(vehicle)",
  "mp.game.vehicle.setMaxSpeed(vehicle, speed)",
  "mp.game.vehicle.setModelIsSuppressed(model, suppressed)",
  "mp.game.vehicle.setPlaybackSpeed(p0, speed);",
  "mp.game.vehicle.setRandomTrains(toggle);",
  "mp.game.vehicle.setScriptVehicleGenerator(vehicleGenerator, enabled);",
  "mp.game.vehicle.setPlaybackToUseAiTryToRevertBackLater(p0, p1, p2, p3);",
  "mp.game.vehicle.setRandomBoats(toggle);",
  "mp.game.vehicle.setRandomVehicleDensityMultiplierThisFrame(multiplier);",
  "vehicle.setRudderBroken(p1);",
  "vehicle.setSearchlight(toggle, canBeUsedByAI);",
  "vehicle.setReduceGrip(toggle);",
  "vehicle.setTimedExplosion(ped, toggle);",
  "vehicle.setRenderTrainAsDerailed(toggle);",
  "vehicle.setStrong(toggle);",
  "vehicle.setSteerBias(value);",
  "vehicle.setTaxiLights(state);",
  "vehicle.setProvidesCover(toggle);",
  "vehicle.setSilent(toggle);",
  "vehicle.setPlaybackToUseAi(flag);",
  "vehicle.setPlayersLast();",
  "vehicle.setSiren(toggle);",
  "vehicle.setTowTruckCraneHeight(height);",
  "mp.players.local.vehicle.setSirenSound(true)",
  "mp.game.vehicle.setRandomBoatsInMp(enable);",
  "mp.game.vehicle.setRandomBoatsInMp(true);",
  "mp.game.vehicle.setPlanePropellersHealth(handle, health);",
  "mp.game.vehicle.setScriptGenerator(vehicleGenerator, enabled)",
  "mp.game.vehicle.setRandomDensityMultiplierThisFrame(multiplier)",
  "mp.game.vehicle.setSubmarineCrushDepths(vehicle, p1, depth1, depth2, depth3)",
  "mp.game.vehicle.setTrailerInverseMassScale(vehicle, p1)",
  "mp.game.vehicle.setTrailerLegsRaised(vehicle)",
  "mp.game.vehicle.setTrailerLegsLowered(trailer)",
  "mp.game.vehicle.setSpecialflightWingRatio(vehicle, ratio)",
  "mp.game.vehicle.setRocketBoostPercentage(vehicle, percentage)",
  "mp.game.vehicle.setRampUpwardsLaunchMotion(vehicle, normalise)",
  "mp.game.vehicle.setRampSidewaysLaunchMotion(vehicle, takeDamage)",
  "mp.game.vehicle.setReceivesRampDamage(vehicle, toggle)",
  "mp.game.vehicle.setRocketBoostActive(vehicle, active)",
  "mp.game.vehicle.setRocketBoostRefillTime(vehicle, seconds)",
  "mp.game.vehicle.setRampLaunchModifier(vehicle, impulseScale)",
  "mp.game.vehicle.setSteeringBiasScalar(vehicle, scalar)",
  "mp.game.vehicle.setPlaneTurbulenceMultiplier(vehicle, multiplier)",
  "mp.game.vehicle.setShadowEffect(vehicle, p1, p2)",
  "mp.game.vehicle.setShootAtTarget(driver, entity, xTarget, yTarget, zTarget)",
  "mp.game.vehicle.setTaskGotoPlaneMinHeightAboveTerrain(plane, height)",
  "mp.game.vehicle.setReduceTraction(vehicle, val)",
  "mp.game.vehicle.setTankTurretPosition(vehicle, position, p2)",
  "mp.game.vehicle.setTowTruckArmPosition(vehicle, position)",
  "mp.game.vehicle.setRoofLivery(vehicle, livery)",
  "mp.game.vehicle.setReduceDriftSuspension(vehicle, enable)",
  "vehicle.setRimRadius(wheelId, value)",
  "vehicle.setSuspensionHeight(value);",
  "mp.game.vehicle.setTrailerAttachmentsUnbreakable(toggle)",
  "mp.game.vehicle.skipTimeInPlaybackRecordedVehicle(p0, p1);",
  "mp.game.vehicle.setVehicleDensityMultiplierThisFrame(multiplier);",
  "mp.game.vehicle.setVehicleModelIsSuppressed(model, suppressed);",
  "mp.game.vehicle.setVehicleShootAtTarget(driver, entity, xTarget, yTarget, zTarget);",
  "mp.game.vehicle.skipToEndAndStopPlaybackRecordedVehicle(p0);",
  "vehicle.setTrainCruiseSpeed(speed);",
  "vehicle.setWheelsCanBreak(enabled);",
  "vehicle.setWheelType(WheelType);",
  "vehicle.setWindowTint(tint);",
  "vehicle.setTyreFixed(tyreIndex);",
  "vehicle.setUndriveable(toggle);",
  "vehicle.smashWindow(index);",
  "vehicle.setWheelsCanBreakOffWhenBlowUp(toggle);",
  "vehicle.setTrainSpeed(speed);",
  "vehicle.setTyreSmokeColor(r, g, b);",
  "vehicle.setTyresCanBurst(toggle);",
  "vehicle.setTyreBurst(index, onRim, p3);",
  "vehicle.spawn(Vector3 position, float heading);",
  "mp.game.vehicle.setUseCutsceneWheelCompression(vehicle, wheelCompression, animateWheels, animateJoints)",
  "mp.game.vehicle.setUsePlayerLightSettings(vehicle, toggle)",
  "mp.game.vehicle.stabiliseEntityAttachedToHeli(vehicle, entity, p2)",
  "mp.game.vehicle.setTrainTrackSpawnFrequency(trackIndex, frequency)",
  "mp.game.vehicle.setTyreTractionLossMultiplier(vehicle, wheelIndex, multiplier)",
  "mp.game.vehicle.setTyreSoftnessMultiplier(vehicle, wheelIndex, multiplier)",
  "mp.game.vehicle.setTyreWearMultiplier(vehicle, wheelIndex, multiplier)",
  "mp.game.vehicle.setTyreHealth(vehicle, wheelIndex, health)",
  "mp.game.vehicle.setWheelsDealDamage(vehicle, toggle)",
  "mp.game.vehicle.setUnkBool0X102ForSubmarineTask(vehicle, value)",
  "mp.game.vehicle.setUnkFloat0X104ForSubmarineTask(vehicle, value)",
  "mp.game.vehicle.setTurretUnk(vehicle, index, toggle)",
  "mp.game.vehicle.setWeaponsDisabled(vehicle, canTargetObjects)",
  "mp.game.vehicle.setUseHigherJumpForce(vehicle, toggle)",
  "mp.game.vehicle.setWeaponCapacity(vehicle, weaponIndex, capacity)",
  "mp.game.vehicle.setUnkDamageMultiplier(vehicle, multiplier)",
  "mp.game.vehicle.setUseAlternateHandling(vehicle, toggle)",
  "mp.game.vehicle.setVehicleMod(vehicle, modType, modIndex, customTires)",
  "mp.game.vehicle.setUsesLargeRearRamp(vehicle, toggle)",
  "mp.game.vehicle.setTurretSpeedThisFrame(vehicle, speed)",
  "mp.game.vehicle.setVehicleDamage(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel)",
  "mp.game.vehicle.setXenonLightsColor(vehicle, colorIndex)",
  "mp.game.vehicle.skipTimeInPlaybackRecorded(vehicle, time)",
  "mp.game.vehicle.skipToEndAndStopPlaybackRecorded(vehicle)",
  "vehicle.setTyreRadius(wheelIndex, radius);",
  "vehicle.setTyreWidth(wheelIndex, width);",
  "vehicle.setWheelCamber(wheelIndex, value);",
  "vehicle.setWheelHeight(wheelIndex, height);",
  "vehicle.setWheelRadius(radius);",
  "vehicle.setWheelTrackWidth(wheelIndex, width);",
  "vehicle.setWheelWidth(width);",
  "mp.game.vehicle.startPlaybackRecordedVehicleWithFlags(p0, p1, p2, p3, p4, p5);",
  "mp.game.vehicle.unpausePlaybackRecordedVehicle(p0);",
  "mp.game.vehicle.stopPlaybackRecordedVehicle(p0);",
  "mp.game.vehicle.startPlaybackRecordedVehicleUsingAi(p0, p1, p2, p3, p4);",
  "mp.game.vehicle.startPlaybackRecordedVehicle(p0, p1, p2, p3);",
  "mp.game.vehicle.switchTrainTrack(intersectionId, state);",
  "vehicle.steerUnlockBias(toggle);",
  "vehicle.toggleMod(modType, toggle);",
  "vehicle.wasCounterActivated(p1);",
  "vehicle.trackVisibility();",
  "vehicle.startHorn(duration, mode, forever);",
  "vehicle.startAlarm();",
  "vehicle.setMod(modType, modIndex);",
  "mp.voiceChat.setPreprocessingParam(10,1);",
  "mp.voiceChat.getPreprocessingParam(9);",
  "vehicle.wheelCount();",
  "mp.game.vehicle.stopBringToHalt(vehicle)",
  "mp.game.vehicle.transformSubmarineTo(vehicle, noAnimation)",
  "mp.game.vehicle.transformToSubmarine(vehicle, noAnimation)",
  "mp.game.vehicle.stopAllGarageActivity()",
  "mp.game.vehicle.startPlaybackRecordedUsingAi(vehicle, recording, script, speed, drivingStyle)",
  "mp.game.vehicle.unpausePlaybackRecorded(vehicle)",
  "mp.game.vehicle.stopPlaybackRecorded(vehicle)",
  "mp.game.vehicle.startPlaybackRecordedWithFlags(vehicle, recording, script, flags, time, drivingStyle)",
  "mp.game.vehicle.startPlaybackRecorded(vehicle, recording, script, p3)",
  "vehicle.streamedPlayers();",
  "vehicle.taxiLights()'",
  "vehicle.trimColor();",
  "mp.voiceChat.gameOutputEnabled();",
  "mp.voiceChat.gameOutputCategory();",
  "mp.game.water.testProbeAgainstAllWater(p0, p1, p2, p3, p4, p5, p6, p7);",
  "mp.game.weapon.createWeaponObject(weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7);",
  "mp.game.weapon.enableLaserSightRendering(toggle);",
  "mp.game.weapon.canUseWeaponOnParachute(weaponHash);",
  "mp.game.water.modifyWater(x, y, radius, height);",
  "mp.game.water.getWaterHeight(x, y, z, height);",
  "mp.game.weapon.doesWeaponTakeWeaponComponent(weaponHash, componentHash);",
  "mp.game.water.setWavesIntensity(intensity);",
  "mp.game.water.testVerticalProbeAgainstAllWater(x, y, z, p3, p4);",
  "mp.game.water.getWaterHeightNoWaves(x, y, z, height);",
  "mp.game.weapon.cancelCurrentDamageEvent();",
  "mp.game.weapon.getComponentTypeModel(componentHash)",
  "mp.game.weapon.getComponentVariantExtraComponentCount(componentHash)",
  "mp.game.weapon.getComponentVariantExtraComponentModel(componentHash, extraComponentIndex)",
  "mp.game.weapon.getCurrentPedVehicle(ped)",
  "mp.game.weapon.getBestPed(ped, p1)",
  "mp.game.weapon.getCurrentPed(ped, p2)",
  "mp.game.weapon.getCurrentPedEntityIndex(ped, p1)",
  "mp.game.weapon.getAmmoInPed(ped, weaponhash)",
  "mp.game.weapon.addAmmoToPed(ped, weaponHash, ammo)",
  "mp.game.weapon.clearPedLastDamage(ped)",
  "mp.game.weapon.clearEntityLastDamage(entity)",
  "mp.game.weapon.getMaxAmmoInClip(ped, weaponHash, p2)",
  "mp.game.weapon.getAmmoInClip(ped, weaponHash)",
  "mp.game.weapon.getMaxAmmo(ped, weaponHash)",
  "mp.game.weapon.getMaxAmmoByType(ped, ammoTypeHash)",
  "mp.game.weapon.addAmmoToPedByType(ped, ammoTypeHash, ammo)",
  "mp.game.weapon.explodeProjectiles(ped, weaponHash, p2)",
  "mp.game.weapon.getIsPedGadgetEquipped(ped, gadgetHash)",
  "mp.game.weapon.getMaxRangeOfCurrentPed(ped)",
  "mp.game.weapon.getLockonDistanceOfCurrentPed(ped)",
  "mp.game.weapon.createObject(weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9)",
  "mp.game.weapon.doesTakeWeaponComponent(weaponHash, componentHash)",
  "mp.game.weapon.getObjectFromPed(ped, p1)",
  "mp.game.weapon.getObjectTintIndex(weapon)",
  "mp.game.weapon.getObjectLiveryColor(weaponObject, camoComponentHash)",
  "mp.game.weapon.getHudStats(weaponHash)",
  "mp.game.weapon.getComponentHudStats(componentHash)",
  "mp.game.weapon.getDamage(weaponHash, componentHash)",
  "mp.game.weapon.getClipSize(weaponHash)",
  "mp.game.weapon.getAllWeaponNames())",
  "mp.game.weapon.doesAirDefenseZoneExist(zoneId)",
  "mp.game.weapon.fireAirDefense(zoneId, x, y, z)",
  "mp.game.weapon.createAirDefenseArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, weaponHash)",
  "mp.game.weapon.createAirDefenseSphere(x, y, z, radius, p4, p5, p6, weaponHash)",
  "mp.game.weapon.getWeapontypeModel(weaponHash);",
  "mp.game.weapon.getWeapontypeGroup(weaponHash);",
  "mp.game.weapon.getWeapontypeSlot(weaponHash);",
  "mp.game.weapon.getWeaponObjectTintIndex(weapon);",
  "mp.game.weapon.getWeaponTintCount(weaponHash);",
  "mp.game.weapon.hasWeaponGotWeaponComponent(weapon, addonHash);",
  "mp.game.weapon.giveWeaponObjectToPed(weaponObject, ped);",
  "mp.game.weapon.getWeaponComponentTypeModel(componentHash);",
  "mp.game.weapon.hasWeaponAssetLoaded(weaponHash);",
  "mp.game.weapon.getWeaponHudStats(p0, p1);",
  "mp.game.weapon.getWeaponComponentHudStats(p0, p1);",
  "mp.game.weapon.hasVehicleGotProjectileAttached(driver, vehicle, weapon, p3);",
  "mp.game.weapon.giveWeaponComponentToWeaponObject(weaponObject, addonHash);",
  "mp.game.weapon.getWeaponDamageType(weaponHash);",
  "mp.game.weapon.isWeaponValid(weaponHash);",
  "mp.game.weapon.giveLoadoutToPed(mp.players.local.handle, mp.game.joaat(\"LOADOUT_DEFAULT\"))",
  "mp.game.weapon.getTypeModel(weaponHash)",
  "mp.game.weapon.getTypeSlot(weaponHash)",
  "mp.game.weapon.getTypeGroup(weaponHash)",
  "mp.game.weapon.isValid(weaponHash)",
  "mp.game.weapon.isPedArmed(ped, typeFlags)",
  "mp.game.weapon.hasPedGot(ped, weaponHash, p2)",
  "mp.game.weapon.isPedReadyToShoot(ped)",
  "mp.game.weapon.getPedTypeInSlot(ped, weaponSlot)",
  "mp.game.weapon.giveToPed(ped, weaponHash, ammoCount, isHidden, bForceInHand)",
  "mp.game.weapon.hidePedForScriptedCutscene(ped, toggle)",
  "mp.game.weapon.giveDelayedToPed(ped, weaponHash, ammoCount, bForceInHand)",
  "mp.game.weapon.hasPedBeenDamagedBy(ped, weaponHash, weaponType)",
  "mp.game.weapon.hasEntityBeenDamagedBy(entity, weaponHash, weaponType)",
  "mp.game.weapon.getPedAmmoByType(ped, ammoTypeHash)",
  "mp.game.weapon.getSelectedPed(ped)",
  "mp.game.weapon.getPedLastImpactCoord(ped)",
  "mp.game.weapon.getPedAmmoTypeFrom2(ped, weaponHash)",
  "mp.game.weapon.getPedAmmoTypeFrom(ped, weaponHash)",
  "mp.game.weapon.makePedReload(ped)",
  "mp.game.weapon.isPedComponentActive(ped, weaponHash, componentHash)",
  "mp.game.weapon.hasPedGotComponent(ped, weaponHash, componentHash)",
  "mp.game.weapon.giveComponentToPed(ped, weaponHash, componentHash)",
  "mp.game.weapon.hasAssetLoaded(weaponHash)",
  "mp.game.weapon.giveComponentToWeaponObject(weaponObject, addonHash)",
  "mp.game.weapon.hasGotWeaponComponent(weapon, addonHash)",
  "mp.game.weapon.giveObjectToPed(weaponObject, ped)",
  "mp.game.weapon.getTintCount(weaponHash)",
  "mp.game.weapon.getPedLiveryColor(ped, weaponHash, camoComponentHash)",
  "mp.game.weapon.getTimeBetweenShots(weaponHash)",
  "mp.game.weapon.isAnyAirDefenseZoneInsideSphere(x, y, z, radius)",
  "mp.game.weapon.requestWeaponHighDetailModel(weaponObject);",
  "mp.game.weapon.removeWeaponComponentFromWeaponObject(weaponObject, componentHash);",
  "mp.game.weapon.requestWeaponAsset(weaponHash, p1, p2);",
  "mp.game.weapon.removeWeaponAsset(weaponHash);",
  "mp.game.weapon.setFlashLightFadeDistance(distance);",
  "mp.game.weapon.setWeaponObjectTintIndex(weapon, tint);",
  "mp.game.weapon.setPedAmmoToDrop(p0, p1);",
  "mp.game.weapon.removeAllProjectilesOfType(weaponHash, p1);",
  "mp.game.weapon.setCurrentDamageEventAmount(number);",
  "mp.game.weapon.setCurrentPedVehicle(ped, weaponHash)",
  "mp.game.weapon.setCurrentPed(ped, weaponHash, bForceInHand)",
  "mp.game.weapon.setPedAmmo(ped, weaponHash, ammo, p3)",
  "mp.game.weapon.setPedInfiniteAmmo(ped, toggle, weaponHash)",
  "mp.game.weapon.setPedInfiniteAmmoClip(ped, toggle)",
  "mp.game.weapon.setPedCurrentVisible(ped, visible, deselectWeapon, p3, p4)",
  "mp.game.weapon.setPedDropsWeaponsWhenDead(ped, toggle)",
  "mp.game.weapon.removeFromPed(ped, weaponHash)",
  "mp.game.weapon.removeAllPedS(ped, p1)",
  "mp.game.weapon.setPedDropsInventory(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount)",
  "mp.game.weapon.setPedDrops(ped)",
  "mp.game.weapon.setAmmoInClip(ped, weaponHash, ammo)",
  "mp.game.weapon.setPedAmmoByType(ped, ammoTypeHash, ammo)",
  "mp.game.weapon.setPedGadget(ped, gadgetHash, p2)",
  "mp.game.weapon.setPickupAmmoAmountScaler(p0)",
  "mp.game.weapon.requestAsset(weaponHash, p1, p2)",
  "mp.game.weapon.refillAmmoInstantly(ped)",
  "mp.game.weapon.removeComponentFromPed(ped, weaponHash, componentHash)",
  "mp.game.weapon.removeAsset(weaponHash)",
  "mp.game.weapon.removeComponentFromWeaponObject(p0, p1)",
  "mp.game.weapon.setObjectTintIndex(weapon, tintIndex)",
  "mp.game.weapon.setPedLiveryColor(ped, weaponHash, camoComponentHash, colorIndex)",
  "mp.game.weapon.setObjectLiveryColor(weaponObject, camoComponentHash, colorIndex)",
  "mp.game.weapon.requestHighDetailModel(weaponObject)",
  "mp.game.weapon.setPedShootOrdnance(ped, p1)",
  "mp.game.weapon.setPedChanceOfFiringBlanks(ped, xBias, yBias)",
  "mp.game.weapon.setExplosionRadiusMultiplier(weaponHash, multiplier)",
  "mp.game.weapon.setDamageModifierThisFrame(weaponHash, damageMultiplier)",
  "mp.game.weapon.setAnimationOverride(ped, animStyle)",
  "mp.game.weapon.setFlashLightEnabled(ped, toggle)",
  "mp.game.weapon.setCanPedEquipAllS(ped, toggle)",
  "mp.game.weapon.setCanPedEquip(ped, weaponHash, toggle)",
  "mp.game.weapon.setPlayerAirDefenseZoneFlag(player, zoneId, enable)",
  "mp.game.weapon.removeAllAirDefenseZones()",
  "mp.game.weapon.removeAirDefenseZone(zoneId)",
  "mp.game.weapon.setCurrentDamageEventCritical(toggle)",
  "mp.game.weapon.setEnableLocalOutgoingDamage(toggle)",
  "mp.events.add(\"playerReady\", () => mp.game.weapon.setEnableLocalOutgoingDamage(true));",
  "mp.game.zone.overridePopscheduleVehicleModel(scheduleId, vehicleHash);",
  "mp.game.zone.getZoneAtCoords(x, y, z);",
  "mp.game.zone.setZoneEnabled(zoneId, toggle);",
  "mp.game.worldprobe.startShapeTestCapsule(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);",
  "mp.game.zone.getZoneScumminess(zoneId);",
  "mp.game.zone.getHashOfMapAreaAtCoords(x, y, z);",
  "mp.game.zone.clearPopscheduleOverrideVehicleModel(scheduleId);",
  "mp.game.zone.getZonePopschedule(zoneId);",
  "mp.game.worldprobe.getShapeTestResultEx(rayHandle, hit, endCoords, surfaceNormal, _materialHash, entityHit);",
  "mp.game.worldprobe.castRayPointToPoint(x1, y1, z1, x2, y2, z2, flags, entity, p8);",
  "mp.game.worldprobe.startShapeTestBox(x, y, z, sizeX, sizeY, sizeZ, rotationX, rotationY, rotationZ, rotationOrder, flags, entity, p12);",
  "mp.game.worldprobe.getShapeTestResult(rayHandle, hit, endCoords, surfaceNormal, entityHit);",
  "mp.game.worldprobe.startShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, p8);",
  "mp.game.zone.getZoneFromNameId(zoneName);"
]
